cmake_minimum_required(VERSION 3.13)
cmake_policy(SET CMP0046 NEW)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${PROJECT_ROOT}/config)
include_directories(${PROJECT_ROOT}/common/bm1684/include)
include_directories(${PROJECT_ROOT}/bmlib/include)
include_directories(${PROJECT_ROOT}/bmlib/src)
include_directories(${PROJECT_ROOT}/../bm_prebuilt_toolchains_win/gflags-windows/include)

if(TARGET_TYPE STREQUAL "release")
	if (RUNTIME_LIB STREQUAL "MD")
		set(CMAKE_CXX_FLAGS_RELEASE "/MD")
		set(CMAKE_C_FLAGS_RELEASE "/MD")
	else()
		set(CMAKE_CXX_FLAGS_RELEASE "/MT")
		set(CMAKE_C_FLAGS_RELEASE "/MT")
	endif()
else()
	if (RUNTIME_LIB STREQUAL "MD")
		set(CMAKE_CXX_FLAGS_DEBUG "/MDd")
		set(CMAKE_C_FLAGS_DEBUG "/MDd")
	else()
		set(CMAKE_CXX_FLAGS_DEBUG "/MTd")
		set(CMAKE_C_FLAGS_DEBUG "/MTd")
	endif()
endif()
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_INSTALL_PREFIX}/bm-smi)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_INSTALL_PREFIX}/bm-smi)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_INSTALL_PREFIX}/bm-smi)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_INSTALL_PREFIX}/bm-smi)
if(LINUX)
include_directories(${PROJECT_ROOT}/bmlib/src/linux)
elseif(WINDOWS)
include_directories(${PROJECT_ROOT}/bmlib/src/window)
endif()

if(TARGET_TYPE STREQUAL "release")
	link_directories(${PROJECT_ROOT}/../bm_prebuilt_toolchains_win/gflags-windows/lib/Release)
	file(COPY ${PROJECT_ROOT}/../bm_prebuilt_toolchains_win/gflags-windows/bin/Release/gflags.dll DESTINATION ${CMAKE_INSTALL_PREFIX}/bm-smi)
else()
	link_directories(${PROJECT_ROOT}/../bm_prebuilt_toolchains_win/gflags-windows/lib/Debug)
	file(COPY ${PROJECT_ROOT}/../bm_prebuilt_toolchains_win/gflags-windows/bin/Debug/gflags_debug.dll DESTINATION ${CMAKE_INSTALL_PREFIX}/bm-smi)
endif()
link_directories(${PROJECT_ROOT}/out/release/$ENV{TARGET_PROJECT}_CMAKE/lib)
SET(SRCS
	update_boot_info.cpp
)
SET(SRCS1
	sc5_burning_tool.cpp
)
SET(SRCS2
	bm_firmware_update.cpp
)

add_executable(update_boot_info ${SRCS})
add_executable(sc5_burning_tool ${SRCS1})
add_executable(bm_firmware_update ${SRCS2})
if(TARGET_TYPE STREQUAL "release")
	target_link_libraries(update_boot_info gflags libbmlib-static)
	target_link_libraries(sc5_burning_tool gflags libbmlib-static)
	target_link_libraries(bm_firmware_update gflags libbmlib-static)
else()
	target_link_libraries(update_boot_info gflags_debug libbmlib-static)
	target_link_libraries(sc5_burning_tool gflags_debug libbmlib-static)
	target_link_libraries(bm_firmware_update gflags_debug libbmlib-static)
endif()
add_dependencies(update_boot_info libbmlib-static)
add_dependencies(sc5_burning_tool libbmlib-static)
add_dependencies(bm_firmware_update libbmlib-static)
