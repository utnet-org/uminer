/*
 * This file was generated by gen_bd_regs_from_TPU_Reg_xlsx.py.
 * Please DO NOT edit it.
 */

#ifndef __BD_REG_DEF_H__
#define __BD_REG_DEF_H__

#define BD_REG_COUNT (32)

//bd reg id defines
#define BD_ID_DES_CMD_EN                { 0, 1 }
#define BD_ID_DES_CMD_END               { 1, 1 }
// 0: 1024bit
// 1: not support
// 2: 256bit
// 3: 384bit
// 4: 512bit
// 5: not support
// 6: not support
// 7: not support
#define BD_ID_DES_CMD_WIDTH             { 2, 3 }
// 是否软件缓起指令
// 0: 正常指令
// 1: 软件缓起指令
#define BD_ID_DES_CMD_SPB               { 5, 1 }
// 是否使能命令ID
// 0: 不关心CMD ID, 立刻执行
// 1: 需要等两个其他engine的特定命令ID
#define BD_ID_DES_CMD_ID_EN             { 6, 1 }
// TPU命令ID
// 0不可用
#define BD_ID_DES_CMD_ID_TPU            { 7, 16 }
// GDMA CMD ID
// 等待GDMA的该ID完成后, 方可执行本descriptor
#define BD_ID_DES_CMD_ID_GDMA           { 23, 16 }
// command 保持模式使能
// 0: 否则, 寄存器堆恢复默认值
// 1: 如果设置这个域, 那么在这条command进入command buffer时, 寄存器堆不会恢复默认值
#define BD_ID_DES_CMD_KEEP              { 39, 1 }
// 中断使能
// 0: Mask中断
// 1: 如果设置这个域, 那么在这条command执行完毕的时候会产生中断, 但是如果后续还有command的话, 后续command的执行不会停止
#define BD_ID_DES_CMD_INTR_EN           { 40, 1 }
// 指令任务类型
// 0:   convolution
// 1:   depthwise or pooling
// 2:   matrix multiply
// 3:   tensor arithmetic
// 4:   common(COMM)
// 5:   not support
// 6:   table lookup
// 7:   not support
// 8:   md scalar
// 9:   md sfu
// 10: md linear
// 11: not support
// 12: decompress
// 13: md cmp
// 14: vector correlation
// 15: not support
#define BD_ID_DES_TSK_TYP               { 41, 4 }
// 指令操作类型
// 0:   mul/cube/gen_euid
// 1:   mac
// 2:   add
// 3:   sub
// 4:   max
// 5:   min
// 6:   shift
// 7:   and
// 8:   or
// 9:   xor
// 10: select great
// 11: select equal
// 12: divide
// 13: 泰勒展开 
// 14: float32 to int32
// 15: normalize (结果以int 形式存放)
// 16: normalize (结果以float形式存放)
// 17: rsqrt
// 18: add tree
// 19: copy
// 20: (A+B)的平方
// 21: (A- B)的平方
// 22: md cmp
// 23: md select
// 24: md cmp and select
#define BD_ID_DES_TSK_EU_TYP            { 45, 5 }
// 仅在Tensor arithmetic 指令使用
// 0: 每个lane开启16个eu  
// 1: 每个lane开启8个eu
#define BD_ID_DES_EU_HALF_EN            { 50, 1 }
// 输入操作数数目
// 0: 4个操作数
// 1: 1个操作数
// 2: 2个操作数_x000D_
// 3: 3个操作数_x000D_
#define BD_ID_DES_TSK_OPD_NUM           { 51, 2 }
// int8运算，32bit乘累加结果右移比特数
#define BD_ID_DES_OPT_RIGHT_SHIFT       { 53, 5 }
// add_result时，原来结果左移比特数
#define BD_ID_DES_OPT_LEFT_SHIFT        { 58, 5 }
// 移位选项
// 0: 逻辑右移
// 1: 算数右移
#define BD_ID_DES_OPT_SHIFT_TYP         { 63, 1 }
// 结果是否和原res0_addr地址的内容累加
#define BD_ID_DES_OPT_RES_ADD           { 64, 1 }
// int8，结果是否relu
#define BD_ID_DES_OPT_RELU              { 65, 1 }
// 是否转置，只用在矩阵乘
#define BD_ID_DES_OPT_LEFT_TRAN         { 66, 1 }
// 是否采用winograd计算卷积
#define BD_ID_DES_OPT_WINOGRAD          { 67, 1 }
// kernel是否转置
#define BD_ID_DES_OPT_KERNEL_ROTATE     { 68, 1 }
// opd0数据类型是INT8时，opd0是否为有符号数
// 0: 无符号数
// 1: 有符号数
#define BD_ID_DES_OPT_OPD0_SIGN         { 69, 1 }
// opd1数据类型是INT8时，opd0是否为有符号数
// 0: 无符号数
// 1: 有符号数
#define BD_ID_DES_OPT_OPD1_SIGN         { 70, 1 }
// opd2数据类型是INT8时，opd0是否为有符号数
// 0: 无符号数
// 1: 有符号数
#define BD_ID_DES_OPT_OPD2_SIGN         { 71, 1 }
// res0数据类型
// 0: INT8
// 1: FP16
// 2: FP32
// 3: INT16
// 4: INT32
// 5: BFP16
// 6: INT64
// others: not support
#define BD_ID_DES_OPT_RES0_PREC         { 72, 3 }
// opd0数据类型
// 0: INT8
// 1: FP16
// 2: FP32
// 3: INT16
// 4: INT32
// 5: BFP16
// others: not support
#define BD_ID_DES_OPT_OPD0_PREC         { 75, 3 }
// opd1数据类型
// 0: INT8
// 1: FP16
// 2: FP32
// 3: INT16
// 4: INT32
// 5: BFP16
// others: not support
#define BD_ID_DES_OPT_OPD1_PREC         { 78, 3 }
// opd2数据类型
// 0: INT8
// 1: FP16
// 2: FP32
// 3: INT16
// 4: INT32
// 5: BFP16
// others: not support
#define BD_ID_DES_OPT_OPD2_PREC         { 81, 3 }
// opd0是否常数_x000D_, 如果是常数的话, 其值在des_opd0_addr中
// 0: 非常数
// 1: 常数
#define BD_ID_DES_OPT_OPD0_CONST        { 84, 1 }
// opd1是否常数, 如果是常数的话，其值在des_opd1_addr中
// 0: 非常数
// 1: 常数
#define BD_ID_DES_OPT_OPD1_CONST        { 85, 1 }
// opd2是否常数, 如果是常数的话，其值在des_opd1_addr中
// 0: 非常数
// 1: 常数
#define BD_ID_DES_OPT_OPD2_CONST        { 86, 1 }
// res0数据存储格式
// 0:  对齐, 即
//      W_STRIDE=1
//      H_STRIDE=W
//      C_STRIDE=EU_NUM*roundup(H*W/EU_NUM)
//      N_STRIDE=C_STRIDE*roundup(C+C_START/LANE_NUM)
// 1:  紧密, 即
//      W_STRIDE=1
//      H_STRIDE=W
//      C_STRIDE=W*H
//      N_STRIDE=roundup(C+C_START/LANE_NUM)*C_STRIDE
// conv_neuron_/ winograd kernel的C对应OC，kernel的N对应IC
// 2:  偏置, 即
//      N_STRIDE=H_STRIDE=W_STRIDE=0
//      C_STRIDE=1
//      (depthwise中的kernel，以及md_sum的结果, conv/depthwise的bias使用该存储格式)
// 3:  张量，看具体配置
// others: not support
#define BD_ID_DES_SHORT_RES0_STR        { 87, 3 }
// opd0数据存储格式
// 0:  对齐, 即
//      W_STRIDE=1
//      H_STRIDE=W
//      C_STRIDE=EU_NUM*roundup(H*W/EU_NUM)
//      N_STRIDE=C_STRIDE*roundup(C+C_START/LANE_NUM)
// 1:  紧密, 即
//      W_STRIDE=1
//      H_STRIDE=W
//      C_STRIDE=W*H
//      N_STRIDE=roundup(C+C_START/LANE_NUM)*C_STRIDE
// conv_neuron_/ winograd kernel的C对应OC，kernel的N对应IC
// 2:  偏置, 即
//      N_STRIDE=H_STRIDE=W_STRIDE=0
//      C_STRIDE=1
//      (depthwise中的kernel，以及md_sum的结果, conv/depthwise的bias使用该存储格式)
// 3:  张量，看具体配置
// others: not support
#define BD_ID_DES_SHORT_OPD0_STR        { 90, 3 }
// opd1数据存储格式
// 0:  对齐, 即
//      W_STRIDE=1
//      H_STRIDE=W
//      C_STRIDE=EU_NUM*roundup(H*W/EU_NUM)
//      N_STRIDE=C_STRIDE*roundup(C+C_START/LANE_NUM)
// 1:  紧密, 即
//      W_STRIDE=1
//      H_STRIDE=W
//      C_STRIDE=W*H
//      N_STRIDE=roundup(C+C_START/LANE_NUM)*C_STRIDE
// conv_neuron_/ winograd kernel的C对应OC，kernel的N对应IC
// 2:  偏置, 即
//      N_STRIDE=H_STRIDE=W_STRIDE=0
//      C_STRIDE=1
//      (depthwise中的kernel，以及md_sum的结果, conv/depthwise的bias使用该存储格式)
// 3:  张量，看具体配置
// others: not support
#define BD_ID_DES_SHORT_OPD1_STR        { 93, 3 }
// opd2数据存储格式
// 0:  对齐, 即
//      W_STRIDE=1
//      H_STRIDE=W
//      C_STRIDE=EU_NUM*roundup(H*W/EU_NUM)
//      N_STRIDE=C_STRIDE*roundup(C+C_START/LANE_NUM)
// 1:  紧密, 即
//      W_STRIDE=1
//      H_STRIDE=W
//      C_STRIDE=W*H
//      N_STRIDE=roundup(C+C_START/LANE_NUM)*C_STRIDE
// conv_neuron_/ winograd kernel的C对应OC，kernel的N对应IC
// 2:  偏置, 即
//      N_STRIDE=H_STRIDE=W_STRIDE=0
//      C_STRIDE=1
//      (depthwise中的kernel，以及md_sum的结果, conv/depthwise的bias使用该存储格式)
// 3:  张量，看具体配置
// others: not support
#define BD_ID_DES_SHORT_OPD2_STR        { 96, 3 }
// opd0行方向每个元素后插入0的个数, 0-14有效
#define BD_ID_DES_OPD0_X_INS0           { 99, 4 }
// opd0列方向每个元素后插入0的个数, 0-14有效
#define BD_ID_DES_OPD0_Y_INS0           { 103, 4 }
// opd1行方向每个元素后插入0的个数, 0-14有效
#define BD_ID_DES_OPD1_X_INS0           { 107, 4 }
// opd1列方向每个元素后插入0的个数, 0-14有效
#define BD_ID_DES_OPD1_Y_INS0           { 111, 4 }
// opd0上方padding行数_x000D_，0-15有效
#define BD_ID_DES_OPD0_UP_PAD           { 115, 4 }
// opd0下方padding行数_x000D_，0-15有效
#define BD_ID_DES_OPD0_DN_PAD           { 119, 4 }
// opd0左方padding列数_x000D_，0-15有效
#define BD_ID_DES_OPD0_LF_PAD           { 123, 4 }
// opd0右方padding列数_x000D_，0-15有效
#define BD_ID_DES_OPD0_RT_PAD           { 127, 4 }
// 卷积/pooling横向stride，1-15有效
#define BD_ID_DES_RES_OP_X_STR          { 131, 4 }
// 卷积/pooling纵向stride，1-15有效
#define BD_ID_DES_RES_OP_Y_STR          { 135, 4 }
// lane mask
// 0: 代表对应的lane不会被写入
// 1: 代表对应的lane可以被写入
#define BD_ID_DES_TSK_LANE_NUM_0        { 139, 32 }
// lane mask
// 0: 代表对应的lane不会被写入
// 1: 代表对应的lane可以被写入
#define BD_ID_DES_TSK_LANE_NUM_1        { 171, 32 }
// res0的n, 0无效
// matrix multiply: res0 matrix的行数目
// mdsum: opd0的n, res0的n为1
#define BD_ID_DES_RES0_N                { 203, 16 }
// res0的c, 0无效
#define BD_ID_DES_RES0_C                { 219, 16 }
// res0的h, 0无效
// 在conv，depthwise conv和tensor arithmetic中res0的h最大值为2047(2048?)
#define BD_ID_DES_RES0_H                { 235, 16 }
// res0的w, 0无效
// 在conv, depthwise conv和tensor arithmetic中res0的w最大值为2047(2048?)
#define BD_ID_DES_RES0_W                { 251, 16 }
// opd0的n, 0无效
#define BD_ID_DES_OPD0_N                { 267, 16 }
// opd0的c, 0无效
#define BD_ID_DES_OPD0_C                { 283, 16 }
// opd0的h, 0无效
// 在conv, depthwise conv和tensor arithmetic中opd0的h最大值为2047(2048?)
#define BD_ID_DES_OPD0_H                { 299, 16 }
// opd0的w, 0无效
// 在conv, depthwise conv和tensor arithmetic中opd0的h最大值为2047(2048?)
#define BD_ID_DES_OPD0_W                { 315, 16 }
// opd1的n, 0无效
#define BD_ID_DES_OPD1_N                { 331, 16 }
// opd1的c, 0无效
#define BD_ID_DES_OPD1_C                { 347, 16 }
// opd1的h, 0无效
// 在conv, depthwise conv和tensor arithmetic中opd1的h最大值为2047(2048?)
#define BD_ID_DES_OPD1_H                { 363, 16 }
// opd1的w, 0无效
// 在conv, depthwise conv和tensor arithmetic中opd1的h最大值为2047(2048?)
#define BD_ID_DES_OPD1_W                { 379, 16 }
// res0的h右shift的数值, 只在tensor arithmetic使用
#define BD_ID_DES_RES0_H_SHIFT          { 395, 4 }
// res0的w右shift的数值, 只在tensor arithmetic使用
#define BD_ID_DES_RES0_W_SHIFT          { 399, 4 }
// opd0的h右shift的数值, 只在tensor arithmetic使用
#define BD_ID_DES_OPD0_H_SHIFT          { 403, 4 }
// opd0的w由shift的数值, 只在tensor arithmetic使用
#define BD_ID_DES_OPD0_W_SHIFT          { 407, 4 }
// opd1的h右shift的数值, 只在tensor arithmetic使用
#define BD_ID_DES_OPD1_H_SHIFT          { 411, 4 }
// opd1的w右shift的数值, 只在tensor arithmetic使用
#define BD_ID_DES_OPD1_W_SHIFT          { 415, 4 }
// res0的n stride
#define BD_ID_DES_RES0_N_STR            { 419, 19 }
// res0的c stride
#define BD_ID_DES_RES0_C_STR            { 438, 19 }
// opd0的n stride
#define BD_ID_DES_OPD0_N_STR            { 457, 19 }
// opd0的c stride
#define BD_ID_DES_OPD0_C_STR            { 476, 19 }
// opd1的n stride
#define BD_ID_DES_OPD1_N_STR            { 495, 19 }
// opd1的n stride
#define BD_ID_DES_OPD1_C_STR            { 514, 19 }
// opd2的n stride
#define BD_ID_DES_OPD2_N_STR            { 533, 19 }
// opd2的c stride
#define BD_ID_DES_OPD2_C_STR            { 552, 19 }
// int8运算add_result，原结果是有符号数还是无符号数
// 0: 无符号
// 1: 有符号
#define BD_ID_DES_OPT_RES_ADD_SIGN      { 571, 1 }
// 4n模式时, 表示opd0的n等于1, 用于tensor arithmetic指令
#define BD_ID_DES_OPD0_NEQ1             { 572, 1 }
// 4n模式时, 表示opd1的n等于1, 用于tensor arithmetic指令
#define BD_ID_DES_OPD1_NEQ1             { 573, 1 }
// opd3是否常数, 如果是常数的话, 其值在des_opd3_addr中
// 0: 非常数
// 1: 常数
#define BD_ID_DES_OPT_OPD3_CONST        { 574, 1 }
// res0起始地址
#define BD_ID_DES_RES0_ADDR             { 576, 32 }
// 如果des_opt_opd0_const为0, opd0起始地址
// 如果des_opt_opd0_const为1, opd0常数
#define BD_ID_DES_OPD0_ADDR             { 608, 32 }
// 如果des_opt_opd1_const为0, opd1起始地址
// 如果des_opt_opd1_const为1, opd1常数
#define BD_ID_DES_OPD1_ADDR             { 640, 32 }
// 如果des_opt_opd2_const为0, opd2起始地址
// 如果des_opt_opd2_const为1, opd2常数
#define BD_ID_DES_OPD2_ADDR             { 672, 32 }
// res0的h stride, tensor arithmetic以外的指令只是用低19bit
#define BD_ID_DES_RES0_H_STR            { 704, 32 }
// res0的w stride, tensor arithmetic以外的指令只是用低19bit
#define BD_ID_DES_RES0_W_STR            { 736, 32 }
// opd0的h stride, tensor arithmetic以外的指令只是用低19bit
#define BD_ID_DES_OPD0_H_STR            { 768, 32 }
// opd0的w stride, tensor arithmetic以外的指令只是用低19bit
#define BD_ID_DES_OPD0_W_STR            { 800, 32 }
// opd1的h stride, tensor arithmetic以外的指令只是用低19bit
#define BD_ID_DES_OPD1_H_STR            { 832, 32 }
// opd1的w stride, tensor arithmetic以外的指令只是用低19bit
#define BD_ID_DES_OPD1_W_STR            { 864, 32 }
// opd2的h stride, tensor arithmetic以外的指令只是用低19bit
#define BD_ID_DES_OPD2_H_STR            { 896, 32 }
// opd2的w stride, tensor arithmetic以外的指令只是用低19bit
#define BD_ID_DES_OPD2_W_STR            { 928, 32 }
// res1起始地址
#define BD_ID_DES_RES1_ADDR             { 960, 32 }
// 如果des_opt_opd3_const为0, opd3起始地址
// 如果des_opt_opd3_const为1, opd3常数
#define BD_ID_DES_OPD3_ADDR             { 992, 32 }

//bd pack defines
#define BD_PACK_DES_CMD_EN(val)              { BD_ID_DES_CMD_EN, (val) }
#define BD_PACK_DES_CMD_END(val)             { BD_ID_DES_CMD_END, (val) }
#define BD_PACK_DES_CMD_WIDTH(val)           { BD_ID_DES_CMD_WIDTH, (val) }
#define BD_PACK_DES_CMD_SPB(val)             { BD_ID_DES_CMD_SPB, (val) }
#define BD_PACK_DES_CMD_ID_EN(val)           { BD_ID_DES_CMD_ID_EN, (val) }
#define BD_PACK_DES_CMD_ID_TPU(val)          { BD_ID_DES_CMD_ID_TPU, (val) }
#define BD_PACK_DES_CMD_ID_GDMA(val)         { BD_ID_DES_CMD_ID_GDMA, (val) }
#define BD_PACK_DES_CMD_KEEP(val)            { BD_ID_DES_CMD_KEEP, (val) }
#define BD_PACK_DES_CMD_INTR_EN(val)         { BD_ID_DES_CMD_INTR_EN, (val) }
#define BD_PACK_DES_TSK_TYP(val)             { BD_ID_DES_TSK_TYP, (val) }
#define BD_PACK_DES_TSK_EU_TYP(val)          { BD_ID_DES_TSK_EU_TYP, (val) }
#define BD_PACK_DES_EU_HALF_EN(val)          { BD_ID_DES_EU_HALF_EN, (val) }
#define BD_PACK_DES_TSK_OPD_NUM(val)         { BD_ID_DES_TSK_OPD_NUM, (val) }
#define BD_PACK_DES_OPT_RIGHT_SHIFT(val)     { BD_ID_DES_OPT_RIGHT_SHIFT, (val) }
#define BD_PACK_DES_OPT_LEFT_SHIFT(val)      { BD_ID_DES_OPT_LEFT_SHIFT, (val) }
#define BD_PACK_DES_OPT_SHIFT_TYP(val)       { BD_ID_DES_OPT_SHIFT_TYP, (val) }
#define BD_PACK_DES_OPT_RES_ADD(val)         { BD_ID_DES_OPT_RES_ADD, (val) }
#define BD_PACK_DES_OPT_RELU(val)            { BD_ID_DES_OPT_RELU, (val) }
#define BD_PACK_DES_OPT_LEFT_TRAN(val)       { BD_ID_DES_OPT_LEFT_TRAN, (val) }
#define BD_PACK_DES_OPT_WINOGRAD(val)        { BD_ID_DES_OPT_WINOGRAD, (val) }
#define BD_PACK_DES_OPT_KERNEL_ROTATE(val)   { BD_ID_DES_OPT_KERNEL_ROTATE, (val) }
#define BD_PACK_DES_OPT_OPD0_SIGN(val)       { BD_ID_DES_OPT_OPD0_SIGN, (val) }
#define BD_PACK_DES_OPT_OPD1_SIGN(val)       { BD_ID_DES_OPT_OPD1_SIGN, (val) }
#define BD_PACK_DES_OPT_OPD2_SIGN(val)       { BD_ID_DES_OPT_OPD2_SIGN, (val) }
#define BD_PACK_DES_OPT_RES0_PREC(val)       { BD_ID_DES_OPT_RES0_PREC, (val) }
#define BD_PACK_DES_OPT_OPD0_PREC(val)       { BD_ID_DES_OPT_OPD0_PREC, (val) }
#define BD_PACK_DES_OPT_OPD1_PREC(val)       { BD_ID_DES_OPT_OPD1_PREC, (val) }
#define BD_PACK_DES_OPT_OPD2_PREC(val)       { BD_ID_DES_OPT_OPD2_PREC, (val) }
#define BD_PACK_DES_OPT_OPD0_CONST(val)      { BD_ID_DES_OPT_OPD0_CONST, (val) }
#define BD_PACK_DES_OPT_OPD1_CONST(val)      { BD_ID_DES_OPT_OPD1_CONST, (val) }
#define BD_PACK_DES_OPT_OPD2_CONST(val)      { BD_ID_DES_OPT_OPD2_CONST, (val) }
#define BD_PACK_DES_SHORT_RES0_STR(val)      { BD_ID_DES_SHORT_RES0_STR, (val) }
#define BD_PACK_DES_SHORT_OPD0_STR(val)      { BD_ID_DES_SHORT_OPD0_STR, (val) }
#define BD_PACK_DES_SHORT_OPD1_STR(val)      { BD_ID_DES_SHORT_OPD1_STR, (val) }
#define BD_PACK_DES_SHORT_OPD2_STR(val)      { BD_ID_DES_SHORT_OPD2_STR, (val) }
#define BD_PACK_DES_OPD0_X_INS0(val)         { BD_ID_DES_OPD0_X_INS0, (val) }
#define BD_PACK_DES_OPD0_Y_INS0(val)         { BD_ID_DES_OPD0_Y_INS0, (val) }
#define BD_PACK_DES_OPD1_X_INS0(val)         { BD_ID_DES_OPD1_X_INS0, (val) }
#define BD_PACK_DES_OPD1_Y_INS0(val)         { BD_ID_DES_OPD1_Y_INS0, (val) }
#define BD_PACK_DES_OPD0_UP_PAD(val)         { BD_ID_DES_OPD0_UP_PAD, (val) }
#define BD_PACK_DES_OPD0_DN_PAD(val)         { BD_ID_DES_OPD0_DN_PAD, (val) }
#define BD_PACK_DES_OPD0_LF_PAD(val)         { BD_ID_DES_OPD0_LF_PAD, (val) }
#define BD_PACK_DES_OPD0_RT_PAD(val)         { BD_ID_DES_OPD0_RT_PAD, (val) }
#define BD_PACK_DES_RES_OP_X_STR(val)        { BD_ID_DES_RES_OP_X_STR, (val) }
#define BD_PACK_DES_RES_OP_Y_STR(val)        { BD_ID_DES_RES_OP_Y_STR, (val) }
#define BD_PACK_DES_TSK_LANE_NUM_0(val)      { BD_ID_DES_TSK_LANE_NUM_0, (val) }
#define BD_PACK_DES_TSK_LANE_NUM_1(val)      { BD_ID_DES_TSK_LANE_NUM_1, (val) }
#define BD_PACK_DES_RES0_N(val)              { BD_ID_DES_RES0_N, (val) }
#define BD_PACK_DES_RES0_C(val)              { BD_ID_DES_RES0_C, (val) }
#define BD_PACK_DES_RES0_H(val)              { BD_ID_DES_RES0_H, (val) }
#define BD_PACK_DES_RES0_W(val)              { BD_ID_DES_RES0_W, (val) }
#define BD_PACK_DES_OPD0_N(val)              { BD_ID_DES_OPD0_N, (val) }
#define BD_PACK_DES_OPD0_C(val)              { BD_ID_DES_OPD0_C, (val) }
#define BD_PACK_DES_OPD0_H(val)              { BD_ID_DES_OPD0_H, (val) }
#define BD_PACK_DES_OPD0_W(val)              { BD_ID_DES_OPD0_W, (val) }
#define BD_PACK_DES_OPD1_N(val)              { BD_ID_DES_OPD1_N, (val) }
#define BD_PACK_DES_OPD1_C(val)              { BD_ID_DES_OPD1_C, (val) }
#define BD_PACK_DES_OPD1_H(val)              { BD_ID_DES_OPD1_H, (val) }
#define BD_PACK_DES_OPD1_W(val)              { BD_ID_DES_OPD1_W, (val) }
#define BD_PACK_DES_RES0_H_SHIFT(val)        { BD_ID_DES_RES0_H_SHIFT, (val) }
#define BD_PACK_DES_RES0_W_SHIFT(val)        { BD_ID_DES_RES0_W_SHIFT, (val) }
#define BD_PACK_DES_OPD0_H_SHIFT(val)        { BD_ID_DES_OPD0_H_SHIFT, (val) }
#define BD_PACK_DES_OPD0_W_SHIFT(val)        { BD_ID_DES_OPD0_W_SHIFT, (val) }
#define BD_PACK_DES_OPD1_H_SHIFT(val)        { BD_ID_DES_OPD1_H_SHIFT, (val) }
#define BD_PACK_DES_OPD1_W_SHIFT(val)        { BD_ID_DES_OPD1_W_SHIFT, (val) }
#define BD_PACK_DES_RES0_N_STR(val)          { BD_ID_DES_RES0_N_STR, (val) }
#define BD_PACK_DES_RES0_C_STR(val)          { BD_ID_DES_RES0_C_STR, (val) }
#define BD_PACK_DES_OPD0_N_STR(val)          { BD_ID_DES_OPD0_N_STR, (val) }
#define BD_PACK_DES_OPD0_C_STR(val)          { BD_ID_DES_OPD0_C_STR, (val) }
#define BD_PACK_DES_OPD1_N_STR(val)          { BD_ID_DES_OPD1_N_STR, (val) }
#define BD_PACK_DES_OPD1_C_STR(val)          { BD_ID_DES_OPD1_C_STR, (val) }
#define BD_PACK_DES_OPD2_N_STR(val)          { BD_ID_DES_OPD2_N_STR, (val) }
#define BD_PACK_DES_OPD2_C_STR(val)          { BD_ID_DES_OPD2_C_STR, (val) }
#define BD_PACK_DES_OPT_RES_ADD_SIGN(val)    { BD_ID_DES_OPT_RES_ADD_SIGN, (val) }
#define BD_PACK_DES_OPD0_NEQ1(val)           { BD_ID_DES_OPD0_NEQ1, (val) }
#define BD_PACK_DES_OPD1_NEQ1(val)           { BD_ID_DES_OPD1_NEQ1, (val) }
#define BD_PACK_DES_OPT_OPD3_CONST(val)      { BD_ID_DES_OPT_OPD3_CONST, (val) }
#define BD_PACK_DES_RES0_ADDR(val)           { BD_ID_DES_RES0_ADDR, (val) }
#define BD_PACK_DES_OPD0_ADDR(val)           { BD_ID_DES_OPD0_ADDR, (val) }
#define BD_PACK_DES_OPD1_ADDR(val)           { BD_ID_DES_OPD1_ADDR, (val) }
#define BD_PACK_DES_OPD2_ADDR(val)           { BD_ID_DES_OPD2_ADDR, (val) }
#define BD_PACK_DES_RES0_H_STR(val)          { BD_ID_DES_RES0_H_STR, (val) }
#define BD_PACK_DES_RES0_W_STR(val)          { BD_ID_DES_RES0_W_STR, (val) }
#define BD_PACK_DES_OPD0_H_STR(val)          { BD_ID_DES_OPD0_H_STR, (val) }
#define BD_PACK_DES_OPD0_W_STR(val)          { BD_ID_DES_OPD0_W_STR, (val) }
#define BD_PACK_DES_OPD1_H_STR(val)          { BD_ID_DES_OPD1_H_STR, (val) }
#define BD_PACK_DES_OPD1_W_STR(val)          { BD_ID_DES_OPD1_W_STR, (val) }
#define BD_PACK_DES_OPD2_H_STR(val)          { BD_ID_DES_OPD2_H_STR, (val) }
#define BD_PACK_DES_OPD2_W_STR(val)          { BD_ID_DES_OPD2_W_STR, (val) }
#define BD_PACK_DES_RES1_ADDR(val)           { BD_ID_DES_RES1_ADDR, (val) }
#define BD_PACK_DES_OPD3_ADDR(val)           { BD_ID_DES_OPD3_ADDR, (val) }

//bd default values
#define BD_PACK_DES_TSK_OPD_NUM_DEFAULT         BD_PACK_DES_TSK_OPD_NUM(0x2)
#define BD_PACK_DES_OPT_SHIFT_TYP_DEFAULT       BD_PACK_DES_OPT_SHIFT_TYP(0x1)
#define BD_PACK_DES_OPT_RELU_DEFAULT            BD_PACK_DES_OPT_RELU(0x1)
#define BD_PACK_DES_OPT_OPD1_SIGN_DEFAULT       BD_PACK_DES_OPT_OPD1_SIGN(0x1)
#define BD_PACK_DES_OPT_OPD2_SIGN_DEFAULT       BD_PACK_DES_OPT_OPD2_SIGN(0x1)
#define BD_PACK_DES_OPT_RES0_PREC_DEFAULT       BD_PACK_DES_OPT_RES0_PREC(0x2)
#define BD_PACK_DES_OPT_OPD0_PREC_DEFAULT       BD_PACK_DES_OPT_OPD0_PREC(0x2)
#define BD_PACK_DES_OPT_OPD1_PREC_DEFAULT       BD_PACK_DES_OPT_OPD1_PREC(0x2)
#define BD_PACK_DES_OPT_OPD2_PREC_DEFAULT       BD_PACK_DES_OPT_OPD2_PREC(0x2)
#define BD_PACK_DES_SHORT_OPD2_STR_DEFAULT      BD_PACK_DES_SHORT_OPD2_STR(0x2)
#define BD_PACK_DES_RES_OP_X_STR_DEFAULT        BD_PACK_DES_RES_OP_X_STR(0x1)
#define BD_PACK_DES_RES_OP_Y_STR_DEFAULT        BD_PACK_DES_RES_OP_Y_STR(0x1)
#define BD_PACK_DES_TSK_LANE_NUM_0_DEFAULT      BD_PACK_DES_TSK_LANE_NUM_0(0xffffffff)
#define BD_PACK_DES_TSK_LANE_NUM_1_DEFAULT      BD_PACK_DES_TSK_LANE_NUM_1(0xffffffff)
#define BD_PACK_DES_RES0_N_DEFAULT              BD_PACK_DES_RES0_N(0x1)
#define BD_PACK_DES_RES0_C_DEFAULT              BD_PACK_DES_RES0_C(0x1)
#define BD_PACK_DES_RES0_H_DEFAULT              BD_PACK_DES_RES0_H(0x1)
#define BD_PACK_DES_RES0_W_DEFAULT              BD_PACK_DES_RES0_W(0x1)
#define BD_PACK_DES_OPD0_N_DEFAULT              BD_PACK_DES_OPD0_N(0x1)
#define BD_PACK_DES_OPD0_C_DEFAULT              BD_PACK_DES_OPD0_C(0x1)
#define BD_PACK_DES_OPD0_H_DEFAULT              BD_PACK_DES_OPD0_H(0x1)
#define BD_PACK_DES_OPD0_W_DEFAULT              BD_PACK_DES_OPD0_W(0x1)
#define BD_PACK_DES_OPD1_N_DEFAULT              BD_PACK_DES_OPD1_N(0x1)
#define BD_PACK_DES_OPD1_C_DEFAULT              BD_PACK_DES_OPD1_C(0x1)
#define BD_PACK_DES_OPD1_H_DEFAULT              BD_PACK_DES_OPD1_H(0x1)
#define BD_PACK_DES_OPD1_W_DEFAULT              BD_PACK_DES_OPD1_W(0x1)
#define BD_PACK_DES_RES0_N_STR_DEFAULT          BD_PACK_DES_RES0_N_STR(0x1)
#define BD_PACK_DES_RES0_C_STR_DEFAULT          BD_PACK_DES_RES0_C_STR(0x1)
#define BD_PACK_DES_OPD0_N_STR_DEFAULT          BD_PACK_DES_OPD0_N_STR(0x1)
#define BD_PACK_DES_OPD0_C_STR_DEFAULT          BD_PACK_DES_OPD0_C_STR(0x1)
#define BD_PACK_DES_OPD1_N_STR_DEFAULT          BD_PACK_DES_OPD1_N_STR(0x1)
#define BD_PACK_DES_OPD1_C_STR_DEFAULT          BD_PACK_DES_OPD1_C_STR(0x1)
#define BD_PACK_DES_OPD2_N_STR_DEFAULT          BD_PACK_DES_OPD2_N_STR(0x1)
#define BD_PACK_DES_OPD2_C_STR_DEFAULT          BD_PACK_DES_OPD2_C_STR(0x1)
#define BD_PACK_DES_RES0_H_STR_DEFAULT          BD_PACK_DES_RES0_H_STR(0x1)
#define BD_PACK_DES_RES0_W_STR_DEFAULT          BD_PACK_DES_RES0_W_STR(0x1)
#define BD_PACK_DES_OPD0_H_STR_DEFAULT          BD_PACK_DES_OPD0_H_STR(0x1)
#define BD_PACK_DES_OPD0_W_STR_DEFAULT          BD_PACK_DES_OPD0_W_STR(0x1)
#define BD_PACK_DES_OPD1_H_STR_DEFAULT          BD_PACK_DES_OPD1_H_STR(0x1)
#define BD_PACK_DES_OPD1_W_STR_DEFAULT          BD_PACK_DES_OPD1_W_STR(0x1)
#define BD_PACK_DES_OPD2_H_STR_DEFAULT          BD_PACK_DES_OPD2_H_STR(0x1)
#define BD_PACK_DES_OPD2_W_STR_DEFAULT          BD_PACK_DES_OPD2_W_STR(0x1)

//default list
#define BD_PACK_DEFAULTS {\
  BD_PACK_DES_TSK_OPD_NUM_DEFAULT,\
  BD_PACK_DES_OPT_SHIFT_TYP_DEFAULT,\
  BD_PACK_DES_OPT_RELU_DEFAULT,\
  BD_PACK_DES_OPT_OPD1_SIGN_DEFAULT,\
  BD_PACK_DES_OPT_OPD2_SIGN_DEFAULT,\
  BD_PACK_DES_OPT_RES0_PREC_DEFAULT,\
  BD_PACK_DES_OPT_OPD0_PREC_DEFAULT,\
  BD_PACK_DES_OPT_OPD1_PREC_DEFAULT,\
  BD_PACK_DES_OPT_OPD2_PREC_DEFAULT,\
  BD_PACK_DES_SHORT_OPD2_STR_DEFAULT,\
  BD_PACK_DES_RES_OP_X_STR_DEFAULT,\
  BD_PACK_DES_RES_OP_Y_STR_DEFAULT,\
  BD_PACK_DES_TSK_LANE_NUM_0_DEFAULT,\
  BD_PACK_DES_TSK_LANE_NUM_1_DEFAULT,\
  BD_PACK_DES_RES0_N_DEFAULT,\
  BD_PACK_DES_RES0_C_DEFAULT,\
  BD_PACK_DES_RES0_H_DEFAULT,\
  BD_PACK_DES_RES0_W_DEFAULT,\
  BD_PACK_DES_OPD0_N_DEFAULT,\
  BD_PACK_DES_OPD0_C_DEFAULT,\
  BD_PACK_DES_OPD0_H_DEFAULT,\
  BD_PACK_DES_OPD0_W_DEFAULT,\
  BD_PACK_DES_OPD1_N_DEFAULT,\
  BD_PACK_DES_OPD1_C_DEFAULT,\
  BD_PACK_DES_OPD1_H_DEFAULT,\
  BD_PACK_DES_OPD1_W_DEFAULT,\
  BD_PACK_DES_RES0_N_STR_DEFAULT,\
  BD_PACK_DES_RES0_C_STR_DEFAULT,\
  BD_PACK_DES_OPD0_N_STR_DEFAULT,\
  BD_PACK_DES_OPD0_C_STR_DEFAULT,\
  BD_PACK_DES_OPD1_N_STR_DEFAULT,\
  BD_PACK_DES_OPD1_C_STR_DEFAULT,\
  BD_PACK_DES_OPD2_N_STR_DEFAULT,\
  BD_PACK_DES_OPD2_C_STR_DEFAULT,\
  BD_PACK_DES_RES0_H_STR_DEFAULT,\
  BD_PACK_DES_RES0_W_STR_DEFAULT,\
  BD_PACK_DES_OPD0_H_STR_DEFAULT,\
  BD_PACK_DES_OPD0_W_STR_DEFAULT,\
  BD_PACK_DES_OPD1_H_STR_DEFAULT,\
  BD_PACK_DES_OPD1_W_STR_DEFAULT,\
  BD_PACK_DES_OPD2_H_STR_DEFAULT,\
  BD_PACK_DES_OPD2_W_STR_DEFAULT\
}

#endif //__BD_REG_DEF_H__