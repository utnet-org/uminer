---
swagger: "2.0"
info:
  description: "These APIs provide services for manipulating Harbor project."
  version: "2.0"
  title: "Harbor API"
host: "localhost"
basePath: "/api/v2.0"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- basic: []
- {}
paths:
  /health:
    get:
      tags:
      - "health"
      summary: "Check the status of Harbor components"
      description: "Check the status of Harbor components"
      operationId: "getHealth"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "The health status of Harbor components"
          schema:
            $ref: "#/definitions/OverallHealthStatus"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /search:
    get:
      tags:
      - "search"
      summary: "Search for projects, repositories and helm charts"
      description: "The Search endpoint returns information about the projects, repositories\
        \ and helm charts offered at public status or related to the current logged\
        \ in user. The response includes the project, repository list and charts in\
        \ a proper display order."
      operationId: "search"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Search parameter for project and repository name."
        required: true
        type: "string"
        x-exportParamName: "Q"
      responses:
        "200":
          description: "An array of search results"
          schema:
            $ref: "#/definitions/Search"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /statistics:
    get:
      tags:
      - "statistic"
      summary: "Get the statistic information about the projects and repositories"
      description: "Get the statistic information about the projects and repositories"
      operationId: "getStatistic"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "The statistic information"
          schema:
            $ref: "#/definitions/Statistic"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /ldap/ping:
    post:
      tags:
      - "Ldap"
      summary: "Ping available ldap service."
      description: "This endpoint ping the available ldap service for test related\
        \ configuration parameters.\n"
      operationId: "pingLdap"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "ldapconf"
        description: "ldap configuration. support input ldap service configuration.\
          \ If it is a empty request, will load current configuration from the system."
        required: false
        schema:
          $ref: "#/definitions/LdapConf"
        x-exportParamName: "Ldapconf"
      responses:
        "200":
          description: "Ping ldap service successfully."
          schema:
            $ref: "#/definitions/LdapPingResult"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /ldap/users/search:
    get:
      tags:
      - "Ldap"
      summary: "Search available ldap users."
      description: "This endpoint searches the available ldap users based on related\
        \ configuration parameters. Support searched by input ladp configuration,\
        \ load configuration from the system and specific filter.\n"
      operationId: "searchLdapUser"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "username"
        in: "query"
        description: "Registered user ID"
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Search ldap users successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LdapUser"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /ldap/users/import:
    post:
      tags:
      - "Ldap"
      summary: "Import selected available ldap users."
      description: "This endpoint adds the selected available ldap users to harbor\
        \ based on related configuration parameters from the system. System will try\
        \ to guess the user email address and realname, add to harbor user information.\
        \ If have errors when import user, will return the list of importing failed\
        \ uid and the failed reason.\n"
      operationId: "importLdapUser"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "uid_list"
        description: "The uid listed for importing. This list will check users validity\
          \ of ldap service based on configuration from the system."
        required: true
        schema:
          $ref: "#/definitions/LdapImportUsers"
        x-exportParamName: "UidList"
      responses:
        "200":
          description: "Add ldap users successfully."
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Failed import some users."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LdapFailedImportUser"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /ldap/groups/search:
    get:
      tags:
      - "Ldap"
      summary: "Search available ldap groups."
      description: "This endpoint searches the available ldap groups based on related\
        \ configuration parameters. support to search by groupname or groupdn.\n"
      operationId: "searchLdapGroup"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "groupname"
        in: "query"
        description: "Ldap group name"
        required: false
        type: "string"
        x-exportParamName: "Groupname"
        x-optionalDataType: "String"
      - name: "groupdn"
        in: "query"
        description: "The LDAP group DN"
        required: false
        type: "string"
        x-exportParamName: "Groupdn"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Search ldap group successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserGroup"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /internalconfig:
    get:
      tags:
      - "configure"
      summary: "Get internal configurations."
      description: "This endpoint is for retrieving system configurations that only\
        \ provides for internal api call.\n"
      operationId: "getInternalconfig"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get system configurations successfully. The response body\
            \ is a map."
          schema:
            $ref: "#/definitions/InternalConfigurationsResponse"
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
  /configurations:
    get:
      tags:
      - "configure"
      summary: "Get system configurations."
      description: "This endpoint is for retrieving system configurations that only\
        \ provides for admin user.\n"
      operationId: "getConfigurations"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get system configurations successfully. The response body\
            \ is a map."
          schema:
            $ref: "#/definitions/ConfigurationsResponse"
        "401":
          description: "User need to log in first.ß"
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "configure"
      summary: "Modify system configurations."
      description: "This endpoint is for modifying system configurations that only\
        \ provides for admin user.\n"
      operationId: "updateConfigurations"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "configurations"
        description: "The configuration map can contain a subset of the attributes\
          \ of the schema, which are to be updated."
        required: true
        schema:
          $ref: "#/definitions/Configurations"
        x-exportParamName: "Configurations"
      responses:
        "200":
          description: "Modify system configurations successfully."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
  /projects:
    get:
      tags:
      - "project"
      summary: "List projects"
      description: "This endpoint returns projects created by Harbor."
      operationId: "listProjects"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        description: "The name of project."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "public"
        in: "query"
        description: "The project is public or private."
        required: false
        type: "boolean"
        format: "int32"
        x-exportParamName: "Public"
        x-optionalDataType: "Bool"
      - name: "owner"
        in: "query"
        description: "The name of project owner."
        required: false
        type: "string"
        x-exportParamName: "Owner"
        x-optionalDataType: "String"
      - name: "with_detail"
        in: "query"
        description: "Bool value indicating whether return detailed information of\
          \ the project"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "WithDetail"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Return all matched projects."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of projects"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    head:
      tags:
      - "project"
      summary: "Check if the project name user provided already exists."
      description: "This endpoint is used to check if the project name provided already\
        \ exist."
      operationId: "headProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "query"
        description: "Project name for checking exists."
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "project"
      summary: "Create a new project."
      description: "This endpoint is for user to create a new project."
      operationId: "createProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Resource-Name-In-Location"
        in: "header"
        description: "The flag to indicate whether to return the name of the resource\
          \ in Location. When X-Resource-Name-In-Location is true, the Location will\
          \ return the name of the resource."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XResourceNameInLocation"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "project"
        description: "New created project."
        required: true
        schema:
          $ref: "#/definitions/ProjectReq"
        x-exportParamName: "Project"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}:
    get:
      tags:
      - "project"
      summary: "Return specific project detail information"
      description: "This endpoint returns specific project information by project\
        \ ID."
      operationId: "getProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      responses:
        "200":
          description: "Return matched project information."
          schema:
            $ref: "#/definitions/Project"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "project"
      summary: "Update properties for a selected project."
      description: "This endpoint is aimed to update the properties of a project."
      operationId: "updateProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - in: "body"
        name: "project"
        description: "Updates of project."
        required: true
        schema:
          $ref: "#/definitions/ProjectReq"
        x-exportParamName: "Project"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "project"
      summary: "Delete project by projectID"
      description: "This endpoint is aimed to delete project by project ID."
      operationId: "deleteProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "412":
          description: "Precondition failed"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/_deletable:
    get:
      tags:
      - "project"
      summary: "Get the deletable status of the project"
      description: "Get the deletable status of the project"
      operationId: "getProjectDeletable"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      responses:
        "200":
          description: "Return deletable status of the project."
          schema:
            $ref: "#/definitions/ProjectDeletable"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/summary:
    get:
      tags:
      - "project"
      summary: "Get summary of the project."
      description: "Get summary of the project."
      operationId: "getProjectSummary"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      responses:
        "200":
          description: "Get summary of the project successfully."
          schema:
            $ref: "#/definitions/ProjectSummary"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/members:
    get:
      tags:
      - "member"
      summary: "Get all project member information"
      description: "Get all project member information"
      operationId: "listProjectMembers"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "entityname"
        in: "query"
        description: "The entity name to search."
        required: false
        type: "string"
        x-exportParamName: "Entityname"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get project members successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of members"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProjectMemberEntity"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "member"
      summary: "Create project member"
      description: "Create project member relationship, the member can be one of the\
        \ user_member and group_member,  The user_member need to specify user_id or\
        \ username. If the user already exist in harbor DB, specify the user_id, \
        \ If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member\
        \ need to specify id or ldap_group_dn. If the group already exist in harbor\
        \ DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard\
        \ the group. "
      operationId: "createProjectMember"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - in: "body"
        name: "project_member"
        required: false
        schema:
          $ref: "#/definitions/ProjectMember"
        x-exportParamName: "ProjectMember"
      responses:
        "201":
          description: "Project member created successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/members/{mid}:
    get:
      tags:
      - "member"
      summary: "Get the project member information"
      description: "Get the project member information"
      operationId: "getProjectMember"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "mid"
        in: "path"
        description: "The member ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Mid"
      responses:
        "200":
          description: "Project member retrieved successfully."
          schema:
            $ref: "#/definitions/ProjectMemberEntity"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "member"
      summary: "Update project member"
      description: "Update project member relationship"
      operationId: "updateProjectMember"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "mid"
        in: "path"
        description: "Member ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Mid"
      - in: "body"
        name: "role"
        required: false
        schema:
          $ref: "#/definitions/RoleRequest"
        x-exportParamName: "Role"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "member"
      summary: "Delete project member"
      operationId: "deleteProjectMember"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "mid"
        in: "path"
        description: "Member ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Mid"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/metadatas/:
    get:
      tags:
      - "projectMetadata"
      summary: "Get the metadata of the specific project"
      description: "Get the metadata of the specific project"
      operationId: "listProjectMetadatas"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "projectMetadata"
      summary: "Add metadata for the specific project"
      description: "Add metadata for the specific project"
      operationId: "addProjectMetadatas"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - in: "body"
        name: "metadata"
        required: false
        schema:
          type: "object"
          additionalProperties:
            type: "string"
        x-exportParamName: "Metadata"
        x-optionalDataType: "Interface{}"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/metadatas/{meta_name}:
    get:
      tags:
      - "projectMetadata"
      summary: "Get the specific metadata of the specific project"
      description: "Get the specific metadata of the specific project"
      operationId: "getProjectMetadata"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadata."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "projectMetadata"
      summary: "Update the specific metadata for the specific project"
      description: "Update the specific metadata for the specific project"
      operationId: "updateProjectMetadata"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadata."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      - in: "body"
        name: "metadata"
        required: false
        schema:
          type: "object"
          additionalProperties:
            type: "string"
        x-exportParamName: "Metadata"
        x-optionalDataType: "Interface{}"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "projectMetadata"
      summary: "Delete the specific metadata for the specific project"
      description: "Delete the specific metadata for the specific project"
      operationId: "deleteProjectMetadata"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadata."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /repositories:
    get:
      tags:
      - "repository"
      summary: "List all authorized repositories"
      description: "List all authorized repositories"
      operationId: "listAllRepositories"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of repositories"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories:
    get:
      tags:
      - "repository"
      summary: "List repositories"
      description: "List repositories of the specified project"
      operationId: "listRepositories"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of repositories"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}:
    get:
      tags:
      - "repository"
      summary: "Get repository"
      description: "Get the repository specified by name"
      operationId: "getRepository"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Repository"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "repository"
      summary: "Update repository"
      description: "Update the repository specified by name"
      operationId: "updateRepository"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - in: "body"
        name: "repository"
        description: "The JSON object of repository."
        required: true
        schema:
          $ref: "#/definitions/Repository"
        x-exportParamName: "Repository"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "repository"
      summary: "Delete repository"
      description: "Delete the repository specified by name"
      operationId: "deleteRepository"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}/artifacts:
    get:
      tags:
      - "artifact"
      summary: "List artifacts"
      description: "List artifacts under the specific project and repository. Except\
        \ the basic properties, the other supported queries in \"q\" includes \"tags=*\"\
        \ to list only tagged artifacts, \"tags=nil\" to list only untagged artifacts,\
        \ \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\", \"tags=v\"\
        \ to list artifact whose tag exactly matches \"v\", \"labels=(id1, id2)\"\
        \ to list artifacts that both labels with id1 and id2 are added to"
      operationId: "listArtifacts"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "X-Accept-Vulnerabilities"
        in: "header"
        description: "A comma-separated lists of MIME types for the scan report or\
          \ scan summary. The first mime type will be used when the report found for\
          \ it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json;\
          \ version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'"
        required: false
        type: "string"
        default: "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
        x-exportParamName: "XAcceptVulnerabilities"
        x-optionalDataType: "String"
      - name: "with_tag"
        in: "query"
        description: "Specify whether the tags are included inside the returning artifacts"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "WithTag"
        x-optionalDataType: "Bool"
      - name: "with_label"
        in: "query"
        description: "Specify whether the labels are included inside the returning\
          \ artifacts"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WithLabel"
        x-optionalDataType: "Bool"
      - name: "with_scan_overview"
        in: "query"
        description: "Specify whether the scan overview is included inside the returning\
          \ artifacts"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WithScanOverview"
        x-optionalDataType: "Bool"
      - name: "with_signature"
        in: "query"
        description: "Specify whether the signature is included inside the tags of\
          \ the returning artifacts. Only works when setting \"with_tag=true\""
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WithSignature"
        x-optionalDataType: "Bool"
      - name: "with_immutable_status"
        in: "query"
        description: "Specify whether the immutable status is included inside the\
          \ tags of the returning artifacts. Only works when setting \"with_tag=true\""
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WithImmutableStatus"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of artifacts"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Artifact"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "artifact"
      summary: "Copy artifact"
      description: "Copy the artifact specified in the \"from\" parameter to the repository."
      operationId: "CopyArtifact"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "from"
        in: "query"
        description: "The artifact from which the new artifact is copied from, the\
          \ format should be \"project/repository:tag\" or \"project/repository@digest\"\
          ."
        required: true
        type: "string"
        x-exportParamName: "From"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "405":
          description: "Method not allowed"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}:
    get:
      tags:
      - "artifact"
      summary: "Get the specific artifact"
      description: "Get the artifact specified by the reference under the project\
        \ and repository. The reference can be digest or tag."
      operationId: "getArtifact"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "X-Accept-Vulnerabilities"
        in: "header"
        description: "A comma-separated lists of MIME types for the scan report or\
          \ scan summary. The first mime type will be used when the report found for\
          \ it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json;\
          \ version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'"
        required: false
        type: "string"
        default: "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
        x-exportParamName: "XAcceptVulnerabilities"
        x-optionalDataType: "String"
      - name: "with_tag"
        in: "query"
        description: "Specify whether the tags are inclued inside the returning artifacts"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "WithTag"
        x-optionalDataType: "Bool"
      - name: "with_label"
        in: "query"
        description: "Specify whether the labels are inclued inside the returning\
          \ artifacts"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WithLabel"
        x-optionalDataType: "Bool"
      - name: "with_scan_overview"
        in: "query"
        description: "Specify whether the scan overview is inclued inside the returning\
          \ artifacts"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WithScanOverview"
        x-optionalDataType: "Bool"
      - name: "with_signature"
        in: "query"
        description: "Specify whether the signature is inclued inside the returning\
          \ artifacts"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WithSignature"
        x-optionalDataType: "Bool"
      - name: "with_immutable_status"
        in: "query"
        description: "Specify whether the immutable status is inclued inside the tags\
          \ of the returning artifacts. Only works when setting \"with_tag=true\""
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WithImmutableStatus"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Artifact"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "artifact"
      summary: "Delete the specific artifact"
      description: "Delete the artifact specified by the reference under the project\
        \ and repository. The reference can be digest or tag"
      operationId: "deleteArtifact"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan:
    post:
      tags:
      - "scan"
      summary: "Scan the artifact"
      description: "Scan the specified artifact"
      operationId: "scanArtifact"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      responses:
        "202":
          description: "Accepted"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log:
    get:
      tags:
      - "scan"
      summary: "Get the log of the scan report"
      description: "Get the log of the scan report"
      operationId: "getReportLog"
      produces:
      - "text/plain"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      - name: "report_id"
        in: "path"
        description: "The report id to get the log"
        required: true
        type: "string"
        x-exportParamName: "ReportId"
      responses:
        "200":
          description: "Successfully get scan log file"
          schema:
            type: "string"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags:
    get:
      tags:
      - "artifact"
      summary: "List tags"
      description: "List tags of the specific artifact"
      operationId: "listTags"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "with_signature"
        in: "query"
        description: "Specify whether the signature is included inside the returning\
          \ tags"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WithSignature"
        x-optionalDataType: "Bool"
      - name: "with_immutable_status"
        in: "query"
        description: "Specify whether the immutable status is included inside the\
          \ returning tags"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WithImmutableStatus"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of tags"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tag"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "artifact"
      summary: "Create tag"
      description: "Create a tag for the specified artifact"
      operationId: "createTag"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      - in: "body"
        name: "tag"
        description: "The JSON object of tag."
        required: true
        schema:
          $ref: "#/definitions/Tag"
        x-exportParamName: "Tag"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "405":
          description: "Method not allowed"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}:
    delete:
      tags:
      - "artifact"
      summary: "Delete tag"
      description: "Delete the tag of the specified artifact"
      operationId: "deleteTag"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      - name: "tag_name"
        in: "path"
        description: "The name of the tag"
        required: true
        type: "string"
        x-exportParamName: "TagName"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities:
    get:
      tags:
      - "artifact"
      summary: "Get the vulnerabilities addition of the specific artifact"
      description: "Get the vulnerabilities addition of the artifact specified by\
        \ the reference under the project and repository."
      operationId: "getVulnerabilitiesAddition"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      - name: "X-Accept-Vulnerabilities"
        in: "header"
        description: "A comma-separated lists of MIME types for the scan report or\
          \ scan summary. The first mime type will be used when the report found for\
          \ it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json;\
          \ version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'"
        required: false
        type: "string"
        default: "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
        x-exportParamName: "XAcceptVulnerabilities"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          headers:
            Content-Type:
              type: "string"
              description: "The content type of the vulnerabilities addition"
          schema:
            type: "string"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}:
    get:
      tags:
      - "artifact"
      summary: "Get the addition of the specific artifact"
      description: "Get the addition of the artifact specified by the reference under\
        \ the project and repository."
      operationId: "getAddition"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      - name: "addition"
        in: "path"
        description: "The type of addition."
        required: true
        type: "string"
        enum:
        - "build_history"
        - "values.yaml"
        - "readme.md"
        - "dependencies"
        x-exportParamName: "Addition"
      responses:
        "200":
          description: "Success"
          headers:
            Content-Type:
              type: "string"
              description: "The content type of the addition"
          schema:
            type: "string"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels:
    post:
      tags:
      - "artifact"
      summary: "Add label to artifact"
      description: "Add label to the specified artiact."
      operationId: "addLabel"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      - in: "body"
        name: "label"
        description: "The label that added to the artifact. Only the ID property is\
          \ needed."
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}:
    delete:
      tags:
      - "artifact"
      summary: "Remove label from artifact"
      description: "Remove the label from the specified artiact."
      operationId: "removeLabel"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "repository_name"
        in: "path"
        description: "The name of the repository. If it contains slash, encode it\
          \ with URL encoding. e.g. a/b -> a%252Fb"
        required: true
        type: "string"
        x-exportParamName: "RepositoryName"
      - name: "reference"
        in: "path"
        description: "The reference of the artifact, can be digest or tag"
        required: true
        type: "string"
        x-exportParamName: "Reference"
      - name: "label_id"
        in: "path"
        description: "The ID of the label that removed from the artifact."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "LabelId"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/scanner:
    get:
      tags:
      - "project"
      summary: "Get project level scanner"
      description: "Get the scanner registration of the specified project. If no scanner\
        \ registration is configured for the specified project, the system default\
        \ scanner registration will be returned."
      operationId: "getScannerOfProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      responses:
        "200":
          description: "The details of the scanner registration."
          schema:
            $ref: "#/definitions/ScannerRegistration"
        "400":
          description: "Bad project ID"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed"
        "404":
          description: "The requested object is not found"
        "500":
          description: "Internal server error happened"
    put:
      tags:
      - "project"
      summary: "Configure scanner for the specified project"
      description: "Set one of the system configured scanner registration as the indepndent\
        \ scanner of the specified project."
      operationId: "setScannerOfProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/ProjectScanner"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/scanner/candidates:
    get:
      tags:
      - "project"
      summary: "Get scanner registration candidates for configurating project level\
        \ scanner"
      description: "Retrieve the system configured scanner registrations as candidates\
        \ of setting project level scanner."
      operationId: "listScannerCandidatesOfProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "A list of scanner registrations."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScannerRegistration"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /audit-logs:
    get:
      tags:
      - "auditlog"
      summary: "Get recent logs of the projects which the user is a member of"
      description: "This endpoint let user see the recent operation logs of the projects\
        \ which he is member of\n"
      operationId: "listAuditLogs"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of auditlogs"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AuditLog"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/logs:
    get:
      tags:
      - "project"
      summary: "Get recent logs of the projects"
      description: "Get recent logs of the projects"
      operationId: "getLogs"
      parameters:
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of auditlogs"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AuditLog"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /p2p/preheat/providers:
    get:
      tags:
      - "preheat"
      summary: "List P2P providers"
      description: "List P2P providers"
      operationId: "ListProviders"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Metadata"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /p2p/preheat/instances/ping:
    post:
      tags:
      - "preheat"
      summary: "Ping status of a instance."
      description: "This endpoint checks status of a instance, the instance can be\
        \ given by ID or Endpoint URL (together with credential)\n"
      operationId: "PingInstances"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "instance"
        description: "The JSON object of instance."
        required: true
        schema:
          $ref: "#/definitions/Instance"
        x-exportParamName: "Instance"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Instance not found (when instance is provided by ID)."
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /p2p/preheat/instances:
    get:
      tags:
      - "preheat"
      summary: "List P2P provider instances"
      description: "List P2P provider instances"
      operationId: "ListInstances"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of preheating provider instances"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instance"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "preheat"
      summary: "Create p2p provider instances"
      description: "Create p2p provider instances"
      operationId: "CreateInstance"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "instance"
        description: "The JSON object of instance."
        required: true
        schema:
          $ref: "#/definitions/Instance"
        x-exportParamName: "Instance"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /p2p/preheat/instances/{preheat_instance_name}:
    get:
      tags:
      - "preheat"
      summary: "Get a P2P provider instance"
      description: "Get a P2P provider instance"
      operationId: "GetInstance"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "preheat_instance_name"
        in: "path"
        description: "Instance Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatInstanceName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Instance"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "preheat"
      summary: "Update the specified P2P provider instance"
      description: "Update the specified P2P provider instance"
      operationId: "UpdateInstance"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "preheat_instance_name"
        in: "path"
        description: "Instance Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatInstanceName"
      - in: "body"
        name: "instance"
        description: "The instance to update"
        required: true
        schema:
          $ref: "#/definitions/Instance"
        x-exportParamName: "Instance"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "preheat"
      summary: "Delete the specified P2P provider instance"
      description: "Delete the specified P2P provider instance"
      operationId: "DeleteInstance"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "preheat_instance_name"
        in: "path"
        description: "Instance Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatInstanceName"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/preheat/policies:
    get:
      tags:
      - "preheat"
      summary: "List preheat policies"
      description: "List preheat policies"
      operationId: "ListPolicies"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "List preheat policies success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of policies"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PreheatPolicy"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "preheat"
      summary: "Create a preheat policy under a project"
      description: "Create a preheat policy under a project"
      operationId: "CreatePolicy"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - in: "body"
        name: "policy"
        description: "The policy schema info"
        required: true
        schema:
          $ref: "#/definitions/PreheatPolicy"
        x-exportParamName: "Policy"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/preheat/policies/{preheat_policy_name}:
    get:
      tags:
      - "preheat"
      summary: "Get a preheat policy"
      description: "Get a preheat policy"
      operationId: "GetPolicy"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "preheat_policy_name"
        in: "path"
        description: "Preheat Policy Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatPolicyName"
      responses:
        "200":
          description: "Get a preheat policy success"
          schema:
            $ref: "#/definitions/PreheatPolicy"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "preheat"
      summary: "Manual preheat"
      description: "Manual preheat"
      operationId: "ManualPreheat"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "preheat_policy_name"
        in: "path"
        description: "Preheat Policy Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatPolicyName"
      - in: "body"
        name: "policy"
        description: "The policy schema info"
        required: true
        schema:
          $ref: "#/definitions/PreheatPolicy"
        x-exportParamName: "Policy"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "preheat"
      summary: "Update preheat policy"
      description: "Update preheat policy"
      operationId: "UpdatePolicy"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "preheat_policy_name"
        in: "path"
        description: "Preheat Policy Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatPolicyName"
      - in: "body"
        name: "policy"
        description: "The policy schema info"
        required: true
        schema:
          $ref: "#/definitions/PreheatPolicy"
        x-exportParamName: "Policy"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "preheat"
      summary: "Delete a preheat policy"
      description: "Delete a preheat policy"
      operationId: "DeletePolicy"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "preheat_policy_name"
        in: "path"
        description: "Preheat Policy Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatPolicyName"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/preheat/policies/{preheat_policy_name}/executions:
    get:
      tags:
      - "preheat"
      summary: "List executions for the given policy"
      description: "List executions for the given policy"
      operationId: "ListExecutions"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "preheat_policy_name"
        in: "path"
        description: "Preheat Policy Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatPolicyName"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "List executions success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of executions"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Execution"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}:
    get:
      tags:
      - "preheat"
      summary: "Get a execution detail by id"
      description: "Get a execution detail by id"
      operationId: "GetExecution"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "preheat_policy_name"
        in: "path"
        description: "Preheat Policy Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatPolicyName"
      - name: "execution_id"
        in: "path"
        description: "Execution ID"
        required: true
        type: "integer"
        x-exportParamName: "ExecutionId"
      responses:
        "200":
          description: "Get execution success"
          schema:
            $ref: "#/definitions/Execution"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    patch:
      tags:
      - "preheat"
      summary: "Stop a execution"
      description: "Stop a execution"
      operationId: "StopExecution"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "preheat_policy_name"
        in: "path"
        description: "Preheat Policy Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatPolicyName"
      - name: "execution_id"
        in: "path"
        description: "Execution ID"
        required: true
        type: "integer"
        x-exportParamName: "ExecutionId"
      - in: "body"
        name: "execution"
        description: "The data of execution"
        required: true
        schema:
          $ref: "#/definitions/Execution"
        x-exportParamName: "Execution"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks:
    get:
      tags:
      - "preheat"
      summary: "List all the related tasks for the given execution"
      description: "List all the related tasks for the given execution"
      operationId: "ListTasks"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "preheat_policy_name"
        in: "path"
        description: "Preheat Policy Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatPolicyName"
      - name: "execution_id"
        in: "path"
        description: "Execution ID"
        required: true
        type: "integer"
        x-exportParamName: "ExecutionId"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "List tasks success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of tasks"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs:
    get:
      tags:
      - "preheat"
      summary: "Get the log text stream of the specified task for the given execution"
      description: "Get the log text stream of the specified task for the given execution"
      operationId: "GetPreheatLog"
      produces:
      - "text/plain"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      - name: "preheat_policy_name"
        in: "path"
        description: "Preheat Policy Name"
        required: true
        type: "string"
        x-exportParamName: "PreheatPolicyName"
      - name: "execution_id"
        in: "path"
        description: "Execution ID"
        required: true
        type: "integer"
        x-exportParamName: "ExecutionId"
      - name: "task_id"
        in: "path"
        description: "Task ID"
        required: true
        type: "integer"
        x-exportParamName: "TaskId"
      responses:
        "200":
          description: "Get log success"
          headers:
            Content-Type:
              type: "string"
              description: "Content type of response"
          schema:
            type: "string"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name}/preheat/providers:
    get:
      tags:
      - "preheat"
      summary: "Get all providers at project level"
      description: "Get all providers at project level"
      operationId: "ListProvidersUnderProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "project_name"
        in: "path"
        description: "The name of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProviderUnderProject"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/robots:
    get:
      tags:
      - "robotv1"
      summary: "Get all robot accounts of specified project"
      description: "Get all robot accounts of specified project"
      operationId: "ListRobotV1"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of robot accounts"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Robot"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "robotv1"
      summary: "Create a robot account"
      description: "Create a robot account"
      operationId: "CreateRobotV1"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - in: "body"
        name: "robot"
        description: "The JSON object of a robot account."
        required: true
        schema:
          $ref: "#/definitions/RobotCreateV1"
        x-exportParamName: "Robot"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
          schema:
            $ref: "#/definitions/RobotCreated"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/robots/{robot_id}:
    get:
      tags:
      - "robotv1"
      summary: "Get a robot account"
      description: "This endpoint returns specific robot account information by robot\
        \ ID."
      operationId: "GetRobotByIDV1"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "robot_id"
        in: "path"
        description: "Robot ID"
        required: true
        type: "integer"
        x-exportParamName: "RobotId"
      responses:
        "200":
          description: "Return matched robot information."
          schema:
            $ref: "#/definitions/Robot"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "robotv1"
      summary: "Update status of robot account."
      description: "Used to disable/enable a specified robot account."
      operationId: "UpdateRobotV1"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "robot_id"
        in: "path"
        description: "Robot ID"
        required: true
        type: "integer"
        x-exportParamName: "RobotId"
      - in: "body"
        name: "robot"
        description: "The JSON object of a robot account."
        required: true
        schema:
          $ref: "#/definitions/Robot"
        x-exportParamName: "Robot"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "robotv1"
      summary: "Delete a robot account"
      description: "This endpoint deletes specific robot account information by robot\
        \ ID."
      operationId: "DeleteRobotV1"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "robot_id"
        in: "path"
        description: "Robot ID"
        required: true
        type: "integer"
        x-exportParamName: "RobotId"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/immutabletagrules:
    get:
      tags:
      - "immutable"
      summary: "List all immutable tag rules of current project"
      description: "This endpoint returns the immutable tag rules of a project\n"
      operationId: "ListImmuRules"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of immutable tag"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImmutableRule"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "immutable"
      summary: "Add an immutable tag rule to current project"
      description: "This endpoint add an immutable tag rule to the project\n"
      operationId: "CreateImmuRule"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - in: "body"
        name: "ImmutableRule"
        required: true
        schema:
          $ref: "#/definitions/ImmutableRule"
        x-exportParamName: "ImmutableRule"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}:
    put:
      tags:
      - "immutable"
      summary: "Update the immutable tag rule or enable or disable the rule"
      operationId: "UpdateImmuRule"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "immutable_rule_id"
        in: "path"
        description: "The ID of the immutable rule"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ImmutableRuleId"
      - in: "body"
        name: "ImmutableRule"
        required: true
        schema:
          $ref: "#/definitions/ImmutableRule"
        x-exportParamName: "ImmutableRule"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "immutable"
      summary: "Delete the immutable tag rule."
      operationId: "DeleteImmuRule"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "immutable_rule_id"
        in: "path"
        description: "The ID of the immutable rule"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ImmutableRuleId"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/webhook/policies:
    get:
      tags:
      - "webhook"
      summary: "List project webhook policies."
      description: "This endpoint returns webhook policies of a project.\n"
      operationId: "ListWebhookPoliciesOfProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of webhook policies."
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WebhookPolicy"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "webhook"
      summary: "Create project webhook policy."
      description: "This endpoint create a webhook policy if the project does not\
        \ have one.\n"
      operationId: "CreateWebhookPolicyOfProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - in: "body"
        name: "policy"
        description: "Properties \"targets\" and \"event_types\" needed."
        required: true
        schema:
          $ref: "#/definitions/WebhookPolicy"
        x-exportParamName: "Policy"
      responses:
        "201":
          description: "Project webhook policy create successfully."
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}:
    get:
      tags:
      - "webhook"
      summary: "Get project webhook policy"
      description: "This endpoint returns specified webhook policy of a project.\n"
      operationId: "GetWebhookPolicyOfProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "webhook_policy_id"
        in: "path"
        description: "The ID of the webhook policy"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "WebhookPolicyId"
      responses:
        "200":
          description: "Get webhook policy successfully."
          schema:
            $ref: "#/definitions/WebhookPolicy"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "webhook"
      summary: "Update webhook policy of a project."
      description: "This endpoint is aimed to update the webhook policy of a project.\n"
      operationId: "UpdateWebhookPolicyOfProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "webhook_policy_id"
        in: "path"
        description: "The ID of the webhook policy"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "WebhookPolicyId"
      - in: "body"
        name: "policy"
        description: "All properties needed except \"id\", \"project_id\", \"creation_time\"\
          , \"update_time\"."
        required: true
        schema:
          $ref: "#/definitions/WebhookPolicy"
        x-exportParamName: "Policy"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "webhook"
      summary: "Delete webhook policy of a project"
      description: "This endpoint is aimed to delete webhookpolicy of a project.\n"
      operationId: "DeleteWebhookPolicyOfProject"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "webhook_policy_id"
        in: "path"
        description: "The ID of the webhook policy"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "WebhookPolicyId"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/webhook/lasttrigger:
    get:
      tags:
      - "webhook"
      summary: "Get project webhook policy last trigger info"
      description: "This endpoint returns last trigger information of project webhook\
        \ policy.\n"
      operationId: "LastTrigger"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      responses:
        "200":
          description: "Test webhook connection successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WebhookLastTrigger"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/webhook/jobs:
    get:
      tags:
      - "webhookjob"
      summary: "List project webhook jobs"
      description: "This endpoint returns webhook jobs of a project.\n"
      operationId: "ListWebhookJobs"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "policy_id"
        in: "query"
        description: "The policy ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "PolicyId"
      - name: "status"
        in: "query"
        description: "The status of webhook job."
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Status"
      responses:
        "200":
          description: "List project webhook jobs successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WebhookJob"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /projects/{project_name_or_id}/webhook/events:
    get:
      tags:
      - "webhook"
      summary: "Get supported event types and notify types."
      description: "Get supportted event types and notify types."
      operationId: "GetSupportedEventTypes"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "X-Is-Resource-Name"
        in: "header"
        description: "The flag to indicate whether the parameter which supports both\
          \ name and id in the path is the name of the resource. When the X-Is-Resource-Name\
          \ is false and the parameter can be converted to an integer, the parameter\
          \ will be as an id, otherwise, it will be as a name."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "XIsResourceName"
        x-optionalDataType: "Bool"
      - name: "project_name_or_id"
        in: "path"
        description: "The name or id of the project"
        required: true
        type: "string"
        x-exportParamName: "ProjectNameOrId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SupportedWebhookEventTypes"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /usergroups:
    get:
      tags:
      - "usergroup"
      summary: "Get all user groups information"
      description: "Get all user groups information"
      operationId: "listUserGroups"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "ldap_group_dn"
        in: "query"
        description: "search with ldap group DN"
        required: false
        type: "string"
        x-exportParamName: "LdapGroupDn"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get user group successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserGroup"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "usergroup"
      summary: "Create user group"
      description: "Create user group information"
      operationId: "createUserGroup"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "usergroup"
        required: false
        schema:
          $ref: "#/definitions/UserGroup"
        x-exportParamName: "Usergroup"
      responses:
        "201":
          description: "User group created successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /usergroups/{group_id}:
    get:
      tags:
      - "usergroup"
      summary: "Get user group information"
      description: "Get user group information"
      operationId: "getUserGroup"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "group_id"
        in: "path"
        description: "Group ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "GroupId"
      responses:
        "200":
          description: "User group get successfully."
          schema:
            $ref: "#/definitions/UserGroup"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "usergroup"
      summary: "Update group information"
      description: "Update user group information"
      operationId: "updateUserGroup"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "group_id"
        in: "path"
        description: "Group ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "GroupId"
      - in: "body"
        name: "usergroup"
        required: false
        schema:
          $ref: "#/definitions/UserGroup"
        x-exportParamName: "Usergroup"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "usergroup"
      summary: "Delete user group"
      description: "Delete user group"
      operationId: "deleteUserGroup"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "group_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GroupId"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /icons/{digest}:
    get:
      tags:
      - "icon"
      summary: "Get artifact icon"
      description: "Get the artifact icon with the specified digest. As the original\
        \ icon image is resized and encoded before returning, the parameter \"digest\"\
        \ in the path doesn't match the hash of the returned content"
      operationId: "getIcon"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "digest"
        in: "path"
        description: "The digest of the resource"
        required: true
        type: "string"
        x-exportParamName: "Digest"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Icon"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /robots:
    get:
      tags:
      - "robot"
      summary: "Get robot account"
      description: "List the robot accounts with the specified level and project."
      operationId: "ListRobot"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of robot accounts"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Robot"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "robot"
      summary: "Create a robot account"
      description: "Create a robot account"
      operationId: "CreateRobot"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "robot"
        description: "The JSON object of a robot account."
        required: true
        schema:
          $ref: "#/definitions/RobotCreate"
        x-exportParamName: "Robot"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
          schema:
            $ref: "#/definitions/RobotCreated"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /quotas:
    get:
      tags:
      - "quota"
      summary: "List quotas"
      description: "List quotas"
      operationId: "listQuotas"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "reference"
        in: "query"
        description: "The reference type of quota."
        required: false
        type: "string"
        x-exportParamName: "Reference"
        x-optionalDataType: "String"
      - name: "reference_id"
        in: "query"
        description: "The reference id of quota."
        required: false
        type: "string"
        x-exportParamName: "ReferenceId"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort method, valid values include:\n'hard.resource_name', '-hard.resource_name',\
          \ 'used.resource_name', '-used.resource_name'.\nHere '-' stands for descending\
          \ order, resource_name should be the real resource name of the quota.\n"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successfully retrieved the quotas."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of access logs"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Quota"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /quotas/{id}:
    get:
      tags:
      - "quota"
      summary: "Get the specified quota"
      description: "Get the specified quota"
      operationId: "getQuota"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Quota ID"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Successfully retrieved the quota."
          schema:
            $ref: "#/definitions/Quota"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "quota"
      summary: "Update the specified quota"
      description: "Update hard limits of the specified quota"
      operationId: "updateQuota"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Quota ID"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "hard"
        description: "The new hard limits for the quota"
        required: true
        schema:
          $ref: "#/definitions/QuotaUpdateReq"
        x-exportParamName: "Hard"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /robots/{robot_id}:
    get:
      tags:
      - "robot"
      summary: "Get a robot account"
      description: "This endpoint returns specific robot account information by robot\
        \ ID."
      operationId: "GetRobotByID"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "robot_id"
        in: "path"
        description: "Robot ID"
        required: true
        type: "integer"
        x-exportParamName: "RobotId"
      responses:
        "200":
          description: "Return matched robot information."
          schema:
            $ref: "#/definitions/Robot"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "robot"
      summary: "Update a robot account"
      description: "This endpoint updates specific robot account information by robot\
        \ ID."
      operationId: "UpdateRobot"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "robot_id"
        in: "path"
        description: "Robot ID"
        required: true
        type: "integer"
        x-exportParamName: "RobotId"
      - in: "body"
        name: "robot"
        description: "The JSON object of a robot account."
        required: true
        schema:
          $ref: "#/definitions/Robot"
        x-exportParamName: "Robot"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "robot"
      summary: "Delete a robot account"
      description: "This endpoint deletes specific robot account information by robot\
        \ ID."
      operationId: "DeleteRobot"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "robot_id"
        in: "path"
        description: "Robot ID"
        required: true
        type: "integer"
        x-exportParamName: "RobotId"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    patch:
      tags:
      - "robot"
      summary: "Refresh the robot secret"
      description: "Refresh the robot secret"
      operationId: "RefreshSec"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "robot_id"
        in: "path"
        description: "Robot ID"
        required: true
        type: "integer"
        x-exportParamName: "RobotId"
      - in: "body"
        name: "robotSec"
        description: "The JSON object of a robot account."
        required: true
        schema:
          $ref: "#/definitions/RobotSec"
        x-exportParamName: "RobotSec"
      responses:
        "200":
          description: "Return refreshed robot sec."
          schema:
            $ref: "#/definitions/RobotSec"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /replication/policies:
    get:
      tags:
      - "replication"
      summary: "List replication policies"
      description: "List replication policies"
      operationId: "listReplicationPolicies"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "name"
        in: "query"
        description: "Deprecated, use \"query\" instead. The policy name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of the resources"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReplicationPolicy"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "replication"
      summary: "Create a replication policy"
      description: "Create a replication policy"
      operationId: "createReplicationPolicy"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "policy"
        description: "The replication policy"
        required: true
        schema:
          $ref: "#/definitions/ReplicationPolicy"
        x-exportParamName: "Policy"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /replication/policies/{id}:
    get:
      tags:
      - "replication"
      summary: "Get the specific replication policy"
      description: "Get the specific replication policy"
      operationId: "getReplicationPolicy"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ReplicationPolicy"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "replication"
      summary: "Update the replication policy"
      description: "Update the replication policy"
      operationId: "updateReplicationPolicy"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "The policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "policy"
        description: "The replication policy"
        required: true
        schema:
          $ref: "#/definitions/ReplicationPolicy"
        x-exportParamName: "Policy"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "replication"
      summary: "Delete the specific replication policy"
      description: "Delete the specific replication policy"
      operationId: "deleteReplicationPolicy"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Replication policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "412":
          description: "Precondition failed"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /replication/executions:
    get:
      tags:
      - "replication"
      summary: "List replication executions"
      description: "List replication executions"
      operationId: "listReplicationExecutions"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "policy_id"
        in: "query"
        description: "The ID of the policy that the executions belong to."
        required: false
        type: "integer"
        x-exportParamName: "PolicyId"
        x-optionalDataType: "Int32"
      - name: "status"
        in: "query"
        description: "The execution status."
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "trigger"
        in: "query"
        description: "The trigger mode."
        required: false
        type: "string"
        x-exportParamName: "Trigger"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of the resources"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReplicationExecution"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "replication"
      summary: "Start one replication execution"
      description: "Start one replication execution according to the policy"
      operationId: "startReplication"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "execution"
        description: "The ID of policy that the execution belongs to"
        required: true
        schema:
          $ref: "#/definitions/StartReplicationExecution"
        x-exportParamName: "Execution"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /replication/executions/{id}:
    get:
      tags:
      - "replication"
      summary: "Get the specific replication execution"
      description: "Get the replication execution specified by ID"
      operationId: "getReplicationExecution"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "The ID of the execution."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ReplicationExecution"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "replication"
      summary: "Stop the specific replication execution"
      description: "Stop the replication execution specified by ID"
      operationId: "stopReplication"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "The ID of the execution."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /replication/executions/{id}/tasks:
    get:
      tags:
      - "replication"
      summary: "List replication tasks for a specific execution"
      description: "List replication tasks for a specific execution"
      operationId: "listReplicationTasks"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "id"
        in: "path"
        description: "The ID of the execution that the tasks belongs to."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "status"
        in: "query"
        description: "The task status."
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "resource_type"
        in: "query"
        description: "The resource type."
        required: false
        type: "string"
        x-exportParamName: "ResourceType"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of the resources"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReplicationTask"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /replication/executions/{id}/tasks/{task_id}/log:
    get:
      tags:
      - "replication"
      summary: "Get the log of the specific replication task"
      description: "Get the log of the specific replication task"
      operationId: "getReplicationLog"
      produces:
      - "text/plain"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "The ID of the execution that the tasks belongs to."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "task_id"
        in: "path"
        description: "The ID of the task."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TaskId"
      responses:
        "200":
          description: "Success"
          headers:
            Content-Type:
              type: "string"
              description: "The content type of response body"
          schema:
            type: "string"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /replication/adapters:
    get:
      tags:
      - "registry"
      summary: "List registry adapters"
      description: "List registry adapters"
      operationId: "listRegistryProviderTypes"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success."
          schema:
            type: "array"
            items:
              type: "string"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /replication/adapterinfos:
    get:
      tags:
      - "registry"
      summary: "List all registered registry provider information"
      description: "List all registered registry provider information"
      operationId: "listRegistryProviderInfos"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success."
          schema:
            type: "object"
            additionalProperties:
              $ref: "#/definitions/RegistryProviderInfo"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /registries:
    get:
      tags:
      - "registry"
      summary: "List the registries"
      description: "List the registries"
      operationId: "listRegistries"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "name"
        in: "query"
        description: "Deprecated, use `q` instead."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of the resources"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Registry"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "registry"
      summary: "Create a registry"
      description: "Create a registry"
      operationId: "createRegistry"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "registry"
        description: "The registry"
        required: true
        schema:
          $ref: "#/definitions/Registry"
        x-exportParamName: "Registry"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /registries/ping:
    post:
      tags:
      - "registry"
      summary: "Check status of a registry"
      description: "Check status of a registry"
      operationId: "pingRegistry"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "registry"
        description: "The registry"
        required: true
        schema:
          $ref: "#/definitions/RegistryPing"
        x-exportParamName: "Registry"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /registries/{id}:
    get:
      tags:
      - "registry"
      summary: "Get the specific registry"
      description: "Get the specific registry"
      operationId: "getRegistry"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Registry ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Registry"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "registry"
      summary: "Update the registry"
      description: "Update the registry"
      operationId: "updateRegistry"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "The registry ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "registry"
        description: "The registry"
        required: true
        schema:
          $ref: "#/definitions/RegistryUpdate"
        x-exportParamName: "Registry"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "registry"
      summary: "Delete the specific registry"
      description: "Delete the specific registry"
      operationId: "deleteRegistry"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Registry ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "412":
          description: "Precondition failed"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /registries/{id}/info:
    get:
      tags:
      - "registry"
      summary: "Get the registry info"
      description: "Get the registry info"
      operationId: "getRegistryInfo"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Registry ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RegistryInfo"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /scans/all/metrics:
    get:
      tags:
      - "scanAll"
      summary: "Get the metrics of the latest scan all process"
      description: "Get the metrics of the latest scan all process"
      operationId: "getLatestScanAllMetrics"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Stats"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "412":
          description: "Precondition failed"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /scans/schedule/metrics:
    get:
      tags:
      - "scanAll"
      summary: "Get the metrics of the latest scheduled scan all process"
      description: "Get the metrics of the latest scheduled scan all process"
      operationId: "getLatestScheduledScanAllMetrics"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Stats"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "412":
          description: "Precondition failed"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
      deprecated: true
  /systeminfo:
    get:
      tags:
      - "systeminfo"
      summary: "Get general system info"
      description: "This API is for retrieving general system info, this can be called\
        \ by anonymous request.  Some attributes will be omitted in the response when\
        \ this API is called by anonymous request.\n"
      operationId: "getSystemInfo"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get general info successfully."
          schema:
            $ref: "#/definitions/GeneralInfo"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /systeminfo/volumes:
    get:
      tags:
      - "systeminfo"
      summary: "Get system volume info (total/free size)."
      description: "This endpoint is for retrieving system volume info that only provides\
        \ for admin user.  Note that the response only reflects the storage status\
        \ of local disk.\n"
      operationId: "getVolumes"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get system volumes successfully."
          schema:
            $ref: "#/definitions/SystemInfo"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /systeminfo/getcert:
    get:
      tags:
      - "systeminfo"
      summary: "Get default root certificate."
      description: "This endpoint is for downloading a default root certificate.\n"
      operationId: "getCert"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get default root certificate successfully."
          headers:
            Content-Disposition:
              type: "string"
              description: "To set the filename of the downloaded file."
          schema:
            type: "file"
        "404":
          description: "Not found the default root certificate."
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /system/oidc/ping:
    post:
      tags:
      - "oidc"
      summary: "Test the OIDC endpoint."
      description: "Test the OIDC endpoint, the setting of the endpoint is provided\
        \ in the request.  This API can only be called by system admin.\n"
      operationId: "pingOIDC"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "endpoint"
        description: "Request body for OIDC endpoint to be tested."
        required: true
        schema:
          $ref: "#/definitions/endpoint"
        x-exportParamName: "Endpoint"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /system/gc:
    get:
      tags:
      - "gc"
      summary: "Get gc results."
      description: "This endpoint let user get gc execution history."
      operationId: "getGCHistory"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Get gc results successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of history"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GCHistory"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /system/gc/{gc_id}:
    get:
      tags:
      - "gc"
      summary: "Get gc status."
      description: "This endpoint let user get gc status filtered by specific ID."
      operationId: "getGC"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "gc_id"
        in: "path"
        description: "The ID of the gc log"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "GcId"
      responses:
        "200":
          description: "Get gc results successfully."
          schema:
            $ref: "#/definitions/GCHistory"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /system/gc/{gc_id}/log:
    get:
      tags:
      - "gc"
      summary: "Get gc job log."
      description: "This endpoint let user get gc job logs filtered by specific ID."
      operationId: "getGCLog"
      produces:
      - "text/plain"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "gc_id"
        in: "path"
        description: "The ID of the gc log"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "GcId"
      responses:
        "200":
          description: "Get successfully."
          schema:
            type: "string"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /system/gc/schedule:
    get:
      tags:
      - "gc"
      summary: "Get gc's schedule."
      description: "This endpoint is for get schedule of gc job."
      operationId: "getGCSchedule"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get gc's schedule."
          schema:
            $ref: "#/definitions/GCHistory"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "gc"
      summary: "Create a gc schedule."
      description: "This endpoint is for update gc schedule.\n"
      operationId: "createGCSchedule"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "schedule"
        description: "Updates of gc's schedule."
        required: true
        schema:
          $ref: "#/definitions/Schedule"
        x-exportParamName: "Schedule"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "gc"
      summary: "Update gc's schedule."
      description: "This endpoint is for update gc schedule.\n"
      operationId: "updateGCSchedule"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "schedule"
        description: "Updates of gc's schedule."
        required: true
        schema:
          $ref: "#/definitions/Schedule"
        x-exportParamName: "Schedule"
      responses:
        "200":
          description: "Updated gc's schedule successfully."
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /system/CVEAllowlist:
    get:
      tags:
      - "SystemCVEAllowlist"
      summary: "Get the system level allowlist of CVE."
      description: "Get the system level allowlist of CVE.  This API can be called\
        \ by all authenticated users."
      operationId: "getSystemCVEAllowlist"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successfully retrieved the CVE allowlist."
          schema:
            $ref: "#/definitions/CVEAllowlist"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "SystemCVEAllowlist"
      summary: "Update the system level allowlist of CVE."
      description: "This API overwrites the system level allowlist of CVE with the\
        \ list in request body.  Only system Admin has permission to call this API."
      operationId: "putSystemCVEAllowlist"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "allowlist"
        description: "The allowlist with new content"
        required: false
        schema:
          $ref: "#/definitions/CVEAllowlist"
        x-exportParamName: "Allowlist"
      responses:
        "200":
          description: "Successfully updated the CVE allowlist."
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /system/scanAll/schedule:
    get:
      tags:
      - "scanAll"
      summary: "Get scan all's schedule."
      description: "This endpoint is for getting a schedule for the scan all job,\
        \ which scans all of images in Harbor."
      operationId: "getScanAllSchedule"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get a schedule for the scan all job, which scans all of images\
            \ in Harbor."
          schema:
            $ref: "#/definitions/Schedule"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "412":
          description: "Precondition failed"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "scanAll"
      summary: "Create a schedule or a manual trigger for the scan all job."
      description: "This endpoint is for creating a schedule or a manual trigger for\
        \ the scan all job, which scans all of images in Harbor."
      operationId: "createScanAllSchedule"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "schedule"
        description: "Create a schedule or a manual trigger for the scan all job."
        required: true
        schema:
          $ref: "#/definitions/Schedule"
        x-exportParamName: "Schedule"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "412":
          description: "Precondition failed"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "scanAll"
      summary: "Update scan all's schedule."
      description: "This endpoint is for updating the schedule of scan all job, which\
        \ scans all of images in Harbor."
      operationId: "updateScanAllSchedule"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "schedule"
        description: "Updates the schedule of scan all job, which scans all of images\
          \ in Harbor."
        required: true
        schema:
          $ref: "#/definitions/Schedule"
        x-exportParamName: "Schedule"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "412":
          description: "Precondition failed"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /ping:
    get:
      tags:
      - "ping"
      summary: "Ping Harbor to check if it's alive."
      description: "This API simply replies a pong to indicate the process to handle\
        \ API is up, disregarding the health status of dependent components."
      operationId: "getPing"
      produces:
      - "text/plain"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "The API server is alive"
          schema:
            type: "string"
  /retentions/metadatas:
    get:
      tags:
      - "Retention"
      summary: "Get Retention Metadatas"
      description: "Get Retention Metadatas."
      operationId: "getRentenitionMetadata"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get Retention Metadatas successfully."
          schema:
            $ref: "#/definitions/RetentionMetadata"
  /retentions:
    post:
      tags:
      - "Retention"
      summary: "Create Retention Policy"
      description: "Create Retention Policy, you can reference metadatas API for the\
        \ policy model. You can check project metadatas to find whether a retention\
        \ policy is already binded. This method should only be called when no retention\
        \ policy binded to project yet."
      operationId: "createRetention"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "policy"
        description: "Create Retention Policy successfully."
        required: true
        schema:
          $ref: "#/definitions/RetentionPolicy"
        x-exportParamName: "Policy"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /retentions/{id}:
    get:
      tags:
      - "Retention"
      summary: "Get Retention Policy"
      description: "Get Retention Policy."
      operationId: "getRetention"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get Retention Policy successfully."
          schema:
            $ref: "#/definitions/RetentionPolicy"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "Retention"
      summary: "Update Retention Policy"
      description: "Update Retention Policy, you can reference metadatas API for the\
        \ policy model. You can check project metadatas to find whether a retention\
        \ policy is already binded. This method should only be called when retention\
        \ policy has already binded to project."
      operationId: "updateRetention"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "policy"
        required: true
        schema:
          $ref: "#/definitions/RetentionPolicy"
        x-exportParamName: "Policy"
      responses:
        "200":
          description: "Update Retention Policy successfully."
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "Retention"
      summary: "Delete Retention Policy"
      description: "Delete Retention Policy, you can reference metadatas API for the\
        \ policy model. You can check project metadatas to find whether a retention\
        \ policy is already binded. This method should only be called when retention\
        \ policy has already binded to project."
      operationId: "deleteRetention"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Update Retention Policy successfully."
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /retentions/{id}/executions:
    get:
      tags:
      - "Retention"
      summary: "Get Retention executions"
      description: "Get Retention executions, execution status may be delayed before\
        \ job service schedule it up."
      operationId: "listRetentionExecutions"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Get a Retention execution successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RetentionExecution"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "Retention"
      summary: "Trigger a Retention Execution"
      description: "Trigger a Retention Execution, if dry_run is True, nothing would\
        \ be deleted actually."
      operationId: "triggerRetentionExecution"
      produces:
      - "text/plain"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Trigger a Retention job successfully."
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /retentions/{id}/executions/{eid}:
    patch:
      tags:
      - "Retention"
      summary: "Stop a Retention execution"
      description: "Stop a Retention execution, only support \"stop\" action now."
      operationId: "operateRetentionExecution"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "eid"
        in: "path"
        description: "Retention execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Eid"
      - in: "body"
        name: "body"
        description: "The action, only support \"stop\" now."
        required: true
        schema:
          $ref: "#/definitions/body_1"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Stop a Retention job successfully."
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /retentions/{id}/executions/{eid}/tasks:
    get:
      tags:
      - "Retention"
      summary: "Get Retention tasks"
      description: "Get Retention tasks, each repository as a task."
      operationId: "listRetentionTasks"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "eid"
        in: "path"
        description: "Retention execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Eid"
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Get Retention job tasks successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RetentionExecutionTask"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /retentions/{id}/executions/{eid}/tasks/{tid}:
    get:
      tags:
      - "Retention"
      summary: "Get Retention job task log"
      description: "Get Retention job task log, tags ratain or deletion detail will\
        \ be shown in a table."
      operationId: "getRetentionTaskLog"
      produces:
      - "text/plain"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "eid"
        in: "path"
        description: "Retention execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Eid"
      - name: "tid"
        in: "path"
        description: "Retention execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Tid"
      responses:
        "200":
          description: "Get Retention job task log successfully."
          schema:
            type: "string"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /scanners:
    get:
      tags:
      - "scanner"
      summary: "List scanner registrations"
      description: "Returns a list of currently configured scanner registrations.\n"
      operationId: "listScanners"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "A list of scanner registrations."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScannerRegistration"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "scanner"
      summary: "Create a scanner registration"
      description: "Creats a new scanner registration with the given data.\n"
      operationId: "createScanner"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "registration"
        description: "A scanner registration to be created."
        required: true
        schema:
          $ref: "#/definitions/ScannerRegistrationReq"
        x-exportParamName: "Registration"
      responses:
        "201":
          description: "Created successfully"
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /scanners/ping:
    post:
      tags:
      - "scanner"
      summary: "Tests scanner registration settings"
      description: "Pings scanner adapter to test endpoint URL and authorization settings.\n"
      operationId: "pingScanner"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "settings"
        description: "A scanner registration settings to be tested."
        required: true
        schema:
          $ref: "#/definitions/ScannerRegistrationSettings"
        x-exportParamName: "Settings"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /scanners/{registration_id}:
    get:
      tags:
      - "scanner"
      summary: "Get a scanner registration details"
      description: "Retruns the details of the specified scanner registration.\n"
      operationId: "getScanner"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "registration_id"
        in: "path"
        description: "The scanner registration identifer."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      responses:
        "200":
          description: "The details of the scanner registration."
          schema:
            $ref: "#/definitions/ScannerRegistration"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "scanner"
      summary: "Update a scanner registration"
      description: "Updates the specified scanner registration.\n"
      operationId: "updateScanner"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "registration_id"
        in: "path"
        description: "The scanner registration identifier."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      - in: "body"
        name: "registration"
        description: "A scanner registraiton to be updated."
        required: true
        schema:
          $ref: "#/definitions/ScannerRegistrationReq"
        x-exportParamName: "Registration"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "scanner"
      summary: "Delete a scanner registration"
      description: "Deletes the specified scanner registration.\n"
      operationId: "deleteScanner"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "registration_id"
        in: "path"
        description: "The scanner registration identifier."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      responses:
        "200":
          description: "Deleted successfully and return the deleted registration"
          schema:
            $ref: "#/definitions/ScannerRegistration"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    patch:
      tags:
      - "scanner"
      summary: "Set system default scanner registration"
      description: "Set the specified scanner registration as the system default one.\n"
      operationId: "setScannerAsDefault"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "registration_id"
        in: "path"
        description: "The scanner registration identifier."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/IsDefault"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Successfully set the specified scanner registration as system\
            \ default"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /scanners/{registration_id}/metadata:
    get:
      tags:
      - "scanner"
      summary: "Get the metadata of the specified scanner registration"
      description: "Get the metadata of the specified scanner registration, including\
        \ the capabilities and customized properties.\n"
      operationId: "getScannerMetadata"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "registration_id"
        in: "path"
        description: "The scanner registration identifier."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      responses:
        "200":
          description: "The metadata of the specified scanner adapter"
          schema:
            $ref: "#/definitions/ScannerAdapterMetadata"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /users:
    get:
      tags:
      - "user"
      summary: "List users"
      operationId: "listUsers"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "return the list of users."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of users"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserResp"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "user"
      summary: "Create a local user."
      description: "This API can be used only when the authentication mode is for\
        \ local DB.  When self registration is disabled."
      operationId: "createUser"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "userReq"
        description: "The new user"
        required: true
        schema:
          $ref: "#/definitions/UserCreationReq"
        x-exportParamName: "UserReq"
      responses:
        "201":
          description: "Created"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
            Location:
              type: "string"
              description: "The location of the resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "When the  self registration is disabled, non-admin does not\
            \ have permission to create user.  When self registration is enabled,\
            \ this API can only be called from UI portal, calling it via script will\
            \ get a 403 error."
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /users/current:
    get:
      tags:
      - "user"
      summary: "Get current user info."
      operationId: "getCurrentUserInfo"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get current user information successfully."
          schema:
            $ref: "#/definitions/UserResp"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /users/search:
    get:
      tags:
      - "user"
      summary: "Search users by username"
      description: "This endpoint is to search the users by username.  It's open for\
        \ all authenticated requests.\n"
      operationId: "searchUsers"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "username"
        in: "query"
        description: "Username for filtering results."
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        "200":
          description: "Search users by username successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserSearchRespItem"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /users/{user_id}:
    get:
      tags:
      - "user"
      summary: "Get a user's profile."
      operationId: "getUser"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Get user's info successfully."
          schema:
            $ref: "#/definitions/UserResp"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "user"
      summary: "Update user's profile."
      operationId: "updateUserProfile"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "user_id"
        in: "path"
        description: "Registered user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "profile"
        description: "Only email, realname and comment can be modified."
        required: true
        schema:
          $ref: "#/definitions/UserProfile"
        x-exportParamName: "Profile"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "user"
      summary: "Mark a registered user as be removed."
      description: "This endpoint let administrator of Harbor mark a registered user\
        \ as removed.It actually won't be deleted from DB.\n"
      operationId: "deleteUser"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "user_id"
        in: "path"
        description: "User ID for marking as to be removed."
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /users/{user_id}/sysadmin:
    put:
      tags:
      - "user"
      summary: "Update a registered user to change to be an administrator of Harbor."
      operationId: "setUserSysAdmin"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "sysadmin_flag"
        description: "Toggle a user to admin or not."
        required: true
        schema:
          $ref: "#/definitions/UserSysAdminFlag"
        x-exportParamName: "SysadminFlag"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Unexpected internal errors."
  /users/{user_id}/password:
    put:
      tags:
      - "user"
      summary: "Change the password on a user that already exists."
      description: "This endpoint is for user to update password. Users with the admin\
        \ role can change any user's password. Regular users can change only their\
        \ own password.\n"
      operationId: "updateUserPassword"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "password"
        description: "Password to be updated, the attribute 'old_password' is optional\
          \ when the API is called by the system administrator."
        required: true
        schema:
          $ref: "#/definitions/PasswordReq"
        x-exportParamName: "Password"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Invalid user ID; Password does not meet requirement"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "The caller does not have permission to update the password\
            \ of the user with given ID, or the old password in request body is not\
            \ correct."
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /users/current/permissions:
    get:
      tags:
      - "user"
      summary: "Get current user permissions."
      operationId: "getCurrentUserPermissions"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "scope"
        in: "query"
        description: "The scope for the permission"
        required: false
        type: "string"
        x-exportParamName: "Scope"
        x-optionalDataType: "String"
      - name: "relative"
        in: "query"
        description: "If true, the resources in the response are relative to the scope,\n\
          eg for resource '/project/1/repository' if relative is 'true' then the resource\
          \ in response will be 'repository'.\n"
        required: false
        type: "boolean"
        x-exportParamName: "Relative"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Get current user permission successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Permission"
        "401":
          description: "User need to log in first."
        "500":
          description: "Internal errors."
  /users/{user_id}/cli_secret:
    put:
      tags:
      - "user"
      summary: "Set CLI secret for a user."
      description: "This endpoint let user generate a new CLI secret for himself.\
        \  This API only works when auth mode is set to 'OIDC'. Once this API returns\
        \ with successful status, the old secret will be invalid, as there will be\
        \ only one CLI secret for a user."
      operationId: "setCliSecret"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "user_id"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "secret"
        required: true
        schema:
          $ref: "#/definitions/OIDCCliSecretReq"
        x-exportParamName: "Secret"
      responses:
        "200":
          description: "The secret is successfully updated"
        "400":
          description: "Invalid user ID.  Or user is not onboarded via OIDC authentication.\
            \ Or the secret does not meet the standard."
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "403":
          description: "Forbidden"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "412":
          description: "The auth mode of the system is not \"oidc_auth\", or the user\
            \ is not onboarded via OIDC AuthN."
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /labels:
    get:
      tags:
      - "label"
      summary: "List labels according to the query strings."
      description: "This endpoint let user list labels by name, scope and project_id\n"
      operationId: "ListLabels"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort the resource list in ascending or descending order. e.g.\
          \ sort by field1 in ascending orderr and field2 in descending order with\
          \ \"sort=field1,-field2\""
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "page_size"
        in: "query"
        description: "The size of per page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        format: "int64"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int64"
      - name: "name"
        in: "query"
        description: "The label name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "scope"
        in: "query"
        description: "The label scope. Valid values are g and p. g for global labels\
          \ and p for project labels."
        required: false
        type: "string"
        x-exportParamName: "Scope"
        x-optionalDataType: "String"
      - name: "project_id"
        in: "query"
        description: "Relevant project ID, required when scope is p."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Get successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Label"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    post:
      tags:
      - "label"
      summary: "Post creates a label"
      description: "This endpoint let user creates a label.\n"
      operationId: "CreateLabel"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - in: "body"
        name: "label"
        description: "The json object of label."
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        "201":
          description: "Create successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "415":
          description: "Unsupported MediaType"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
  /labels/{label_id}:
    get:
      tags:
      - "label"
      summary: "Get the label specified by ID."
      description: "This endpoint let user get the label by specific ID.\n"
      operationId: "GetLabelByID"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "label_id"
        in: "path"
        description: "Label ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "LabelId"
      responses:
        "200":
          description: "Get successfully."
          schema:
            $ref: "#/definitions/Label"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    put:
      tags:
      - "label"
      summary: "Update the label properties."
      description: "This endpoint let user update label properties.\n"
      operationId: "UpdateLabel"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "label_id"
        in: "path"
        description: "Label ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "LabelId"
      - in: "body"
        name: "label"
        description: "The updated label json object."
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "409":
          description: "Conflict"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
    delete:
      tags:
      - "label"
      summary: "Delete the label specified by ID."
      description: "Delete the label specified by ID.\n"
      operationId: "DeleteLabel"
      parameters:
      - name: "X-Request-Id"
        in: "header"
        description: "An unique ID for the request"
        required: false
        type: "string"
        minLength: 1
        x-exportParamName: "XRequestId"
        x-optionalDataType: "String"
      - name: "label_id"
        in: "path"
        description: "Label ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "LabelId"
      responses:
        "200":
          description: "Success"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
        "400":
          description: "Bad request"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "401":
          description: "Unauthorized"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "404":
          description: "Not found"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
        "500":
          description: "Internal server error"
          headers:
            X-Request-Id:
              type: "string"
              description: "The ID of the corresponding request for the response"
          schema:
            $ref: "#/definitions/Errors"
securityDefinitions:
  basic:
    type: "basic"
definitions:
  Errors:
    type: "object"
    properties:
      errors:
        type: "array"
        items:
          $ref: "#/definitions/Error"
    description: "The error array that describe the errors got during the handling\
      \ of request"
  Error:
    type: "object"
    properties:
      code:
        type: "string"
        description: "The error code"
      message:
        type: "string"
        description: "The error message"
    description: "a model for all the error response coming from harbor"
  Search:
    type: "object"
    properties:
      project:
        type: "array"
        description: "Search results of the projects that matched the filter keywords."
        items:
          $ref: "#/definitions/Project"
      repository:
        type: "array"
        description: "Search results of the repositories that matched the filter keywords."
        items:
          $ref: "#/definitions/SearchRepository"
      chart:
        type: "array"
        description: "Search results of the charts that macthed the filter keywords."
        items:
          $ref: "#/definitions/SearchResult"
        x-omitempty: true
        x-isnullable: true
    example:
      project:
      - creation_time: "2000-01-23T04:56:07.000+00:00"
        togglable: true
        metadata:
          severity: "severity"
          prevent_vul: "prevent_vul"
          retention_id: "retention_id"
          reuse_sys_cve_allowlist: "reuse_sys_cve_allowlist"
          public: "public"
          auto_scan: "auto_scan"
          enable_content_trust: "enable_content_trust"
        owner_name: "owner_name"
        owner_id: 6
        repo_count: 2
        registry_id: 1
        update_time: "2000-01-23T04:56:07.000+00:00"
        current_user_role_id: 5
        deleted: true
        project_id: 0
        name: "name"
        current_user_role_ids:
        - 5
        - 5
        cve_allowlist:
          creation_time: "2000-01-23T04:56:07.000+00:00"
          update_time: "2000-01-23T04:56:07.000+00:00"
          expires_at: 2
          project_id: 3
          id: 9
          items:
          - cve_id: "cve_id"
          - cve_id: "cve_id"
        chart_count: 7
      - creation_time: "2000-01-23T04:56:07.000+00:00"
        togglable: true
        metadata:
          severity: "severity"
          prevent_vul: "prevent_vul"
          retention_id: "retention_id"
          reuse_sys_cve_allowlist: "reuse_sys_cve_allowlist"
          public: "public"
          auto_scan: "auto_scan"
          enable_content_trust: "enable_content_trust"
        owner_name: "owner_name"
        owner_id: 6
        repo_count: 2
        registry_id: 1
        update_time: "2000-01-23T04:56:07.000+00:00"
        current_user_role_id: 5
        deleted: true
        project_id: 0
        name: "name"
        current_user_role_ids:
        - 5
        - 5
        cve_allowlist:
          creation_time: "2000-01-23T04:56:07.000+00:00"
          update_time: "2000-01-23T04:56:07.000+00:00"
          expires_at: 2
          project_id: 3
          id: 9
          items:
          - cve_id: "cve_id"
          - cve_id: "cve_id"
        chart_count: 7
      repository:
      - project_id: 4
        artifact_count: 1
        project_name: "project_name"
        repository_name: "repository_name"
        pull_count: 7
        project_public: true
      - project_id: 4
        artifact_count: 1
        project_name: "project_name"
        repository_name: "repository_name"
        pull_count: 7
        project_public: true
      chart:
      - Score: 1
        Chart: ""
        Name: "Name"
      - Score: 1
        Chart: ""
        Name: "Name"
  SearchRepository:
    type: "object"
    properties:
      project_id:
        type: "integer"
        description: "The ID of the project that the repository belongs to"
      project_name:
        type: "string"
        description: "The name of the project that the repository belongs to"
      project_public:
        type: "boolean"
        description: "The flag to indicate the publicity of the project that the repository\
          \ belongs to (1 is public, 0 is not)"
      repository_name:
        type: "string"
        description: "The name of the repository"
      pull_count:
        type: "integer"
        description: "The count how many times the repository is pulled"
      artifact_count:
        type: "integer"
        description: "The count of artifacts in the repository"
    example:
      project_id: 4
      artifact_count: 1
      project_name: "project_name"
      repository_name: "repository_name"
      pull_count: 7
      project_public: true
  SearchResult:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "The chart name with repo name"
      Score:
        type: "integer"
        description: "The matched level"
      Chart:
        $ref: "#/definitions/ChartVersion"
    description: "The chart search result item"
    example:
      Score: 1
      Chart: ""
      Name: "Name"
  ChartVersion:
    properties:
      labels:
        type: "array"
        description: "A list of label"
        items:
          $ref: "#/definitions/Label"
    allOf:
    - $ref: "#/definitions/ChartMetadata"
    - type: "object"
      properties:
        created:
          type: "string"
          description: "The created time of the chart entry"
        removed:
          type: "boolean"
          description: "A flag to indicate if the chart entry is removed"
        digest:
          type: "string"
          description: "The digest value of the chart entry"
        urls:
          type: "array"
          description: "The urls of the chart entry"
          items:
            type: "string"
    description: "A specified chart entry"
  ChartMetadata:
    type: "object"
    required:
    - "apiVersion"
    - "appVersion"
    - "engine"
    - "icon"
    - "name"
    - "version"
    properties:
      name:
        type: "string"
        description: "The name of the chart"
      home:
        type: "string"
        description: "The URL to the relevant project page"
      sources:
        type: "array"
        description: "The URL to the source code of chart"
        items:
          type: "string"
      version:
        type: "string"
        description: "A SemVer 2 version of chart"
      description:
        type: "string"
        description: "A one-sentence description of chart"
      keywords:
        type: "array"
        description: "A list of string keywords"
        items:
          type: "string"
      engine:
        type: "string"
        description: "The name of template engine"
      icon:
        type: "string"
        description: "The URL to an icon file"
      apiVersion:
        type: "string"
        description: "The API version of this chart"
      appVersion:
        type: "string"
        description: "The version of the application enclosed in the chart"
      deprecated:
        type: "boolean"
        description: "Whether or not this chart is deprecated"
    description: "The metadata of chart version"
  Repository:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The ID of the repository"
      project_id:
        type: "integer"
        format: "int64"
        description: "The ID of the project that the repository belongs to"
      name:
        type: "string"
        description: "The name of the repository"
      description:
        type: "string"
        description: "The description of the repository"
      artifact_count:
        type: "integer"
        format: "int64"
        description: "The count of the artifacts inside the repository"
        x-omitempty: false
      pull_count:
        type: "integer"
        format: "int64"
        description: "The count that the artifact inside the repository pulled"
        x-omitempty: false
      creation_time:
        type: "string"
        format: "date-time"
        description: "The creation time of the repository"
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of the repository"
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      update_time: "2000-01-23T04:56:07.000+00:00"
      project_id: 6
      name: "name"
      artifact_count: 1
      description: "description"
      id: 0
      pull_count: 5
  Artifact:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The ID of the artifact"
      type:
        type: "string"
        description: "The type of the artifact, e.g. image, chart, etc"
      media_type:
        type: "string"
        description: "The media type of the artifact"
      manifest_media_type:
        type: "string"
        description: "The manifest media type of the artifact"
      project_id:
        type: "integer"
        format: "int64"
        description: "The ID of the project that the artifact belongs to"
      repository_id:
        type: "integer"
        format: "int64"
        description: "The ID of the repository that the artifact belongs to"
      digest:
        type: "string"
        description: "The digest of the artifact"
      size:
        type: "integer"
        format: "int64"
        description: "The size of the artifact"
      icon:
        type: "string"
        description: "The digest of the icon"
      push_time:
        type: "string"
        format: "date-time"
        description: "The push time of the artifact"
      pull_time:
        type: "string"
        format: "date-time"
        description: "The latest pull time of the artifact"
      extra_attrs:
        $ref: "#/definitions/ExtraAttrs"
      annotations:
        $ref: "#/definitions/Annotations"
      references:
        type: "array"
        items:
          $ref: "#/definitions/Reference"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      addition_links:
        $ref: "#/definitions/AdditionLinks"
      labels:
        type: "array"
        items:
          $ref: "#/definitions/Label"
      scan_overview:
        description: "The overview of the scan result."
        $ref: "#/definitions/ScanOverview"
    example:
      references:
      - urls:
        - "urls"
        - "urls"
        child_id: 2
        parent_id: 5
        child_digest: "child_digest"
        platform:
          '''os.version''': "'os.version'"
          os: "os"
          variant: "variant"
          '''os.features''':
          - "'os.features'"
          - "'os.features'"
          architecture: "architecture"
      - urls:
        - "urls"
        - "urls"
        child_id: 2
        parent_id: 5
        child_digest: "child_digest"
        platform:
          '''os.version''': "'os.version'"
          os: "os"
          variant: "variant"
          '''os.features''':
          - "'os.features'"
          - "'os.features'"
          architecture: "architecture"
      addition_links: {}
      extra_attrs: {}
      icon: "icon"
      annotations: {}
      type: "type"
      manifest_media_type: "manifest_media_type"
      tags:
      - pull_time: "2000-01-23T04:56:07.000+00:00"
        immutable: true
        name: "name"
        signed: true
        repository_id: 9
        id: 7
        artifact_id: 3
        push_time: "2000-01-23T04:56:07.000+00:00"
      - pull_time: "2000-01-23T04:56:07.000+00:00"
        immutable: true
        name: "name"
        signed: true
        repository_id: 9
        id: 7
        artifact_id: 3
        push_time: "2000-01-23T04:56:07.000+00:00"
      labels:
      - creation_time: "2000-01-23T04:56:07.000+00:00"
        update_time: "2000-01-23T04:56:07.000+00:00"
        color: "color"
        project_id: 4
        scope: "scope"
        name: "name"
        description: "description"
        id: 2
      - creation_time: "2000-01-23T04:56:07.000+00:00"
        update_time: "2000-01-23T04:56:07.000+00:00"
        color: "color"
        project_id: 4
        scope: "scope"
        name: "name"
        description: "description"
        id: 2
      pull_time: "2000-01-23T04:56:07.000+00:00"
      size: 5
      media_type: "media_type"
      project_id: 6
      digest: "digest"
      scan_overview: {}
      repository_id: 1
      id: 0
      push_time: "2000-01-23T04:56:07.000+00:00"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The ID of the tag"
      repository_id:
        type: "integer"
        format: "int64"
        description: "The ID of the repository that the tag belongs to"
      artifact_id:
        type: "integer"
        format: "int64"
        description: "The ID of the artifact that the tag attached to"
      name:
        type: "string"
        description: "The name of the tag"
      push_time:
        type: "string"
        format: "date-time"
        description: "The push time of the tag"
      pull_time:
        type: "string"
        format: "date-time"
        description: "The latest pull time of the tag"
      immutable:
        type: "boolean"
        description: "The immutable status of the tag"
        x-omitempty: false
      signed:
        type: "boolean"
        description: "The attribute indicates whether the tag is signed or not"
        x-omitempty: false
    example:
      pull_time: "2000-01-23T04:56:07.000+00:00"
      immutable: true
      name: "name"
      signed: true
      repository_id: 9
      id: 7
      artifact_id: 3
      push_time: "2000-01-23T04:56:07.000+00:00"
  ExtraAttrs:
    type: "object"
    additionalProperties:
      type: "object"
      properties: {}
  Annotations:
    type: "object"
    additionalProperties:
      type: "string"
  AdditionLinks:
    type: "object"
    additionalProperties:
      $ref: "#/definitions/AdditionLink"
  AdditionLink:
    type: "object"
    properties:
      href:
        type: "string"
        description: "The link of the addition"
      absolute:
        type: "boolean"
        description: "Determine whether the link is an absolute URL or not"
        x-omitempty: false
  Reference:
    type: "object"
    properties:
      parent_id:
        type: "integer"
        format: "int64"
        description: "The parent ID of the reference"
      child_id:
        type: "integer"
        format: "int64"
        description: "The child ID of the reference"
      child_digest:
        type: "string"
        description: "The digest of the child artifact"
      platform:
        $ref: "#/definitions/Platform"
      annotations:
        $ref: "#/definitions/Annotations"
      urls:
        type: "array"
        description: "The download URLs"
        items:
          type: "string"
    example:
      urls:
      - "urls"
      - "urls"
      child_id: 2
      parent_id: 5
      child_digest: "child_digest"
      platform:
        '''os.version''': "'os.version'"
        os: "os"
        variant: "variant"
        '''os.features''':
        - "'os.features'"
        - "'os.features'"
        architecture: "architecture"
  Platform:
    type: "object"
    properties:
      architecture:
        type: "string"
        description: "The architecture that the artifact applys to"
      os:
        type: "string"
        description: "The OS that the artifact applys to"
      '''os.version''':
        type: "string"
        description: "The version of the OS that the artifact applys to"
      '''os.features''':
        type: "array"
        description: "The features of the OS that the artifact applys to"
        items:
          type: "string"
      variant:
        type: "string"
        description: "The variant of the CPU"
    example:
      '''os.version''': "'os.version'"
      os: "os"
      variant: "variant"
      '''os.features''':
      - "'os.features'"
      - "'os.features'"
      architecture: "architecture"
  Label:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The ID of the label"
      name:
        type: "string"
        description: "The name the label"
      description:
        type: "string"
        description: "The description the label"
      color:
        type: "string"
        description: "The color the label"
      scope:
        type: "string"
        description: "The scope the label"
      project_id:
        type: "integer"
        format: "int64"
        description: "The ID of project that the label belongs to"
      creation_time:
        type: "string"
        format: "date-time"
        description: "The creation time the label"
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of the label"
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      update_time: "2000-01-23T04:56:07.000+00:00"
      color: "color"
      project_id: 4
      scope: "scope"
      name: "name"
      description: "description"
      id: 2
  Scanner:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Trivy"
        description: "Name of the scanner"
      vendor:
        type: "string"
        example: "Aqua Security"
        description: "Name of the scanner provider"
      version:
        type: "string"
        example: "v0.9.1"
        description: "Version of the scanner adapter"
    example:
      vendor: "Aqua Security"
      name: "Trivy"
      version: "v0.9.1"
  ScanOverview:
    type: "object"
    description: "The scan overview attached in the metadata of tag"
    additionalProperties:
      $ref: "#/definitions/NativeReportSummary"
  NativeReportSummary:
    type: "object"
    properties:
      report_id:
        type: "string"
        example: "5f62c830-f996-11e9-957f-0242c0a89008"
        description: "id of the native scan report"
      scan_status:
        type: "string"
        example: "Success"
        description: "The status of the report generating process"
      severity:
        type: "string"
        example: "High"
        description: "The overall severity"
      duration:
        type: "integer"
        format: "int64"
        example: 300
        description: "The seconds spent for generating the report"
      summary:
        $ref: "#/definitions/VulnerabilitySummary"
      start_time:
        type: "string"
        format: "date-time"
        example: "2006-01-02T14:04:05Z"
        description: "The start time of the scan process that generating report"
      end_time:
        type: "string"
        format: "date-time"
        example: "2006-01-02T15:04:05Z"
        description: "The end time of the scan process that generating report"
      complete_percent:
        type: "integer"
        example: 100
        description: "The complete percent of the scanning which value is between\
          \ 0 and 100"
      scanner:
        $ref: "#/definitions/Scanner"
    description: "The summary for the native report"
  VulnerabilitySummary:
    type: "object"
    properties:
      total:
        type: "integer"
        format: "int"
        example: 500
        description: "The total number of the found vulnerabilities"
        x-omitempty: false
      fixable:
        type: "integer"
        format: "int"
        example: 100
        description: "The number of the fixable vulnerabilities"
        x-omitempty: false
      summary:
        type: "object"
        example:
          Critical: 5
          High: 5
        description: "Numbers of the vulnerabilities with different severity"
        additionalProperties:
          type: "integer"
          format: "int"
          example: 10
        x-omitempty: false
    description: "VulnerabilitySummary contains the total number of the foun d vulnerabilities\
      \ number and numbers of each severity level.\n"
  AuditLog:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of the audit log entry."
      username:
        type: "string"
        description: "Username of the user in this log entry."
      resource:
        type: "string"
        description: "Name of the repository in this log entry."
      resource_type:
        type: "string"
        description: "Tag of the repository in this log entry."
      operation:
        type: "string"
        description: "The operation against the repository in this log entry."
      op_time:
        type: "string"
        format: "date-time"
        example: "2006-01-02T15:04:05Z"
        description: "The time when this operation is triggered."
    example:
      resource: "resource"
      resource_type: "resource_type"
      op_time: "2006-01-02T15:04:05Z"
      id: 0
      operation: "operation"
      username: "username"
  Metadata:
    type: "object"
    properties:
      id:
        type: "string"
        description: "id"
      name:
        type: "string"
        description: "name"
      icon:
        type: "string"
        description: "icon"
      maintainers:
        type: "array"
        description: "maintainers"
        items:
          type: "string"
      version:
        type: "string"
        description: "version"
      source:
        type: "string"
        description: "source"
    example:
      maintainers:
      - "maintainers"
      - "maintainers"
      name: "name"
      icon: "icon"
      id: "id"
      source: "source"
      version: "version"
  Instance:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Unique ID"
      name:
        type: "string"
        description: "Instance name"
      description:
        type: "string"
        description: "Description of instance"
      vendor:
        type: "string"
        description: "Based on which driver, identified by ID"
      endpoint:
        type: "string"
        description: "The service endpoint of this instance"
      auth_mode:
        type: "string"
        description: "The authentication way supported"
      auth_info:
        type: "object"
        description: "The auth credential data if exists"
        additionalProperties:
          type: "string"
      status:
        type: "string"
        description: "The health status"
      enabled:
        type: "boolean"
        description: "Whether the instance is activated or not"
        x-omitempty: false
      default:
        type: "boolean"
        description: "Whether the instance is default or not"
        x-omitempty: false
      insecure:
        type: "boolean"
        description: "Whether the instance endpoint is insecure or not"
        x-omitempty: false
      setup_timestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp of instance setting up"
    example:
      endpoint: "endpoint"
      default: true
      vendor: "vendor"
      name: "name"
      insecure: true
      description: "description"
      auth_mode: "auth_mode"
      id: 0
      auth_info:
        key: "auth_info"
      setup_timestamp: 6
      enabled: true
      status: "status"
  PreheatPolicy:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of preheat policy"
      name:
        type: "string"
        description: "The Name of preheat policy"
      description:
        type: "string"
        description: "The Description of preheat policy"
      project_id:
        type: "integer"
        description: "The ID of preheat policy project"
      provider_id:
        type: "integer"
        description: "The ID of preheat policy provider"
      provider_name:
        type: "string"
        description: "The Name of preheat policy provider"
      filters:
        type: "string"
        description: "The Filters of preheat policy"
      trigger:
        type: "string"
        description: "The Trigger of preheat policy"
      enabled:
        type: "boolean"
        description: "Whether the preheat policy enabled"
        x-omitempty: false
      creation_time:
        type: "string"
        format: "date-time"
        description: "The Create Time of preheat policy"
      update_time:
        type: "string"
        format: "date-time"
        description: "The Update Time of preheat policy"
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      update_time: "2000-01-23T04:56:07.000+00:00"
      project_id: 6
      name: "name"
      description: "description"
      provider_id: 1
      id: 0
      filters: "filters"
      trigger: "trigger"
      provider_name: "provider_name"
      enabled: true
  Metrics:
    type: "object"
    properties:
      task_count:
        type: "integer"
        description: "The count of task"
      success_task_count:
        type: "integer"
        description: "The count of success task"
      error_task_count:
        type: "integer"
        description: "The count of error task"
      pending_task_count:
        type: "integer"
        description: "The count of pending task"
      running_task_count:
        type: "integer"
        description: "The count of running task"
      scheduled_task_count:
        type: "integer"
        description: "The count of scheduled task"
      stopped_task_count:
        type: "integer"
        description: "The count of stopped task"
    example:
      running_task_count: 7
      success_task_count: 5
      stopped_task_count: 3
      scheduled_task_count: 9
      error_task_count: 5
      pending_task_count: 2
      task_count: 1
  Execution:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of execution"
      vendor_type:
        type: "string"
        description: "The vendor type of execution"
      vendor_id:
        type: "integer"
        description: "The vendor id of execution"
      status:
        type: "string"
        description: "The status of execution"
      status_message:
        type: "string"
        description: "The status message of execution"
      metrics:
        $ref: "#/definitions/Metrics"
      trigger:
        type: "string"
        description: "The trigger of execution"
      extra_attrs:
        $ref: "#/definitions/ExtraAttrs"
      start_time:
        type: "string"
        description: "The start time of execution"
      end_time:
        type: "string"
        description: "The end time of execution"
    example:
      status_message: "status_message"
      start_time: "start_time"
      extra_attrs: {}
      vendor_id: 6
      end_time: "end_time"
      id: 0
      metrics:
        running_task_count: 7
        success_task_count: 5
        stopped_task_count: 3
        scheduled_task_count: 9
        error_task_count: 5
        pending_task_count: 2
        task_count: 1
      trigger: "trigger"
      vendor_type: "vendor_type"
      status: "status"
  Task:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of task"
      execution_id:
        type: "integer"
        description: "The ID of task execution"
      status:
        type: "string"
        description: "The status of task"
      status_message:
        type: "string"
        description: "The status message of task"
      run_count:
        type: "integer"
        format: "int32"
        description: "The count of task run"
      extra_attrs:
        $ref: "#/definitions/ExtraAttrs"
      creation_time:
        type: "string"
        description: "The creation time of task"
      update_time:
        type: "string"
        description: "The update time of task"
      start_time:
        type: "string"
        description: "The start time of task"
      end_time:
        type: "string"
        description: "The end time of task"
    example:
      status_message: "status_message"
      creation_time: "creation_time"
      execution_id: 6
      start_time: "start_time"
      update_time: "update_time"
      extra_attrs: {}
      end_time: "end_time"
      id: 0
      status: "status"
      run_count: 1
  ProviderUnderProject:
    type: "object"
    properties:
      id:
        type: "integer"
      provider:
        type: "string"
      enabled:
        type: "boolean"
      default:
        type: "boolean"
    example:
      default: true
      provider: "provider"
      id: 0
      enabled: true
  Icon:
    type: "object"
    properties:
      content-type:
        type: "string"
        description: "The content type of the icon"
      content:
        type: "string"
        description: "The base64 encoded content of the icon"
    example:
      content-type: "content-type"
      content: "content"
  ProjectReq:
    type: "object"
    properties:
      project_name:
        type: "string"
        description: "The name of the project."
        maxLength: 255
      public:
        type: "boolean"
        description: "deprecated, reserved for project creation in replication"
        x-nullable: true
      metadata:
        description: "The metadata of the project."
        $ref: "#/definitions/ProjectMetadata"
      cve_allowlist:
        description: "The CVE allowlist of the project."
        $ref: "#/definitions/CVEAllowlist"
      storage_limit:
        type: "integer"
        format: "int64"
        description: "The storage quota of the project."
        x-nullable: true
      registry_id:
        type: "integer"
        format: "int64"
        description: "The ID of referenced registry when creating the proxy cache\
          \ project"
        x-nullable: true
    example:
      metadata:
        severity: "severity"
        prevent_vul: "prevent_vul"
        retention_id: "retention_id"
        reuse_sys_cve_allowlist: "reuse_sys_cve_allowlist"
        public: "public"
        auto_scan: "auto_scan"
        enable_content_trust: "enable_content_trust"
      storage_limit: 0
      public: true
      cve_allowlist:
        creation_time: "2000-01-23T04:56:07.000+00:00"
        update_time: "2000-01-23T04:56:07.000+00:00"
        expires_at: 2
        project_id: 3
        id: 9
        items:
        - cve_id: "cve_id"
        - cve_id: "cve_id"
      project_name: "project_name"
      registry_id: 6
  Project:
    type: "object"
    properties:
      project_id:
        type: "integer"
        format: "int32"
        description: "Project ID"
      owner_id:
        type: "integer"
        format: "int32"
        description: "The owner ID of the project always means the creator of the\
          \ project."
      name:
        type: "string"
        description: "The name of the project."
      registry_id:
        type: "integer"
        format: "int64"
        description: "The ID of referenced registry when the project is a proxy cache\
          \ project."
      creation_time:
        type: "string"
        format: "date-time"
        description: "The creation time of the project."
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of the project."
      deleted:
        type: "boolean"
        description: "A deletion mark of the project."
      owner_name:
        type: "string"
        description: "The owner name of the project."
      togglable:
        type: "boolean"
        description: "Correspond to the UI about whether the project's publicity is\
          \  updatable (for UI)"
      current_user_role_id:
        type: "integer"
        description: "The role ID with highest permission of the current user who\
          \ triggered the API (for UI).  This attribute is deprecated and will be\
          \ removed in future versions."
      current_user_role_ids:
        type: "array"
        description: "The list of role ID of the current user who triggered the API\
          \ (for UI)"
        items:
          type: "integer"
          format: "int32"
      repo_count:
        type: "integer"
        description: "The number of the repositories under this project."
        x-omitempty: false
      chart_count:
        type: "integer"
        description: "The total number of charts under this project."
        x-omitempty: false
      metadata:
        description: "The metadata of the project."
        $ref: "#/definitions/ProjectMetadata"
      cve_allowlist:
        description: "The CVE allowlist of this project."
        $ref: "#/definitions/CVEAllowlist"
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      togglable: true
      metadata:
        severity: "severity"
        prevent_vul: "prevent_vul"
        retention_id: "retention_id"
        reuse_sys_cve_allowlist: "reuse_sys_cve_allowlist"
        public: "public"
        auto_scan: "auto_scan"
        enable_content_trust: "enable_content_trust"
      owner_name: "owner_name"
      owner_id: 6
      repo_count: 2
      registry_id: 1
      update_time: "2000-01-23T04:56:07.000+00:00"
      current_user_role_id: 5
      deleted: true
      project_id: 0
      name: "name"
      current_user_role_ids:
      - 5
      - 5
      cve_allowlist:
        creation_time: "2000-01-23T04:56:07.000+00:00"
        update_time: "2000-01-23T04:56:07.000+00:00"
        expires_at: 2
        project_id: 3
        id: 9
        items:
        - cve_id: "cve_id"
        - cve_id: "cve_id"
      chart_count: 7
  ProjectDeletable:
    type: "object"
    properties:
      deletable:
        type: "boolean"
        description: "Whether the project can be deleted."
      message:
        type: "string"
        description: "The detail message when the project can not be deleted."
    example:
      deletable: true
      message: "message"
  ProjectMetadata:
    type: "object"
    properties:
      public:
        type: "string"
        description: "The public status of the project. The valid values are \"true\"\
          , \"false\"."
      enable_content_trust:
        type: "string"
        description: "Whether content trust is enabled or not. If it is enabled, user\
          \ can't pull unsigned images from this project. The valid values are \"\
          true\", \"false\"."
        x-nullable: true
      prevent_vul:
        type: "string"
        description: "Whether prevent the vulnerable images from running. The valid\
          \ values are \"true\", \"false\"."
        x-nullable: true
      severity:
        type: "string"
        description: "If the vulnerability is high than severity defined here, the\
          \ images can't be pulled. The valid values are \"none\", \"low\", \"medium\"\
          , \"high\", \"critical\"."
        x-nullable: true
      auto_scan:
        type: "string"
        description: "Whether scan images automatically when pushing. The valid values\
          \ are \"true\", \"false\"."
        x-nullable: true
      reuse_sys_cve_allowlist:
        type: "string"
        description: "Whether this project reuse the system level CVE allowlist as\
          \ the allowlist of its own.  The valid values are \"true\", \"false\". If\
          \ it is set to \"true\" the actual allowlist associate with this project,\
          \ if any, will be ignored."
        x-nullable: true
      retention_id:
        type: "string"
        description: "The ID of the tag retention policy for the project"
        x-nullable: true
    example:
      severity: "severity"
      prevent_vul: "prevent_vul"
      retention_id: "retention_id"
      reuse_sys_cve_allowlist: "reuse_sys_cve_allowlist"
      public: "public"
      auto_scan: "auto_scan"
      enable_content_trust: "enable_content_trust"
  ProjectSummary:
    type: "object"
    properties:
      repo_count:
        type: "integer"
        description: "The number of the repositories under this project."
        x-omitempty: false
      chart_count:
        type: "integer"
        description: "The total number of charts under this project."
        x-omitempty: false
      project_admin_count:
        type: "integer"
        description: "The total number of project admin members."
      maintainer_count:
        type: "integer"
        description: "The total number of maintainer members."
      developer_count:
        type: "integer"
        description: "The total number of developer members."
      guest_count:
        type: "integer"
        description: "The total number of guest members."
      limited_guest_count:
        type: "integer"
        description: "The total number of limited guest members."
      quota:
        $ref: "#/definitions/ProjectSummaryQuota"
      registry:
        $ref: "#/definitions/Registry"
    example:
      registry:
        creation_time: "2000-01-23T04:56:07.000+00:00"
        update_time: "2000-01-23T04:56:07.000+00:00"
        credential:
          access_key: "access_key"
          access_secret: "access_secret"
          type: "type"
        name: "name"
        insecure: true
        description: "description"
        id: 9
        type: "type"
        url: "url"
        status: "status"
      quota:
        hard: {}
      maintainer_count: 5
      guest_count: 2
      limited_guest_count: 7
      developer_count: 5
      repo_count: 0
      project_admin_count: 1
      chart_count: 6
  ProjectSummaryQuota:
    type: "object"
    properties:
      hard:
        description: "The hard limits of the quota"
        $ref: "#/definitions/ResourceList"
      used:
        description: "The used status of the quota"
        $ref: "#/definitions/ResourceList"
    example:
      hard: {}
  ProjectScanner:
    type: "object"
    required:
    - "uuid"
    properties:
      uuid:
        type: "string"
        description: "The identifier of the scanner registration"
    example:
      uuid: "uuid"
  CVEAllowlist:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "ID of the allowlist"
      project_id:
        type: "integer"
        description: "ID of the project which the allowlist belongs to.  For system\
          \ level allowlist this attribute is zero."
      expires_at:
        type: "integer"
        description: "the time for expiration of the allowlist, in the form of seconds\
          \ since epoch.  This is an optional attribute, if it's not set the CVE allowlist\
          \ does not expire."
        x-nullable: true
      items:
        type: "array"
        items:
          $ref: "#/definitions/CVEAllowlistItem"
      creation_time:
        type: "string"
        format: "date-time"
        description: "The creation time of the allowlist."
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of the allowlist."
    description: "The CVE Allowlist for system or project"
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      update_time: "2000-01-23T04:56:07.000+00:00"
      expires_at: 2
      project_id: 3
      id: 9
      items:
      - cve_id: "cve_id"
      - cve_id: "cve_id"
  CVEAllowlistItem:
    type: "object"
    properties:
      cve_id:
        type: "string"
        description: "The ID of the CVE, such as \"CVE-2019-10164\""
    description: "The item in CVE allowlist"
    example:
      cve_id: "cve_id"
  ReplicationPolicy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The policy ID."
      name:
        type: "string"
        description: "The policy name."
      description:
        type: "string"
        description: "The description of the policy."
      src_registry:
        description: "The source registry."
        $ref: "#/definitions/Registry"
      dest_registry:
        description: "The destination registry."
        $ref: "#/definitions/Registry"
      dest_namespace:
        type: "string"
        description: "The destination namespace."
      dest_namespace_replace_count:
        type: "integer"
        format: "int8"
        description: "Specify how many path components will be replaced by the provided\
          \ destination namespace.\nThe default value is -1 in which case the legacy\
          \ mode will be applied."
        x-isnullable: true
      trigger:
        $ref: "#/definitions/ReplicationTrigger"
      filters:
        type: "array"
        description: "The replication policy filter array."
        items:
          $ref: "#/definitions/ReplicationFilter"
      replicate_deletion:
        type: "boolean"
        description: "Whether to replicate the deletion operation."
      deletion:
        type: "boolean"
        description: "Deprecated, use \"replicate_deletion\" instead. Whether to replicate\
          \ the deletion operation."
      override:
        type: "boolean"
        description: "Whether to override the resources on the destination registry."
      enabled:
        type: "boolean"
        description: "Whether the policy is enabled or not."
      creation_time:
        type: "string"
        format: "date-time"
        description: "The create time of the policy."
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of the policy."
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      dest_namespace_replace_count: 6
      description: "description"
      trigger:
        trigger_settings:
          cron: "cron"
        type: "type"
      filters:
      - type: "type"
        value: "{}"
      - type: "type"
        value: "{}"
      enabled: true
      replicate_deletion: true
      update_time: "2000-01-23T04:56:07.000+00:00"
      dest_registry:
        creation_time: "2000-01-23T04:56:07.000+00:00"
        update_time: "2000-01-23T04:56:07.000+00:00"
        credential:
          access_key: "access_key"
          access_secret: "access_secret"
          type: "type"
        name: "name"
        insecure: true
        description: "description"
        id: 9
        type: "type"
        url: "url"
        status: "status"
      src_registry:
        creation_time: "2000-01-23T04:56:07.000+00:00"
        update_time: "2000-01-23T04:56:07.000+00:00"
        credential:
          access_key: "access_key"
          access_secret: "access_secret"
          type: "type"
        name: "name"
        insecure: true
        description: "description"
        id: 9
        type: "type"
        url: "url"
        status: "status"
      deletion: true
      name: "name"
      dest_namespace: "dest_namespace"
      id: 0
      override: true
  ReplicationTrigger:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The replication policy trigger type. The valid values are manual,\
          \ event_based and scheduled."
      trigger_settings:
        $ref: "#/definitions/ReplicationTriggerSettings"
    example:
      trigger_settings:
        cron: "cron"
      type: "type"
  ReplicationTriggerSettings:
    type: "object"
    properties:
      cron:
        type: "string"
        description: "The cron string for scheduled trigger"
    example:
      cron: "cron"
  ReplicationFilter:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The replication policy filter type."
      value:
        type: "object"
        description: "The value of replication policy filter."
        properties: {}
    example:
      type: "type"
      value: "{}"
  RegistryCredential:
    type: "object"
    properties:
      type:
        type: "string"
        description: "Credential type, such as 'basic', 'oauth'."
      access_key:
        type: "string"
        description: "Access key, e.g. user name when credential type is 'basic'."
      access_secret:
        type: "string"
        description: "Access secret, e.g. password when credential type is 'basic'."
    example:
      access_key: "access_key"
      access_secret: "access_secret"
      type: "type"
  Registry:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The registry ID."
        x-omitempty: false
      url:
        type: "string"
        description: "The registry URL string."
      name:
        type: "string"
        description: "The registry name."
      credential:
        $ref: "#/definitions/RegistryCredential"
      type:
        type: "string"
        description: "Type of the registry, e.g. 'harbor'."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
      description:
        type: "string"
        description: "Description of the registry."
      status:
        type: "string"
        description: "Health status of the registry."
      creation_time:
        type: "string"
        format: "date-time"
        description: "The create time of the policy."
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of the policy."
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      update_time: "2000-01-23T04:56:07.000+00:00"
      credential:
        access_key: "access_key"
        access_secret: "access_secret"
        type: "type"
      name: "name"
      insecure: true
      description: "description"
      id: 9
      type: "type"
      url: "url"
      status: "status"
  RegistryUpdate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The registry name."
        x-nullable: true
      description:
        type: "string"
        description: "Description of the registry."
        x-nullable: true
      url:
        type: "string"
        description: "The registry URL."
        x-nullable: true
      credential_type:
        type: "string"
        description: "Credential type of the registry, e.g. 'basic'."
        x-nullable: true
      access_key:
        type: "string"
        description: "The registry access key."
        x-nullable: true
      access_secret:
        type: "string"
        description: "The registry access secret."
        x-nullable: true
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
        x-nullable: true
    example:
      credential_type: "credential_type"
      access_key: "access_key"
      name: "name"
      access_secret: "access_secret"
      insecure: true
      description: "description"
      url: "url"
  RegistryPing:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The registry ID."
        x-nullable: true
      type:
        type: "string"
        description: "Type of the registry, e.g. 'harbor'."
        x-nullable: true
      url:
        type: "string"
        description: "The registry URL."
        x-nullable: true
      credential_type:
        type: "string"
        description: "Credential type of the registry, e.g. 'basic'."
        x-nullable: true
      access_key:
        type: "string"
        description: "The registry access key."
        x-nullable: true
      access_secret:
        type: "string"
        description: "The registry access secret."
        x-nullable: true
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
        x-nullable: true
    example:
      credential_type: "credential_type"
      access_key: "access_key"
      access_secret: "access_secret"
      insecure: true
      id: 0
      type: "type"
      url: "url"
  RegistryInfo:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The registry type"
      description:
        type: "string"
        description: "The description"
      supported_resource_filters:
        type: "array"
        description: "The filters that the registry supports"
        items:
          $ref: "#/definitions/FilterStyle"
      supported_triggers:
        type: "array"
        description: "The triggers that the registry supports"
        items:
          type: "string"
    description: "The registry info contains the base info and capability declarations\
      \ of the registry"
    example:
      supported_triggers:
      - "supported_triggers"
      - "supported_triggers"
      description: "description"
      type: "type"
      supported_resource_filters:
      - values:
        - "values"
        - "values"
        style: "style"
        type: "type"
      - values:
        - "values"
        - "values"
        style: "style"
        type: "type"
  RegistryProviderInfo:
    type: "object"
    properties:
      endpoint_pattern:
        description: "The endpoint pattern"
        $ref: "#/definitions/RegistryProviderEndpointPattern"
      credential_pattern:
        description: "The credential pattern"
        $ref: "#/definitions/RegistryProviderCredentialPattern"
    description: "The registry provider info contains the base info and capability\
      \ declarations of the registry provider"
    example:
      endpoint_pattern:
        endpoint_type: "endpoint_type"
        endpoints:
        - value: "value"
          key: "key"
        - value: "value"
          key: "key"
      credential_pattern:
        access_secret_data: "access_secret_data"
        access_key_data: "access_key_data"
        access_secret_type: "access_secret_type"
        access_key_type: "access_key_type"
  RegistryProviderEndpointPattern:
    type: "object"
    properties:
      endpoint_type:
        type: "string"
        description: "The endpoint type"
      endpoints:
        type: "array"
        description: "The endpoint list"
        items:
          $ref: "#/definitions/RegistryEndpoint"
    description: "The registry endpoint pattern"
    example:
      endpoint_type: "endpoint_type"
      endpoints:
      - value: "value"
        key: "key"
      - value: "value"
        key: "key"
  RegistryProviderCredentialPattern:
    type: "object"
    properties:
      access_key_type:
        type: "string"
        description: "The access key type"
      access_key_data:
        type: "string"
        description: "The access key data"
      access_secret_type:
        type: "string"
        description: "The access secret type"
      access_secret_data:
        type: "string"
        description: "The access secret data"
    description: "The registry credential pattern"
    example:
      access_secret_data: "access_secret_data"
      access_key_data: "access_key_data"
      access_secret_type: "access_secret_type"
      access_key_type: "access_key_type"
  RegistryEndpoint:
    type: "object"
    properties:
      key:
        type: "string"
        description: "The endpoint key"
      value:
        type: "string"
        description: "The endpoint value"
    description: "The style of the resource filter"
    example:
      value: "value"
      key: "key"
  FilterStyle:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The filter type"
      style:
        type: "string"
        description: "The filter style"
      values:
        type: "array"
        description: "The filter values"
        items:
          type: "string"
    description: "The style of the resource filter"
    example:
      values:
      - "values"
      - "values"
      style: "style"
      type: "type"
  ResourceList:
    type: "object"
    additionalProperties:
      type: "integer"
      format: "int64"
    x-go-type:
      type: "ResourceList"
      import:
        package: "github.com/goharbor/harbor/src/pkg/quota/types"
  ReplicationExecution:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of the execution"
      policy_id:
        type: "integer"
        description: "The ID if the policy that the execution belongs to"
      status:
        type: "string"
        description: "The status of the execution"
      trigger:
        type: "string"
        description: "The trigger mode"
      start_time:
        type: "string"
        format: "date-time"
        description: "The start time"
      end_time:
        type: "string"
        format: "date-time"
        description: "The end time"
      status_text:
        type: "string"
        description: "The status text"
        x-omitempty: false
      total:
        type: "integer"
        description: "The total count of all executions"
        x-omitempty: false
      failed:
        type: "integer"
        description: "The count of failed executions"
        x-omitempty: false
      succeed:
        type: "integer"
        description: "The count of succeed executions"
        x-omitempty: false
      in_progress:
        type: "integer"
        description: "The count of in_progress executions"
        x-omitempty: false
      stopped:
        type: "integer"
        description: "The count of stopped executions"
        x-omitempty: false
    description: "The replication execution"
    example:
      start_time: "2000-01-23T04:56:07.000+00:00"
      total: 1
      in_progress: 2
      stopped: 7
      policy_id: 6
      succeed: 5
      end_time: "2000-01-23T04:56:07.000+00:00"
      id: 0
      trigger: "trigger"
      status_text: "status_text"
      failed: 5
      status: "status"
  StartReplicationExecution:
    type: "object"
    properties:
      policy_id:
        type: "integer"
        format: "int64"
        description: "The ID of policy that the execution belongs to."
    example:
      policy_id: 0
  ReplicationTask:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of the task"
      execution_id:
        type: "integer"
        description: "The ID of the execution that the task belongs to"
      status:
        type: "string"
        description: "The status of the task"
      job_id:
        type: "string"
        description: "The ID of the underlying job that the task related to"
      operation:
        type: "string"
        description: "The operation of the task"
      resource_type:
        type: "string"
        description: "The type of the resource that the task operates"
      src_resource:
        type: "string"
        description: "The source resource that the task operates"
      dst_resource:
        type: "string"
        description: "The destination resource that the task operates"
      start_time:
        type: "string"
        format: "date-time"
        description: "The start time of the task"
      end_time:
        type: "string"
        format: "date-time"
        description: "The end time of the task"
    description: "The replication task"
    example:
      execution_id: 6
      dst_resource: "dst_resource"
      start_time: "2000-01-23T04:56:07.000+00:00"
      src_resource: "src_resource"
      job_id: "job_id"
      resource_type: "resource_type"
      end_time: "2000-01-23T04:56:07.000+00:00"
      id: 0
      operation: "operation"
      status: "status"
  Robot:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The ID of the robot"
      name:
        type: "string"
        description: "The name of the tag"
      description:
        type: "string"
        description: "The description of the robot"
      secret:
        type: "string"
        description: "The secret of the robot"
      level:
        type: "string"
        description: "The level of the robot, project or system"
      duration:
        type: "integer"
        format: "int64"
        description: "The duration of the robot in days"
      editable:
        type: "boolean"
        description: "The editable status of the robot"
        x-omitempty: false
      disable:
        type: "boolean"
        description: "The disable status of the robot"
        x-omitempty: false
      expires_at:
        type: "integer"
        format: "int64"
        description: "The expiration data of the robot"
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/RobotPermission"
      creation_time:
        type: "string"
        format: "date-time"
        description: "The creation time of the robot."
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of the robot."
    example:
      duration: 6
      creation_time: "2000-01-23T04:56:07.000+00:00"
      update_time: "2000-01-23T04:56:07.000+00:00"
      expires_at: 1
      level: "level"
      editable: true
      disable: true
      permissions:
      - access:
        - resource: "resource"
          effect: "effect"
          action: "action"
        - resource: "resource"
          effect: "effect"
          action: "action"
        kind: "kind"
        namespace: "namespace"
      - access:
        - resource: "resource"
          effect: "effect"
          action: "action"
        - resource: "resource"
          effect: "effect"
          action: "action"
        kind: "kind"
        namespace: "namespace"
      name: "name"
      description: "description"
      id: 0
      secret: "secret"
  RobotCreate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the tag"
      description:
        type: "string"
        description: "The description of the robot"
      secret:
        type: "string"
        description: "The secret of the robot"
      level:
        type: "string"
        description: "The level of the robot, project or system"
      disable:
        type: "boolean"
        description: "The disable status of the robot"
      duration:
        type: "integer"
        format: "int64"
        description: "The duration of the robot in days"
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/RobotPermission"
    description: "The request for robot account creation."
    example:
      duration: 0
      level: "level"
      disable: true
      permissions:
      - access:
        - resource: "resource"
          effect: "effect"
          action: "action"
        - resource: "resource"
          effect: "effect"
          action: "action"
        kind: "kind"
        namespace: "namespace"
      - access:
        - resource: "resource"
          effect: "effect"
          action: "action"
        - resource: "resource"
          effect: "effect"
          action: "action"
        kind: "kind"
        namespace: "namespace"
      name: "name"
      description: "description"
      secret: "secret"
  RobotCreated:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The ID of the robot"
      name:
        type: "string"
        description: "The name of the tag"
      secret:
        type: "string"
        description: "The secret of the robot"
      creation_time:
        type: "string"
        format: "date-time"
        description: "The creation time of the robot."
      expires_at:
        type: "integer"
        format: "int64"
        description: "The expiration data of the robot"
    description: "The response for robot account creation."
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      expires_at: 6
      name: "name"
      id: 0
      secret: "secret"
  RobotSec:
    type: "object"
    properties:
      secret:
        type: "string"
        description: "The secret of the robot"
    description: "The response for refresh/update robot account secret."
    example:
      secret: "secret"
  RobotPermission:
    type: "object"
    properties:
      kind:
        type: "string"
        description: "The kind of the permission"
      namespace:
        type: "string"
        description: "The namespace of the permission"
      access:
        type: "array"
        items:
          $ref: "#/definitions/Access"
    example:
      access:
      - resource: "resource"
        effect: "effect"
        action: "action"
      - resource: "resource"
        effect: "effect"
        action: "action"
      kind: "kind"
      namespace: "namespace"
  Access:
    type: "object"
    properties:
      resource:
        type: "string"
        description: "The resource of the access"
      action:
        type: "string"
        description: "The action of the access"
      effect:
        type: "string"
        description: "The effect of the access"
    example:
      resource: "resource"
      effect: "effect"
      action: "action"
  RobotCreateV1:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of robot account"
      description:
        type: "string"
        description: "The description of robot account"
      expires_at:
        type: "integer"
        description: "The expiration time on or after which the JWT MUST NOT be accepted\
          \ for processing."
      access:
        type: "array"
        description: "The permission of robot account"
        items:
          $ref: "#/definitions/Access"
    example:
      expires_at: 0
      access:
      - resource: "resource"
        effect: "effect"
        action: "action"
      - resource: "resource"
        effect: "effect"
        action: "action"
      name: "name"
      description: "description"
  Storage:
    type: "object"
    properties:
      total:
        type: "integer"
        format: "uint64"
        description: "Total volume size."
      free:
        type: "integer"
        format: "uint64"
        description: "Free volume size."
    example:
      total: 0
      free: 6
  GeneralInfo:
    type: "object"
    properties:
      with_notary:
        type: "boolean"
        description: "If the Harbor instance is deployed with nested notary."
        x-omitempty: true
        x-nullable: true
      with_chartmuseum:
        type: "boolean"
        description: "If the Harbor instance is deployed with nested chartmuseum."
        x-omitempty: true
        x-nullable: true
      registry_url:
        type: "string"
        description: "The url of registry against which the docker command should\
          \ be issued."
        x-omitempty: true
        x-nullable: true
      external_url:
        type: "string"
        description: "The external URL of Harbor, with protocol."
        x-omitempty: true
        x-nullable: true
      auth_mode:
        type: "string"
        description: "The auth mode of current Harbor instance."
        x-omitempty: true
        x-nullable: true
      project_creation_restriction:
        type: "string"
        description: "Indicate who can create projects, it could be 'adminonly' or\
          \ 'everyone'."
        x-omitempty: true
        x-nullable: true
      self_registration:
        type: "boolean"
        description: "Indicate whether the Harbor instance enable user to register\
          \ himself."
        x-omitempty: true
        x-nullable: true
      has_ca_root:
        type: "boolean"
        description: "Indicate whether there is a ca root cert file ready for download\
          \ in the file system."
        x-omitempty: true
        x-nullable: true
      harbor_version:
        type: "string"
        description: "The build version of Harbor."
        x-omitempty: true
        x-nullable: true
      registry_storage_provider_name:
        type: "string"
        description: "The storage provider's name of Harbor registry"
        x-omitempty: true
        x-nullable: true
      read_only:
        type: "boolean"
        description: "The flag to indicate whether Harbor is in readonly mode."
        x-omitempty: true
        x-nullable: true
      notification_enable:
        type: "boolean"
        description: "The flag to indicate whether notification mechanism is enabled\
          \ on Harbor instance."
        x-omitempty: true
        x-nullable: true
      authproxy_settings:
        description: "The setting of auth proxy this is only available when Harbor\
          \ relies on authproxy for authentication."
        $ref: "#/definitions/AuthproxySetting"
    example:
      registry_url: "registry_url"
      self_registration: true
      notification_enable: true
      authproxy_settings:
        server_certificate: "server_certificate"
        endpoint: "endpoint"
        verify_cert: true
        skip_search: true
        tokenreivew_endpoint: "tokenreivew_endpoint"
      auth_mode: "auth_mode"
      with_notary: true
      project_creation_restriction: "project_creation_restriction"
      registry_storage_provider_name: "registry_storage_provider_name"
      with_chartmuseum: true
      external_url: "external_url"
      read_only: true
      has_ca_root: true
      harbor_version: "harbor_version"
  AuthproxySetting:
    type: "object"
    properties:
      endpoint:
        type: "string"
        description: "The fully qualified URI of login endpoint of authproxy, such\
          \ as 'https://192.168.1.2:8443/login'"
      tokenreivew_endpoint:
        type: "string"
        description: "The fully qualified URI of token review endpoint of authproxy,\
          \ such as 'https://192.168.1.2:8443/tokenreview'"
      skip_search:
        type: "boolean"
        description: "The flag to determine whether Harbor can skip search the user/group\
          \ when adding him as a member."
      verify_cert:
        type: "boolean"
        description: "The flag to determine whether Harbor should verify the certificate\
          \ when connecting to the auth proxy."
      server_certificate:
        type: "string"
        description: "The certificate to be pinned when connecting auth proxy."
    example:
      server_certificate: "server_certificate"
      endpoint: "endpoint"
      verify_cert: true
      skip_search: true
      tokenreivew_endpoint: "tokenreivew_endpoint"
  SystemInfo:
    type: "object"
    properties:
      storage:
        type: "array"
        description: "The storage of system."
        items:
          $ref: "#/definitions/Storage"
    example:
      storage:
      - total: 0
        free: 6
      - total: 0
        free: 6
  GCHistory:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "the id of gc job."
      job_name:
        type: "string"
        description: "the job name of gc job."
      job_kind:
        type: "string"
        description: "the job kind of gc job."
      job_parameters:
        type: "string"
        description: "the job parameters of gc job."
      schedule:
        $ref: "#/definitions/ScheduleObj"
      job_status:
        type: "string"
        description: "the status of gc job."
      deleted:
        type: "boolean"
        description: "if gc job was deleted."
      creation_time:
        type: "string"
        format: "date-time"
        description: "the creation time of gc job."
      update_time:
        type: "string"
        format: "date-time"
        description: "the update time of gc job."
    example:
      job_parameters: "job_parameters"
      creation_time: "2000-01-23T04:56:07.000+00:00"
      schedule:
        cron: "cron"
        type: "Hourly"
      job_status: "job_status"
      update_time: "2000-01-23T04:56:07.000+00:00"
      deleted: true
      job_name: "job_name"
      id: 0
      job_kind: "job_kind"
  Schedule:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The id of the schedule."
        readOnly: true
      status:
        type: "string"
        description: "The status of the schedule."
        readOnly: true
      creation_time:
        type: "string"
        format: "date-time"
        description: "the creation time of the schedule."
        readOnly: true
      update_time:
        type: "string"
        format: "date-time"
        description: "the update time of the schedule."
        readOnly: true
      schedule:
        $ref: "#/definitions/ScheduleObj"
      parameters:
        type: "object"
        description: "The parameters of schedule job"
        additionalProperties:
          type: "object"
          properties: {}
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      schedule:
        cron: "cron"
        type: "Hourly"
      update_time: "2000-01-23T04:56:07.000+00:00"
      id: 0
      parameters:
        key: "{}"
      status: "status"
  ScheduleObj:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly',\
          \ 'Custom', 'Manual' and 'None'.\n'Manual' means to trigger it right away\
          \ and 'None' means to cancel the schedule.\n"
        enum:
        - "Hourly"
        - "Daily"
        - "Weekly"
        - "Custom"
        - "Manual"
        - "None"
      cron:
        type: "string"
        description: "A cron expression, a time-based job scheduler."
    example:
      cron: "cron"
      type: "Hourly"
  Stats:
    type: "object"
    properties:
      total:
        type: "integer"
        format: "int"
        example: 100
        description: "The total number of scan processes triggered by the scan all\
          \ action"
        x-omitempty: false
      completed:
        type: "integer"
        format: "int"
        example: 90
        description: "The number of the finished scan processes triggered by the scan\
          \ all action"
        x-omitempty: false
      metrics:
        type: "object"
        example:
          Success: 5
          Error: 2
          Running: 3
        description: "The metrics data for the each status"
        additionalProperties:
          type: "integer"
          format: "int"
          example: 10
      ongoing:
        type: "boolean"
        description: "A flag indicating job status of scan all."
        x-omitempty: false
      trigger:
        type: "string"
        description: "The trigger of the scan all job."
        enum:
        - "Manual"
        - "Schedule"
        - "Event"
    description: "Stats provides the overall progress of the scan all process."
    example:
      total: 100
      ongoing: true
      completed: 90
      metrics:
        Success: 5
        Error: 2
        Running: 3
      trigger: "Manual"
  RetentionMetadata:
    type: "object"
    properties:
      templates:
        type: "array"
        description: "templates"
        items:
          $ref: "#/definitions/RetentionRuleMetadata"
      scope_selectors:
        type: "array"
        description: "supported scope selectors"
        items:
          $ref: "#/definitions/RetentionSelectorMetadata"
      tag_selectors:
        type: "array"
        description: "supported tag selectors"
        items:
          $ref: "#/definitions/RetentionSelectorMetadata"
    description: "the tag retention metadata"
    example:
      tag_selectors:
      - kind: "kind"
        decorations:
        - "decorations"
        - "decorations"
        display_text: "display_text"
      - kind: "kind"
        decorations:
        - "decorations"
        - "decorations"
        display_text: "display_text"
      templates:
      - rule_template: "rule_template"
        action: "action"
        params:
        - unit: "unit"
          type: "type"
          required: true
        - unit: "unit"
          type: "type"
          required: true
        display_text: "display_text"
      - rule_template: "rule_template"
        action: "action"
        params:
        - unit: "unit"
          type: "type"
          required: true
        - unit: "unit"
          type: "type"
          required: true
        display_text: "display_text"
      scope_selectors:
      - kind: "kind"
        decorations:
        - "decorations"
        - "decorations"
        display_text: "display_text"
      - kind: "kind"
        decorations:
        - "decorations"
        - "decorations"
        display_text: "display_text"
  RetentionRuleMetadata:
    type: "object"
    properties:
      rule_template:
        type: "string"
        description: "rule id"
      display_text:
        type: "string"
        description: "rule display text"
      action:
        type: "string"
        description: "rule action"
      params:
        type: "array"
        description: "rule params"
        items:
          $ref: "#/definitions/RetentionRuleParamMetadata"
    description: "the tag retention rule metadata"
    example:
      rule_template: "rule_template"
      action: "action"
      params:
      - unit: "unit"
        type: "type"
        required: true
      - unit: "unit"
        type: "type"
        required: true
      display_text: "display_text"
  RetentionRuleParamMetadata:
    type: "object"
    properties:
      type:
        type: "string"
      unit:
        type: "string"
      required:
        type: "boolean"
    description: "rule param"
    example:
      unit: "unit"
      type: "type"
      required: true
  RetentionSelectorMetadata:
    type: "object"
    properties:
      display_text:
        type: "string"
      kind:
        type: "string"
      decorations:
        type: "array"
        items:
          type: "string"
    description: "retention selector"
    example:
      kind: "kind"
      decorations:
      - "decorations"
      - "decorations"
      display_text: "display_text"
  RetentionPolicy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      algorithm:
        type: "string"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/RetentionRule"
      trigger:
        $ref: "#/definitions/RetentionRuleTrigger"
      scope:
        $ref: "#/definitions/RetentionPolicyScope"
    description: "retention policy"
    example:
      scope:
        ref: 5
        level: "level"
      rules:
      - template: "template"
        tag_selectors:
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        scope_selectors:
          key:
          - kind: "kind"
            pattern: "pattern"
            extras: "extras"
            decoration: "decoration"
          - kind: "kind"
            pattern: "pattern"
            extras: "extras"
            decoration: "decoration"
        action: "action"
        disabled: true
        id: 6
        priority: 1
        params:
          key: "{}"
      - template: "template"
        tag_selectors:
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        scope_selectors:
          key:
          - kind: "kind"
            pattern: "pattern"
            extras: "extras"
            decoration: "decoration"
          - kind: "kind"
            pattern: "pattern"
            extras: "extras"
            decoration: "decoration"
        action: "action"
        disabled: true
        id: 6
        priority: 1
        params:
          key: "{}"
      id: 0
      trigger:
        settings: "{}"
        references: "{}"
        kind: "kind"
      algorithm: "algorithm"
  RetentionRuleTrigger:
    type: "object"
    properties:
      kind:
        type: "string"
      settings:
        type: "object"
        properties: {}
      references:
        type: "object"
        properties: {}
    example:
      settings: "{}"
      references: "{}"
      kind: "kind"
  RetentionPolicyScope:
    type: "object"
    properties:
      level:
        type: "string"
      ref:
        type: "integer"
    example:
      ref: 5
      level: "level"
  RetentionRule:
    type: "object"
    properties:
      id:
        type: "integer"
      priority:
        type: "integer"
      disabled:
        type: "boolean"
      action:
        type: "string"
      template:
        type: "string"
      params:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
      tag_selectors:
        type: "array"
        items:
          $ref: "#/definitions/RetentionSelector"
      scope_selectors:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/RetentionSelector"
    example:
      template: "template"
      tag_selectors:
      - kind: "kind"
        pattern: "pattern"
        extras: "extras"
        decoration: "decoration"
      - kind: "kind"
        pattern: "pattern"
        extras: "extras"
        decoration: "decoration"
      scope_selectors:
        key:
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
      action: "action"
      disabled: true
      id: 6
      priority: 1
      params:
        key: "{}"
  RetentionSelector:
    type: "object"
    properties:
      kind:
        type: "string"
      decoration:
        type: "string"
      pattern:
        type: "string"
      extras:
        type: "string"
    example:
      kind: "kind"
      pattern: "pattern"
      extras: "extras"
      decoration: "decoration"
  RetentionExecution:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      policy_id:
        type: "integer"
        format: "int64"
      start_time:
        type: "string"
      end_time:
        type: "string"
      status:
        type: "string"
      trigger:
        type: "string"
      dry_run:
        type: "boolean"
    example:
      start_time: "start_time"
      policy_id: 6
      end_time: "end_time"
      dry_run: true
      id: 0
      trigger: "trigger"
      status: "status"
  RetentionExecutionTask:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      execution_id:
        type: "integer"
        format: "int64"
      repository:
        type: "string"
      job_id:
        type: "string"
      status:
        type: "string"
      status_code:
        type: "integer"
        x-omitempty: false
      status_revision:
        type: "integer"
        format: "int64"
      start_time:
        type: "string"
      end_time:
        type: "string"
      total:
        type: "integer"
        x-omitempty: false
      retained:
        type: "integer"
        x-omitempty: false
    example:
      execution_id: 6
      start_time: "start_time"
      retained: 2
      total: 5
      status_code: 1
      job_id: "job_id"
      end_time: "end_time"
      status_revision: 5
      id: 0
      repository: "repository"
      status: "status"
  QuotaUpdateReq:
    type: "object"
    properties:
      hard:
        description: "The new hard limits for the quota"
        $ref: "#/definitions/ResourceList"
    example:
      hard: {}
  QuotaRefObject:
    type: "object"
    additionalProperties: {}
  Quota:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "ID of the quota"
      ref:
        description: "The reference object of the quota"
        $ref: "#/definitions/QuotaRefObject"
      hard:
        description: "The hard limits of the quota"
        $ref: "#/definitions/ResourceList"
      used:
        description: "The used status of the quota"
        $ref: "#/definitions/ResourceList"
      creation_time:
        type: "string"
        format: "date-time"
        description: "the creation time of the quota"
      update_time:
        type: "string"
        format: "date-time"
        description: "the update time of the quota"
    description: "The quota object"
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      ref: {}
      update_time: "2000-01-23T04:56:07.000+00:00"
      id: 0
      hard: {}
  ScannerRegistration:
    type: "object"
    properties:
      uuid:
        type: "string"
        description: "The unique identifier of this registration."
      name:
        type: "string"
        example: "Trivy"
        description: "The name of this registration."
      description:
        type: "string"
        example: "A free-to-use tool that scans container images for package vulnerabilities.\n"
        description: "An optional description of this registration."
        x-omitempty: false
      url:
        type: "string"
        format: "url"
        example: "http://harbor-scanner-trivy:8080"
        description: "A base URL of the scanner adapter"
      disabled:
        type: "boolean"
        description: "Indicate whether the registration is enabled or not"
        default: false
        x-omitempty: false
      is_default:
        type: "boolean"
        description: "Indicate if the registration is set as the system default one"
        default: false
        x-omitempty: false
      auth:
        type: "string"
        example: "Bearer"
        description: "Specify what authentication approach is adopted for the HTTP\
          \ communications.\nSupported types Basic\", \"Bearer\" and api key header\
          \ \"X-ScannerAdapter-API-Key\"\n"
        default: ""
        x-omitempty: false
      access_credential:
        type: "string"
        example: "Bearer: JWTTOKENGOESHERE"
        description: "An optional value of the HTTP Authorization header sent with\
          \ each request to the Scanner Adapter API.\n"
        x-omitempty: false
      skip_certVerify:
        type: "boolean"
        description: "Indicate if skip the certificate verification when sending HTTP\
          \ requests"
        default: false
        x-omitempty: false
      use_internal_addr:
        type: "boolean"
        description: "Indicate whether use internal registry addr for the scanner\
          \ to pull content or not"
        default: false
        x-omitempty: false
      create_time:
        type: "string"
        format: "date-time"
        description: "The creation time of this registration"
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of this registration"
      adapter:
        type: "string"
        example: "Trivy"
        description: "Optional property to describe the name of the scanner registration"
      vendor:
        type: "string"
        example: "CentOS"
        description: "Optional property to describe the vendor of the scanner registration"
      version:
        type: "string"
        example: "1.0.1"
        description: "Optional property to describe the version of the scanner registration"
      health:
        type: "string"
        example: "healthy"
        description: "Indicate the healthy of the registration"
        default: ""
    description: "Registration represents a named configuration for invoking a scanner\
      \ via its adapter.\n"
    example:
      skip_certVerify: false
      adapter: "Trivy"
      create_time: "2000-01-23T04:56:07.000+00:00"
      auth: "Bearer"
      description: "A free-to-use tool that scans container images for package vulnerabilities.\n"
      health: "healthy"
      is_default: false
      uuid: "uuid"
      version: "1.0.1"
      url: "http://harbor-scanner-trivy:8080"
      update_time: "2000-01-23T04:56:07.000+00:00"
      vendor: "CentOS"
      name: "Trivy"
      disabled: false
      use_internal_addr: false
      access_credential: "Bearer: JWTTOKENGOESHERE"
  ScannerRegistrationReq:
    type: "object"
    required:
    - "name"
    - "url"
    properties:
      name:
        type: "string"
        example: "Trivy"
        description: "The name of this registration"
      description:
        type: "string"
        example: "A free-to-use tool that scans container images for package vulnerabilities.\n"
        description: "An optional description of this registration."
      url:
        type: "string"
        format: "uri"
        example: "http://harbor-scanner-trivy:8080"
        description: "A base URL of the scanner adapter."
      auth:
        type: "string"
        example: "Bearer"
        description: "Specify what authentication approach is adopted for the HTTP\
          \ communications.\nSupported types Basic\", \"Bearer\" and api key header\
          \ \"X-ScannerAdapter-API-Key\"\n"
      access_credential:
        type: "string"
        example: "Bearer: JWTTOKENGOESHERE"
        description: "An optional value of the HTTP Authorization header sent with\
          \ each request to the Scanner Adapter API.\n"
      skip_certVerify:
        type: "boolean"
        description: "Indicate if skip the certificate verification when sending HTTP\
          \ requests"
        default: false
      use_internal_addr:
        type: "boolean"
        description: "Indicate whether use internal registry addr for the scanner\
          \ to pull content or not"
        default: false
      disabled:
        type: "boolean"
        description: "Indicate whether the registration is enabled or not"
        default: false
    example:
      skip_certVerify: false
      auth: "Bearer"
      name: "Trivy"
      description: "A free-to-use tool that scans container images for package vulnerabilities.\n"
      disabled: false
      use_internal_addr: false
      url: "http://harbor-scanner-trivy:8080"
      access_credential: "Bearer: JWTTOKENGOESHERE"
  ScannerRegistrationSettings:
    type: "object"
    required:
    - "name"
    - "url"
    properties:
      name:
        type: "string"
        example: "Trivy"
        description: "The name of this registration"
      url:
        type: "string"
        format: "uri"
        example: "http://harbor-scanner-trivy:8080"
        description: "A base URL of the scanner adapter."
      auth:
        type: "string"
        description: "Specify what authentication approach is adopted for the HTTP\
          \ communications.\nSupported types Basic\", \"Bearer\" and api key header\
          \ \"X-ScannerAdapter-API-Key\"\n"
        default: ""
      access_credential:
        type: "string"
        example: "Bearer: JWTTOKENGOESHERE"
        description: "An optional value of the HTTP Authorization header sent with\
          \ each request to the Scanner Adapter API.\n"
    example:
      auth: "auth"
      name: "Trivy"
      url: "http://harbor-scanner-trivy:8080"
      access_credential: "Bearer: JWTTOKENGOESHERE"
  IsDefault:
    type: "object"
    properties:
      is_default:
        type: "boolean"
        description: "A flag indicating whether a scanner registration is default."
    example:
      is_default: true
  ScannerCapability:
    type: "object"
    properties:
      consumes_mime_types:
        type: "array"
        items:
          type: "string"
          example: "application/vnd.docker.distribution.manifest.v2+json"
      produces_mime_types:
        type: "array"
        items:
          type: "string"
          example: "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
    example:
      consumes_mime_types:
      - "application/vnd.docker.distribution.manifest.v2+json"
      - "application/vnd.docker.distribution.manifest.v2+json"
      produces_mime_types:
      - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
      - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
  ScannerAdapterMetadata:
    type: "object"
    properties:
      scanner:
        $ref: "#/definitions/Scanner"
      capabilities:
        type: "array"
        items:
          $ref: "#/definitions/ScannerCapability"
      properties:
        type: "object"
        example:
          harbor.scanner-adapter/registry-authorization-type: "Bearer"
        additionalProperties:
          type: "string"
    description: "The metadata info of the scanner adapter"
    example:
      capabilities:
      - consumes_mime_types:
        - "application/vnd.docker.distribution.manifest.v2+json"
        - "application/vnd.docker.distribution.manifest.v2+json"
        produces_mime_types:
        - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
        - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
      - consumes_mime_types:
        - "application/vnd.docker.distribution.manifest.v2+json"
        - "application/vnd.docker.distribution.manifest.v2+json"
        produces_mime_types:
        - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
        - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
      scanner:
        vendor: "Aqua Security"
        name: "Trivy"
        version: "v0.9.1"
      properties:
        harbor.scanner-adapter/registry-authorization-type: "Bearer"
  ImmutableRule:
    type: "object"
    properties:
      id:
        type: "integer"
      priority:
        type: "integer"
      disabled:
        type: "boolean"
      action:
        type: "string"
      template:
        type: "string"
      params:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
      tag_selectors:
        type: "array"
        items:
          $ref: "#/definitions/ImmutableSelector"
      scope_selectors:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/ImmutableSelector"
    example:
      template: "template"
      tag_selectors:
      - kind: "kind"
        pattern: "pattern"
        extras: "extras"
        decoration: "decoration"
      - kind: "kind"
        pattern: "pattern"
        extras: "extras"
        decoration: "decoration"
      scope_selectors:
        key:
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
      action: "action"
      disabled: true
      id: 0
      priority: 6
      params:
        key: "{}"
  ImmutableSelector:
    type: "object"
    properties:
      kind:
        type: "string"
      decoration:
        type: "string"
      pattern:
        type: "string"
      extras:
        type: "string"
    example:
      kind: "kind"
      pattern: "pattern"
      extras: "extras"
      decoration: "decoration"
  LdapConf:
    type: "object"
    properties:
      ldap_url:
        type: "string"
        description: "The url of ldap service."
      ldap_search_dn:
        type: "string"
        description: "The search dn of ldap service."
      ldap_search_password:
        type: "string"
        description: "The search password of ldap service."
      ldap_base_dn:
        type: "string"
        description: "The base dn of ldap service."
      ldap_filter:
        type: "string"
        description: "The serach filter of ldap service."
      ldap_uid:
        type: "string"
        description: "The serach uid from ldap service attributes."
      ldap_scope:
        type: "integer"
        format: "int64"
        description: "The serach scope of ldap service."
      ldap_connection_timeout:
        type: "integer"
        format: "int64"
        description: "The connect timeout of ldap service(second)."
      ldap_verify_cert:
        type: "boolean"
        description: "Verify Ldap server certificate."
    description: "The ldap configure properties"
    example:
      ldap_search_dn: "ldap_search_dn"
      ldap_uid: "ldap_uid"
      ldap_filter: "ldap_filter"
      ldap_base_dn: "ldap_base_dn"
      ldap_url: "ldap_url"
      ldap_search_password: "ldap_search_password"
      ldap_connection_timeout: 6
      ldap_verify_cert: true
      ldap_scope: 0
  LdapPingResult:
    type: "object"
    properties:
      success:
        type: "boolean"
        description: "Test success"
      message:
        type: "string"
        description: "The ping operation output message."
    description: "The ldap ping result"
    example:
      success: true
      message: "message"
  LdapImportUsers:
    type: "object"
    properties:
      ldap_uid_list:
        type: "array"
        description: "selected uid list"
        items:
          type: "string"
    example:
      ldap_uid_list:
      - "ldap_uid_list"
      - "ldap_uid_list"
  LdapFailedImportUser:
    type: "object"
    properties:
      uid:
        type: "string"
        description: "the uid can't add to system."
      error:
        type: "string"
        description: "fail reason."
  LdapUser:
    type: "object"
    properties:
      username:
        type: "string"
        description: "ldap username."
      realname:
        type: "string"
        description: "The user realname from \"uid\" or \"cn\" attribute."
      email:
        type: "string"
        description: "The user email address from \"mail\" or \"email\" attribute."
    example:
      email: "email"
      username: "username"
      realname: "realname"
  UserGroup:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of the user group"
      group_name:
        type: "string"
        description: "The name of the user group"
      group_type:
        type: "integer"
        description: "The group type, 1 for LDAP group, 2 for HTTP group."
      ldap_group_dn:
        type: "string"
        description: "The DN of the LDAP group if group type is 1 (LDAP group)."
    example:
      group_name: "group_name"
      ldap_group_dn: "ldap_group_dn"
      id: 0
      group_type: 6
  SupportedWebhookEventTypes:
    type: "object"
    properties:
      event_type:
        type: "array"
        items:
          $ref: "#/definitions/EventType"
      notify_type:
        type: "array"
        items:
          $ref: "#/definitions/NotifyType"
    description: "Supportted webhook event types and notify types."
    example:
      notify_type:
      - "http"
      - "http"
      event_type:
      - "pullImage"
      - "pullImage"
  EventType:
    type: "string"
    description: "Webhook supportted event type."
    example: "pullImage"
  NotifyType:
    type: "string"
    description: "Webhook supportted notify type."
    example: "http"
  WebhookTargetObject:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The webhook target notify type."
      address:
        type: "string"
        description: "The webhook target address."
      auth_header:
        type: "string"
        description: "The webhook auth header."
      skip_cert_verify:
        type: "boolean"
        description: "Whether or not to skip cert verify."
    description: "The webhook policy target object."
    example:
      address: "address"
      skip_cert_verify: true
      type: "type"
      auth_header: "auth_header"
  WebhookPolicy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The webhook policy ID."
      name:
        type: "string"
        description: "The name of webhook policy."
      description:
        type: "string"
        description: "The description of webhook policy."
      project_id:
        type: "integer"
        description: "The project ID of webhook policy."
      targets:
        type: "array"
        items:
          $ref: "#/definitions/WebhookTargetObject"
      event_types:
        type: "array"
        items:
          type: "string"
      creator:
        type: "string"
        description: "The creator of the webhook policy."
      creation_time:
        type: "string"
        format: "date-time"
        description: "The create time of the webhook policy."
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of the webhook policy."
      enabled:
        type: "boolean"
        description: "Whether the webhook policy is enabled or not."
        x-omitempty: false
    description: "The webhook policy object"
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      creator: "creator"
      update_time: "2000-01-23T04:56:07.000+00:00"
      event_types:
      - "event_types"
      - "event_types"
      project_id: 6
      name: "name"
      description: "description"
      id: 0
      targets:
      - address: "address"
        skip_cert_verify: true
        type: "type"
        auth_header: "auth_header"
      - address: "address"
        skip_cert_verify: true
        type: "type"
        auth_header: "auth_header"
      enabled: true
  WebhookLastTrigger:
    type: "object"
    properties:
      policy_name:
        type: "string"
        description: "The webhook policy name."
      event_type:
        type: "string"
        description: "The webhook event type."
      enabled:
        type: "boolean"
        description: "Whether or not the webhook policy enabled."
      creation_time:
        type: "string"
        format: "date-time"
        description: "The creation time of webhook policy."
      last_trigger_time:
        type: "string"
        format: "date-time"
        description: "The last trigger time of webhook policy."
    description: "The webhook policy and last trigger time group by event type."
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      event_type: "event_type"
      policy_name: "policy_name"
      last_trigger_time: "2000-01-23T04:56:07.000+00:00"
      enabled: true
  WebhookJob:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The webhook job ID."
      policy_id:
        type: "integer"
        format: "int64"
        description: "The webhook policy ID."
      event_type:
        type: "string"
        description: "The webhook job event type."
      notify_type:
        type: "string"
        description: "The webhook job notify type."
      status:
        type: "string"
        description: "The webhook job status."
      job_detail:
        type: "string"
        description: "The webhook job notify detailed data."
      creation_time:
        type: "string"
        format: "date-time"
        description: "The webhook job creation time."
      update_time:
        type: "string"
        format: "date-time"
        description: "The webhook job update time."
    description: "The webhook job."
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      notify_type: "notify_type"
      job_detail: "job_detail"
      update_time: "2000-01-23T04:56:07.000+00:00"
      event_type: "event_type"
      policy_id: 6
      id: 0
      status: "status"
  InternalConfigurationsResponse:
    type: "object"
    x-go-type:
      type: "InternalCfg"
      import:
        package: "github.com/goharbor/harbor/src/lib/config"
  ConfigurationsResponse:
    type: "object"
    properties:
      auth_mode:
        description: "The auth mode of current system, such as \"db_auth\", \"ldap_auth\"\
          , \"oidc_auth\""
        $ref: "#/definitions/StringConfigItem"
      email_from:
        description: "The sender name for Email notification."
        $ref: "#/definitions/StringConfigItem"
      email_host:
        description: "The hostname of SMTP server that sends Email notification."
        $ref: "#/definitions/StringConfigItem"
      email_identity:
        description: "By default it's empty so the email_username is picked"
        $ref: "#/definitions/StringConfigItem"
      email_insecure:
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the email server."
        $ref: "#/definitions/BoolConfigItem"
      email_port:
        description: "The port of SMTP server"
        $ref: "#/definitions/IntegerConfigItem"
      email_ssl:
        description: "When it''s set to true the system will access Email server via\
          \ TLS by default.  If it''s set to false, it still will handle \"STARTTLS\"\
          \ from server side."
        $ref: "#/definitions/BoolConfigItem"
      email_username:
        description: "The username for authenticate against SMTP server"
        $ref: "#/definitions/StringConfigItem"
      ldap_base_dn:
        description: "The Base DN for LDAP binding."
        $ref: "#/definitions/StringConfigItem"
      ldap_filter:
        description: "The filter for LDAP search"
        $ref: "#/definitions/StringConfigItem"
      ldap_group_base_dn:
        description: "The base DN to search LDAP group."
        $ref: "#/definitions/StringConfigItem"
      ldap_group_admin_dn:
        description: "Specify the ldap group which have the same privilege with Harbor\
          \ admin"
        $ref: "#/definitions/StringConfigItem"
      ldap_group_attribute_name:
        description: "The attribute which is used as identity of the LDAP group, default\
          \ is cn.'"
        $ref: "#/definitions/StringConfigItem"
      ldap_group_search_filter:
        description: "The filter to search the ldap group"
        $ref: "#/definitions/StringConfigItem"
      ldap_group_search_scope:
        description: "The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,\
          \ 2-LDAP_SCOPE_SUBTREE''"
        $ref: "#/definitions/IntegerConfigItem"
      ldap_scope:
        description: "The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,\
          \ 2-LDAP_SCOPE_SUBTREE'"
        $ref: "#/definitions/IntegerConfigItem"
      ldap_search_dn:
        description: "The DN of the user to do the search."
        $ref: "#/definitions/StringConfigItem"
      ldap_timeout:
        description: "Timeout in seconds for connection to LDAP server"
        $ref: "#/definitions/IntegerConfigItem"
      ldap_uid:
        description: "The attribute which is used as identity for the LDAP binding,\
          \ such as \"CN\" or \"SAMAccountname\""
        $ref: "#/definitions/StringConfigItem"
      ldap_url:
        description: "The URL of LDAP server"
        $ref: "#/definitions/StringConfigItem"
      ldap_verify_cert:
        description: "Whether verify your OIDC server certificate, disable it if your\
          \ OIDC server is hosted via self-hosted certificate."
        $ref: "#/definitions/BoolConfigItem"
      ldap_group_membership_attribute:
        description: "The user attribute to identify the group membership"
        $ref: "#/definitions/StringConfigItem"
      project_creation_restriction:
        description: "Indicate who can create projects, it could be ''adminonly''\
          \ or ''everyone''."
        $ref: "#/definitions/StringConfigItem"
      read_only:
        description: "The flag to indicate whether Harbor is in readonly mode."
        $ref: "#/definitions/BoolConfigItem"
      self_registration:
        description: "Whether the Harbor instance supports self-registration.  If\
          \ it''s set to false, admin need to add user to the instance."
        $ref: "#/definitions/BoolConfigItem"
      token_expiration:
        description: "The expiration time of the token for internal Registry, in minutes."
        $ref: "#/definitions/IntegerConfigItem"
      uaa_client_id:
        description: "The client id of UAA"
        $ref: "#/definitions/StringConfigItem"
      uaa_client_secret:
        description: "The client secret of the UAA"
        $ref: "#/definitions/StringConfigItem"
      uaa_endpoint:
        description: "The endpoint of the UAA"
        $ref: "#/definitions/StringConfigItem"
      uaa_verify_cert:
        description: "Verify the certificate in UAA server"
        $ref: "#/definitions/BoolConfigItem"
      http_authproxy_endpoint:
        description: "The endpoint of the HTTP auth"
        $ref: "#/definitions/StringConfigItem"
      http_authproxy_tokenreview_endpoint:
        description: "The token review endpoint"
        $ref: "#/definitions/StringConfigItem"
      http_authproxy_admin_groups:
        description: "The group which has the harbor admin privileges"
        $ref: "#/definitions/StringConfigItem"
      http_authproxy_admin_usernames:
        description: "The usernames which has the harbor admin privileges"
        $ref: "#/definitions/StringConfigItem"
      http_authproxy_verify_cert:
        description: "Verify the HTTP auth provider's certificate"
        $ref: "#/definitions/BoolConfigItem"
      http_authproxy_skip_search:
        description: "Search user before onboard"
        $ref: "#/definitions/BoolConfigItem"
      http_authproxy_server_certificate:
        description: "The certificate of the HTTP auth provider"
        $ref: "#/definitions/StringConfigItem"
      oidc_name:
        description: "The OIDC provider name"
        $ref: "#/definitions/StringConfigItem"
      oidc_endpoint:
        description: "The endpoint of the OIDC provider"
        $ref: "#/definitions/StringConfigItem"
      oidc_client_id:
        description: "The client ID of the OIDC provider"
        $ref: "#/definitions/StringConfigItem"
      oidc_groups_claim:
        description: "The attribute claims the group name"
        $ref: "#/definitions/StringConfigItem"
      oidc_admin_group:
        description: "The OIDC group which has the harbor admin privileges"
        $ref: "#/definitions/StringConfigItem"
      oidc_scope:
        description: "The scope of the OIDC provider"
        $ref: "#/definitions/StringConfigItem"
      oidc_user_claim:
        description: "The attribute claims the username"
        $ref: "#/definitions/StringConfigItem"
      oidc_verify_cert:
        description: "Verify the OIDC provider's certificate'"
        $ref: "#/definitions/BoolConfigItem"
      oidc_auto_onboard:
        description: "Auto onboard the OIDC user"
        $ref: "#/definitions/BoolConfigItem"
      oidc_extra_redirect_parms:
        description: "Extra parameters to add when redirect request to OIDC provider"
        $ref: "#/definitions/StringConfigItem"
      robot_token_duration:
        description: "The robot account token duration in days"
        $ref: "#/definitions/IntegerConfigItem"
      robot_name_prefix:
        description: "The rebot account name prefix"
        $ref: "#/definitions/StringConfigItem"
      notification_enable:
        description: "Enable notification"
        $ref: "#/definitions/BoolConfigItem"
      quota_per_project_enable:
        description: "Enable quota per project"
        $ref: "#/definitions/BoolConfigItem"
      storage_per_project:
        description: "The storage quota per project"
        $ref: "#/definitions/IntegerConfigItem"
      scan_all_policy:
        $ref: "#/definitions/ConfigurationsResponse_scan_all_policy"
    example:
      oidc_groups_claim:
        editable: true
        value: "value"
      email_ssl:
        editable: true
        value: true
      notification_enable:
        editable: true
        value: true
      ldap_timeout:
        editable: true
        value: 0
      ldap_filter:
        editable: true
        value: "value"
      ldap_group_admin_dn:
        editable: true
        value: "value"
      ldap_group_membership_attribute:
        editable: true
        value: "value"
      http_authproxy_verify_cert:
        editable: true
        value: true
      oidc_admin_group:
        editable: true
        value: "value"
      email_insecure:
        editable: true
        value: true
      oidc_verify_cert:
        editable: true
        value: true
      read_only:
        editable: true
        value: true
      ldap_group_attribute_name:
        editable: true
        value: "value"
      ldap_url:
        editable: true
        value: "value"
      robot_name_prefix:
        editable: true
        value: "value"
      ldap_group_search_filter:
        editable: true
        value: "value"
      self_registration:
        editable: true
        value: true
      uaa_client_secret:
        editable: true
        value: "value"
      oidc_user_claim:
        editable: true
        value: "value"
      oidc_client_id:
        editable: true
        value: "value"
      oidc_endpoint:
        editable: true
        value: "value"
      scan_all_policy:
        parameter:
          daily_time: 6
        type: "type"
      email_identity:
        editable: true
        value: "value"
      ldap_search_dn:
        editable: true
        value: "value"
      http_authproxy_skip_search:
        editable: true
        value: true
      uaa_client_id:
        editable: true
        value: "value"
      http_authproxy_endpoint:
        editable: true
        value: "value"
      http_authproxy_admin_groups:
        editable: true
        value: "value"
      auth_mode:
        editable: true
        value: "value"
      ldap_verify_cert:
        editable: true
        value: true
      ldap_group_base_dn:
        editable: true
        value: "value"
      email_port:
        editable: true
        value: 0
      http_authproxy_tokenreview_endpoint:
        editable: true
        value: "value"
      oidc_extra_redirect_parms:
        editable: true
        value: "value"
      token_expiration:
        editable: true
        value: 0
      ldap_scope:
        editable: true
        value: 0
      http_authproxy_admin_usernames:
        editable: true
        value: "value"
      oidc_name:
        editable: true
        value: "value"
      uaa_endpoint:
        editable: true
        value: "value"
      email_username:
        editable: true
        value: "value"
      ldap_base_dn:
        editable: true
        value: "value"
      ldap_group_search_scope:
        editable: true
        value: 0
      oidc_scope:
        editable: true
        value: "value"
      project_creation_restriction:
        editable: true
        value: "value"
      storage_per_project:
        editable: true
        value: 0
      quota_per_project_enable:
        editable: true
        value: true
      oidc_auto_onboard:
        editable: true
        value: true
      ldap_uid:
        editable: true
        value: "value"
      http_authproxy_server_certificate:
        editable: true
        value: "value"
      robot_token_duration:
        editable: true
        value: 0
      uaa_verify_cert:
        editable: true
        value: true
      email_from:
        editable: true
        value: "value"
      email_host:
        editable: true
        value: "value"
  Configurations:
    type: "object"
    properties:
      auth_mode:
        type: "string"
        description: "The auth mode of current system, such as \"db_auth\", \"ldap_auth\"\
          , \"oidc_auth\""
        x-omitempty: true
        x-isnullable: true
      email_from:
        type: "string"
        description: "The sender name for Email notification."
        x-omitempty: true
        x-isnullable: true
      email_host:
        type: "string"
        description: "The hostname of SMTP server that sends Email notification."
        x-omitempty: true
        x-isnullable: true
      email_identity:
        type: "string"
        description: "By default it's empty so the email_username is picked"
        x-omitempty: true
        x-isnullable: true
      email_insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the email server."
        x-omitempty: true
        x-isnullable: true
      email_password:
        type: "string"
        description: "Email password"
        x-omitempty: true
        x-isnullable: true
      email_port:
        type: "integer"
        description: "The port of SMTP server"
        x-omitempty: true
        x-isnullable: true
      email_ssl:
        type: "boolean"
        description: "When it''s set to true the system will access Email server via\
          \ TLS by default.  If it''s set to false, it still will handle \"STARTTLS\"\
          \ from server side."
        x-omitempty: true
        x-isnullable: true
      email_username:
        type: "string"
        description: "The username for authenticate against SMTP server"
        x-omitempty: true
        x-isnullable: true
      ldap_base_dn:
        type: "string"
        description: "The Base DN for LDAP binding."
        x-omitempty: true
        x-isnullable: true
      ldap_filter:
        type: "string"
        description: "The filter for LDAP search"
        x-omitempty: true
        x-isnullable: true
      ldap_group_base_dn:
        type: "string"
        description: "The base DN to search LDAP group."
        x-omitempty: true
        x-isnullable: true
      ldap_group_admin_dn:
        type: "string"
        description: "Specify the ldap group which have the same privilege with Harbor\
          \ admin"
        x-omitempty: true
        x-isnullable: true
      ldap_group_attribute_name:
        type: "string"
        description: "The attribute which is used as identity of the LDAP group, default\
          \ is cn.'"
        x-omitempty: true
        x-isnullable: true
      ldap_group_search_filter:
        type: "string"
        description: "The filter to search the ldap group"
        x-omitempty: true
        x-isnullable: true
      ldap_group_search_scope:
        type: "integer"
        description: "The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,\
          \ 2-LDAP_SCOPE_SUBTREE''"
        x-omitempty: true
        x-isnullable: true
      ldap_scope:
        type: "integer"
        description: "The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,\
          \ 2-LDAP_SCOPE_SUBTREE'"
        x-omitempty: true
        x-isnullable: true
      ldap_search_dn:
        type: "string"
        description: "The DN of the user to do the search."
        x-omitempty: true
        x-isnullable: true
      ldap_search_password:
        type: "string"
        description: "The password of the ldap search dn"
        x-omitempty: true
        x-isnullable: true
      ldap_timeout:
        type: "integer"
        description: "Timeout in seconds for connection to LDAP server"
        x-omitempty: true
        x-isnullable: true
      ldap_uid:
        type: "string"
        description: "The attribute which is used as identity for the LDAP binding,\
          \ such as \"CN\" or \"SAMAccountname\""
        x-omitempty: true
        x-isnullable: true
      ldap_url:
        type: "string"
        description: "The URL of LDAP server"
        x-omitempty: true
        x-isnullable: true
      ldap_verify_cert:
        type: "boolean"
        description: "Whether verify your OIDC server certificate, disable it if your\
          \ OIDC server is hosted via self-hosted certificate."
        x-omitempty: true
        x-isnullable: true
      ldap_group_membership_attribute:
        type: "string"
        description: "The user attribute to identify the group membership"
        x-omitempty: true
        x-isnullable: true
      project_creation_restriction:
        type: "string"
        description: "Indicate who can create projects, it could be ''adminonly''\
          \ or ''everyone''."
        x-omitempty: true
        x-isnullable: true
      read_only:
        type: "boolean"
        description: "The flag to indicate whether Harbor is in readonly mode."
        x-omitempty: true
        x-isnullable: true
      self_registration:
        type: "boolean"
        description: "Whether the Harbor instance supports self-registration.  If\
          \ it''s set to false, admin need to add user to the instance."
        x-omitempty: true
        x-isnullable: true
      token_expiration:
        type: "integer"
        description: "The expiration time of the token for internal Registry, in minutes."
        x-omitempty: true
        x-isnullable: true
      uaa_client_id:
        type: "string"
        description: "The client id of UAA"
        x-omitempty: true
        x-isnullable: true
      uaa_client_secret:
        type: "string"
        description: "The client secret of the UAA"
        x-omitempty: true
        x-isnullable: true
      uaa_endpoint:
        type: "string"
        description: "The endpoint of the UAA"
        x-omitempty: true
        x-isnullable: true
      uaa_verify_cert:
        type: "boolean"
        description: "Verify the certificate in UAA server"
        x-omitempty: true
        x-isnullable: true
      http_authproxy_endpoint:
        type: "string"
        description: "The endpoint of the HTTP auth"
        x-omitempty: true
        x-isnullable: true
      http_authproxy_tokenreview_endpoint:
        type: "string"
        description: "The token review endpoint"
        x-omitempty: true
        x-isnullable: true
      http_authproxy_admin_groups:
        type: "string"
        description: "The group which has the harbor admin privileges"
        x-omitempty: true
        x-isnullable: true
      http_authproxy_admin_usernames:
        type: "string"
        description: "The username which has the harbor admin privileges"
        x-omitempty: true
        x-isnullable: true
      http_authproxy_verify_cert:
        type: "boolean"
        description: "Verify the HTTP auth provider's certificate"
        x-omitempty: true
        x-isnullable: true
      http_authproxy_skip_search:
        type: "boolean"
        description: "Search user before onboard"
        x-omitempty: true
        x-isnullable: true
      http_authproxy_server_certificate:
        type: "string"
        description: "The certificate of the HTTP auth provider"
        x-omitempty: true
        x-isnullable: true
      oidc_name:
        type: "string"
        description: "The OIDC provider name"
        x-omitempty: true
        x-isnullable: true
      oidc_endpoint:
        type: "string"
        description: "The endpoint of the OIDC provider"
        x-omitempty: true
        x-isnullable: true
      oidc_client_id:
        type: "string"
        description: "The client ID of the OIDC provider"
        x-omitempty: true
        x-isnullable: true
      oidc_client_secret:
        type: "string"
        description: "The OIDC provider secret"
        x-omitempty: true
        x-isnullable: true
      oidc_groups_claim:
        type: "string"
        description: "The attribute claims the group name"
        x-omitempty: true
        x-isnullable: true
      oidc_admin_group:
        type: "string"
        description: "The OIDC group which has the harbor admin privileges"
        x-omitempty: true
        x-isnullable: true
      oidc_scope:
        type: "string"
        description: "The scope of the OIDC provider"
        x-omitempty: true
        x-isnullable: true
      oidc_user_claim:
        type: "string"
        description: "The attribute claims the username"
        x-omitempty: true
        x-isnullable: true
      oidc_verify_cert:
        type: "boolean"
        description: "Verify the OIDC provider's certificate'"
        x-omitempty: true
        x-isnullable: true
      oidc_auto_onboard:
        type: "boolean"
        description: "Auto onboard the OIDC user"
        x-omitempty: true
        x-isnullable: true
      oidc_extra_redirect_parms:
        type: "string"
        description: "Extra parameters to add when redirect request to OIDC provider"
        x-omitempty: true
        x-isnullable: true
      robot_token_duration:
        type: "integer"
        description: "The robot account token duration in days"
        x-omitempty: true
        x-isnullable: true
      robot_name_prefix:
        type: "string"
        description: "The rebot account name prefix"
        x-omitempty: true
        x-isnullable: true
      notification_enable:
        type: "boolean"
        description: "Enable notification"
        x-omitempty: true
        x-isnullable: true
      quota_per_project_enable:
        type: "boolean"
        description: "Enable quota per project"
        x-omitempty: true
        x-isnullable: true
      storage_per_project:
        type: "integer"
        description: "The storage quota per project"
        x-omitempty: true
        x-isnullable: true
    example:
      oidc_groups_claim: "oidc_groups_claim"
      email_ssl: true
      notification_enable: true
      ldap_timeout: 5
      ldap_filter: "ldap_filter"
      ldap_group_admin_dn: "ldap_group_admin_dn"
      email_password: "email_password"
      ldap_group_membership_attribute: "ldap_group_membership_attribute"
      http_authproxy_verify_cert: true
      oidc_admin_group: "oidc_admin_group"
      email_insecure: true
      oidc_verify_cert: true
      read_only: true
      ldap_group_attribute_name: "ldap_group_attribute_name"
      ldap_url: "ldap_url"
      robot_name_prefix: "robot_name_prefix"
      ldap_group_search_filter: "ldap_group_search_filter"
      self_registration: true
      uaa_client_secret: "uaa_client_secret"
      oidc_user_claim: "oidc_user_claim"
      oidc_client_id: "oidc_client_id"
      ldap_search_password: "ldap_search_password"
      oidc_endpoint: "oidc_endpoint"
      email_identity: "email_identity"
      ldap_search_dn: "ldap_search_dn"
      http_authproxy_skip_search: true
      uaa_client_id: "uaa_client_id"
      http_authproxy_endpoint: "http_authproxy_endpoint"
      http_authproxy_admin_groups: "http_authproxy_admin_groups"
      auth_mode: "auth_mode"
      ldap_verify_cert: true
      ldap_group_base_dn: "ldap_group_base_dn"
      email_port: 0
      http_authproxy_tokenreview_endpoint: "http_authproxy_tokenreview_endpoint"
      oidc_extra_redirect_parms: "oidc_extra_redirect_parms"
      token_expiration: 5
      ldap_scope: 1
      http_authproxy_admin_usernames: "http_authproxy_admin_usernames"
      oidc_name: "oidc_name"
      uaa_endpoint: "uaa_endpoint"
      email_username: "email_username"
      ldap_base_dn: "ldap_base_dn"
      ldap_group_search_scope: 6
      oidc_scope: "oidc_scope"
      project_creation_restriction: "project_creation_restriction"
      storage_per_project: 7
      oidc_client_secret: "oidc_client_secret"
      quota_per_project_enable: true
      oidc_auto_onboard: true
      ldap_uid: "ldap_uid"
      http_authproxy_server_certificate: "http_authproxy_server_certificate"
      robot_token_duration: 2
      uaa_verify_cert: true
      email_from: "email_from"
      email_host: "email_host"
  StringConfigItem:
    type: "object"
    properties:
      value:
        type: "string"
        description: "The string value of current config item"
        x-omitempty: false
      editable:
        type: "boolean"
        description: "The configure item can be updated or not"
        x-omitempty: false
    example:
      editable: true
      value: "value"
  BoolConfigItem:
    type: "object"
    properties:
      value:
        type: "boolean"
        description: "The boolean value of current config item"
        x-omitempty: false
      editable:
        type: "boolean"
        description: "The configure item can be updated or not"
        x-omitempty: false
    example:
      editable: true
      value: true
  IntegerConfigItem:
    type: "object"
    properties:
      value:
        type: "integer"
        description: "The integer value of current config item"
        x-omitempty: false
      editable:
        type: "boolean"
        description: "The configure item can be updated or not"
        x-omitempty: false
    example:
      editable: true
      value: 0
  ProjectMemberEntity:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "the project member id"
      project_id:
        type: "integer"
        description: "the project id"
      entity_name:
        type: "string"
        description: "the name of the group member."
      role_name:
        type: "string"
        description: "the name of the role"
      role_id:
        type: "integer"
        description: "the role id"
      entity_id:
        type: "integer"
        description: "the id of entity, if the member is a user, it is user_id in\
          \ user table. if the member is a user group, it is the user group's ID in\
          \ user_group table."
      entity_type:
        type: "string"
        description: "the entity's type, u for user entity, g for group entity."
    example:
      role_name: "role_name"
      entity_type: "entity_type"
      project_id: 6
      entity_name: "entity_name"
      role_id: 1
      id: 0
      entity_id: 5
  ProjectMember:
    type: "object"
    properties:
      role_id:
        type: "integer"
        description: "The role id 1 for projectAdmin, 2 for developer, 3 for guest,\
          \ 4 for maintainer"
      member_user:
        $ref: "#/definitions/UserEntity"
      member_group:
        $ref: "#/definitions/UserGroup"
    example:
      role_id: 0
      member_group:
        group_name: "group_name"
        ldap_group_dn: "ldap_group_dn"
        id: 0
        group_type: 6
      member_user:
        user_id: 6
        username: "username"
  RoleRequest:
    type: "object"
    properties:
      role_id:
        type: "integer"
        description: "The role id 1 for projectAdmin, 2 for developer, 3 for guest,\
          \ 4 for maintainer"
    example:
      role_id: 0
  UserEntity:
    type: "object"
    properties:
      user_id:
        type: "integer"
        description: "The ID of the user."
      username:
        type: "string"
        description: "The name of the user."
    example:
      user_id: 6
      username: "username"
  UserProfile:
    type: "object"
    properties:
      email:
        type: "string"
      realname:
        type: "string"
      comment:
        type: "string"
    example:
      comment: "comment"
      email: "email"
      realname: "realname"
  UserCreationReq:
    type: "object"
    properties:
      email:
        type: "string"
        maxLength: 255
      realname:
        type: "string"
      comment:
        type: "string"
      password:
        type: "string"
      username:
        type: "string"
        maxLength: 255
    example:
      password: "password"
      comment: "comment"
      email: "email"
      realname: "realname"
      username: "username"
  OIDCUserInfo:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int"
        description: "the ID of the OIDC info record"
      user_id:
        type: "integer"
        format: "int"
        description: "the ID of the user"
      subiss:
        type: "string"
        description: "the concatenation of sub and issuer in the ID token"
      secret:
        type: "string"
        description: "the secret of the OIDC user that can be used for CLI to push/pull\
          \ artifacts"
      creation_time:
        type: "string"
        format: "date-time"
        description: "The creation time of the OIDC user info record."
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of the OIDC user info record."
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      update_time: "2000-01-23T04:56:07.000+00:00"
      user_id: 1
      subiss: "subiss"
      id: 6
      secret: "secret"
  UserResp:
    type: "object"
    properties:
      email:
        type: "string"
      realname:
        type: "string"
      comment:
        type: "string"
      user_id:
        type: "integer"
        format: "int"
      username:
        type: "string"
      sysadmin_flag:
        type: "boolean"
        x-omitempty: false
      admin_role_in_auth:
        type: "boolean"
        description: "indicate the admin privilege is grant by authenticator (LDAP),\
          \ is always false unless it is the current login user"
        x-omitempty: false
      oidc_user_meta:
        $ref: "#/definitions/OIDCUserInfo"
      creation_time:
        type: "string"
        format: "date-time"
        description: "The creation time of the user."
      update_time:
        type: "string"
        format: "date-time"
        description: "The update time of the user."
    example:
      creation_time: "2000-01-23T04:56:07.000+00:00"
      update_time: "2000-01-23T04:56:07.000+00:00"
      user_id: 0
      sysadmin_flag: true
      comment: "comment"
      admin_role_in_auth: true
      oidc_user_meta:
        creation_time: "2000-01-23T04:56:07.000+00:00"
        update_time: "2000-01-23T04:56:07.000+00:00"
        user_id: 1
        subiss: "subiss"
        id: 6
        secret: "secret"
      email: "email"
      realname: "realname"
      username: "username"
  UserSysAdminFlag:
    type: "object"
    properties:
      sysadmin_flag:
        type: "boolean"
        description: "true-admin, false-not admin."
    example:
      sysadmin_flag: true
  UserSearch:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int"
        description: "The ID of the user."
      username:
        type: "string"
  PasswordReq:
    type: "object"
    properties:
      old_password:
        type: "string"
        description: "The user's existing password."
      new_password:
        type: "string"
        description: "New password for marking as to be updated."
    example:
      old_password: "old_password"
      new_password: "new_password"
  UserSearchRespItem:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int"
        description: "The ID of the user."
      username:
        type: "string"
    example:
      user_id: 0
      username: "username"
  Permission:
    type: "object"
    properties:
      resource:
        type: "string"
        description: "The permission resoruce"
      action:
        type: "string"
        description: "The permission action"
    example:
      resource: "resource"
      action: "action"
  OIDCCliSecretReq:
    type: "object"
    properties:
      secret:
        type: "string"
        description: "The new secret"
  OverallHealthStatus:
    type: "object"
    properties:
      status:
        type: "string"
        description: "The overall health status. It is \"healthy\" only when all the\
          \ components' status are \"healthy\""
      components:
        type: "array"
        items:
          $ref: "#/definitions/ComponentHealthStatus"
    description: "The system health status"
    example:
      components:
      - name: "name"
        error: "error"
        status: "status"
      - name: "name"
        error: "error"
        status: "status"
      status: "status"
  ComponentHealthStatus:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The component name"
      status:
        type: "string"
        description: "The health status of component"
      error:
        type: "string"
        description: "(optional) The error message when the status is \"unhealthy\""
    description: "The health status of component"
    example:
      name: "name"
      error: "error"
      status: "status"
  Statistic:
    type: "object"
    properties:
      private_project_count:
        type: "integer"
        format: "int64"
        description: "The count of the private projects"
        x-omitempty: false
      private_repo_count:
        type: "integer"
        format: "int64"
        description: "The count of the private repositories"
        x-omitempty: false
      public_project_count:
        type: "integer"
        format: "int64"
        description: "The count of the public projects"
        x-omitempty: false
      public_repo_count:
        type: "integer"
        format: "int64"
        description: "The count of the public repositories"
        x-omitempty: false
      total_project_count:
        type: "integer"
        format: "int64"
        description: "The count of the total projects, only be seen by the system\
          \ admin"
        x-omitempty: false
      total_repo_count:
        type: "integer"
        format: "int64"
        description: "The count of the total repositories, only be seen by the system\
          \ admin"
        x-omitempty: false
      total_storage_consumption:
        type: "integer"
        format: "int64"
        description: "The total storage consumption of blobs, only be seen by the\
          \ system admin"
        x-omitempty: false
    example:
      private_project_count: 0
      public_repo_count: 5
      total_repo_count: 2
      total_project_count: 5
      private_repo_count: 6
      public_project_count: 1
      total_storage_consumption: 7
  endpoint:
    type: "object"
    properties:
      url:
        type: "string"
        description: "The URL of OIDC endpoint to be tested."
      verify_cert:
        type: "boolean"
        description: "Whether the certificate should be verified"
  body:
    type: "object"
    properties:
      dry_run:
        type: "boolean"
  body_1:
    type: "object"
    properties:
      action:
        type: "string"
  ConfigurationsResponse_scan_all_policy_parameter:
    type: "object"
    properties:
      daily_time:
        type: "integer"
        description: "The offset in seconds of UTC 0 o'clock, only valid when the\
          \ policy type is \"daily\""
    description: "The parameters of the policy, the values are dependent on the type\
      \ of the policy."
    example:
      daily_time: 6
  ConfigurationsResponse_scan_all_policy:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The type of scan all policy, currently the valid values are\
          \ \"none\" and \"daily\""
      parameter:
        $ref: "#/definitions/ConfigurationsResponse_scan_all_policy_parameter"
    example:
      parameter:
        daily_time: 6
      type: "type"
parameters:
  query:
    name: "q"
    in: "query"
    description: "Query string to query resources. Supported query patterns are \"\
      exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with\
      \ union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1\
      \ v2 v3))\". The value of range and list can be string(enclosed by \" or '),\
      \ integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns\
      \ should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
    required: false
    type: "string"
    x-exportParamName: "Q"
    x-optionalDataType: "String"
  sort:
    name: "sort"
    in: "query"
    description: "Sort the resource list in ascending or descending order. e.g. sort\
      \ by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\""
    required: false
    type: "string"
    x-exportParamName: "Sort"
    x-optionalDataType: "String"
  page:
    name: "page"
    in: "query"
    description: "The page number"
    required: false
    type: "integer"
    default: 1
    format: "int64"
    x-exportParamName: "Page"
    x-optionalDataType: "Int64"
  pageSize:
    name: "page_size"
    in: "query"
    description: "The size of per page"
    required: false
    type: "integer"
    default: 10
    maximum: 100
    format: "int64"
    x-exportParamName: "PageSize"
    x-optionalDataType: "Int64"
  requestId:
    name: "X-Request-Id"
    in: "header"
    description: "An unique ID for the request"
    required: false
    type: "string"
    minLength: 1
    x-exportParamName: "XRequestId"
    x-optionalDataType: "String"
  resourceNameInLocation:
    name: "X-Resource-Name-In-Location"
    in: "header"
    description: "The flag to indicate whether to return the name of the resource\
      \ in Location. When X-Resource-Name-In-Location is true, the Location will return\
      \ the name of the resource."
    required: false
    type: "boolean"
    default: false
    x-exportParamName: "XResourceNameInLocation"
    x-optionalDataType: "Bool"
  isResourceName:
    name: "X-Is-Resource-Name"
    in: "header"
    description: "The flag to indicate whether the parameter which supports both name\
      \ and id in the path is the name of the resource. When the X-Is-Resource-Name\
      \ is false and the parameter can be converted to an integer, the parameter will\
      \ be as an id, otherwise, it will be as a name."
    required: false
    type: "boolean"
    default: false
    x-exportParamName: "XIsResourceName"
    x-optionalDataType: "Bool"
  acceptVulnerabilities:
    name: "X-Accept-Vulnerabilities"
    in: "header"
    description: "A comma-separated lists of MIME types for the scan report or scan\
      \ summary. The first mime type will be used when the report found for it.\n\
      Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json;\
      \ version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'"
    required: false
    type: "string"
    default: "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
    x-exportParamName: "XAcceptVulnerabilities"
    x-optionalDataType: "String"
  projectName:
    name: "project_name"
    in: "path"
    description: "The name of the project"
    required: true
    type: "string"
    x-exportParamName: "ProjectName"
  projectNameOrId:
    name: "project_name_or_id"
    in: "path"
    description: "The name or id of the project"
    required: true
    type: "string"
    x-exportParamName: "ProjectNameOrId"
  repositoryName:
    name: "repository_name"
    in: "path"
    description: "The name of the repository. If it contains slash, encode it with\
      \ URL encoding. e.g. a/b -> a%252Fb"
    required: true
    type: "string"
    x-exportParamName: "RepositoryName"
  reference:
    name: "reference"
    in: "path"
    description: "The reference of the artifact, can be digest or tag"
    required: true
    type: "string"
    x-exportParamName: "Reference"
  digest:
    name: "digest"
    in: "path"
    description: "The digest of the resource"
    required: true
    type: "string"
    x-exportParamName: "Digest"
  tagName:
    name: "tag_name"
    in: "path"
    description: "The name of the tag"
    required: true
    type: "string"
    x-exportParamName: "TagName"
  instanceName:
    name: "preheat_instance_name"
    in: "path"
    description: "Instance Name"
    required: true
    type: "string"
    x-exportParamName: "PreheatInstanceName"
  preheatPolicyName:
    name: "preheat_policy_name"
    in: "path"
    description: "Preheat Policy Name"
    required: true
    type: "string"
    x-exportParamName: "PreheatPolicyName"
  executionId:
    name: "execution_id"
    in: "path"
    description: "Execution ID"
    required: true
    type: "integer"
    x-exportParamName: "ExecutionId"
  taskId:
    name: "task_id"
    in: "path"
    description: "Task ID"
    required: true
    type: "integer"
    x-exportParamName: "TaskId"
  robotId:
    name: "robot_id"
    in: "path"
    description: "Robot ID"
    required: true
    type: "integer"
    x-exportParamName: "RobotId"
  gcId:
    name: "gc_id"
    in: "path"
    description: "The ID of the gc log"
    required: true
    type: "integer"
    format: "int64"
    x-exportParamName: "GcId"
  labelId:
    name: "label_id"
    in: "path"
    description: "Label ID"
    required: true
    type: "integer"
    format: "int64"
    x-exportParamName: "LabelId"
  webhookPolicyId:
    name: "webhook_policy_id"
    in: "path"
    description: "The ID of the webhook policy"
    required: true
    type: "integer"
    format: "int64"
    x-exportParamName: "WebhookPolicyId"
  immutableRuleId:
    name: "immutable_rule_id"
    in: "path"
    description: "The ID of the immutable rule"
    required: true
    type: "integer"
    format: "int64"
    x-exportParamName: "ImmutableRuleId"
responses:
  "200":
    description: "Success"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
  "201":
    description: "Created"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
      Location:
        type: "string"
        description: "The location of the resource"
  "202":
    description: "Accepted"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
  "400":
    description: "Bad request"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
    schema:
      $ref: "#/definitions/Errors"
  "401":
    description: "Unauthorized"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
    schema:
      $ref: "#/definitions/Errors"
  "403":
    description: "Forbidden"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
    schema:
      $ref: "#/definitions/Errors"
  "404":
    description: "Not found"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
    schema:
      $ref: "#/definitions/Errors"
  "405":
    description: "Method not allowed"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
    schema:
      $ref: "#/definitions/Errors"
  "409":
    description: "Conflict"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
    schema:
      $ref: "#/definitions/Errors"
  "412":
    description: "Precondition failed"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
    schema:
      $ref: "#/definitions/Errors"
  "415":
    description: "Unsupported MediaType"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
    schema:
      $ref: "#/definitions/Errors"
  "500":
    description: "Internal server error"
    headers:
      X-Request-Id:
        type: "string"
        description: "The ID of the corresponding request for the response"
    schema:
      $ref: "#/definitions/Errors"
