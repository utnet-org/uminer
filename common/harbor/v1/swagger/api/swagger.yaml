---
swagger: "2.0"
info:
  description: "These APIs provide services for manipulating Harbor project."
  version: "1.4.0"
  title: "Harbor API"
host: "localhost"
basePath: "/api"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
- "text/plain"
paths:
  /search:
    get:
      tags:
      - "Products"
      summary: "Search for projects and repositories"
      description: "The Search endpoint returns information about the projects and\
        \ repositories offered at public status or related to the current logged in\
        \ user. The response includes the project and repository list in a proper\
        \ display order.\n"
      parameters:
      - name: "q"
        in: "query"
        description: "Search parameter for project and repository name."
        required: true
        type: "string"
        x-exportParamName: "Q"
      responses:
        "200":
          description: "An array of search results"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Search"
        "500":
          description: "Unexpected internal errors."
  /projects:
    get:
      tags:
      - "Products"
      summary: "List projects"
      description: "This endpoint returns all projects created by Harbor, and can\
        \ be filtered by project name.\n"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of project."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "public"
        in: "query"
        description: "The project is public or private."
        required: false
        type: "boolean"
        format: "int32"
        x-exportParamName: "Public"
        x-optionalDataType: "Bool"
      - name: "owner"
        in: "query"
        description: "The name of project owner."
        required: false
        type: "string"
        x-exportParamName: "Owner"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page, default is 10, maximum is 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Return all matched projects."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of projects"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        "401":
          description: "User need to log in first."
        "500":
          description: "Internal errors."
    head:
      tags:
      - "Products"
      summary: "Check if the project name user provided already exists."
      description: "This endpoint is used to check if the project name user provided\
        \ already exist.\n"
      parameters:
      - name: "project_name"
        in: "query"
        description: "Project name for checking exists."
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      responses:
        "200":
          description: "Project name exists."
        "401":
          description: "User need to log in first."
        "404":
          description: "Project name does not exist."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create a new project."
      description: "This endpoint is for user to create a new project.\n"
      parameters:
      - in: "body"
        name: "project"
        description: "New created project."
        required: true
        schema:
          $ref: "#/definitions/ProjectReq"
        x-exportParamName: "Project"
      responses:
        "201":
          description: "Project created successfully."
        "400":
          description: "Unsatisfied with constraints of the project creation."
        "401":
          description: "User need to log in first."
        "409":
          description: "Project name already exists."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /projects/{project_id}:
    get:
      tags:
      - "Products"
      summary: "Return specific project detail infomation"
      description: "This endpoint returns specific project information by project\
        \ ID.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project ID for filtering results."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "Return matched project information."
          schema:
            $ref: "#/definitions/Project"
        "401":
          description: "User need to log in first."
        "500":
          description: "Internal errors."
    put:
      tags:
      - "Products"
      summary: "Update properties for a selected project."
      description: "This endpoint is aimed to update the properties of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Selected project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "project"
        description: "Updates of project."
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "Project"
      responses:
        "200":
          description: "Updated project properties successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission to the project."
        "404":
          description: "Project ID does not exist."
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete project by projectID"
      description: "This endpoint is aimed to delete project by project ID.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project ID of project which will be deleted."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "Project is deleted successfully."
        "400":
          description: "Invalid project id."
        "403":
          description: "User need to log in first."
        "404":
          description: "Project does not exist."
        "412":
          description: "Project contains policies, can not be deleted."
        "500":
          description: "Internal errors."
  /projects/{project_id}/logs:
    get:
      tags:
      - "Products"
      summary: "Get access logs accompany with a relevant project."
      description: "This endpoint let user search access logs filtered by operations\
        \ and date time ranges.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "username"
        in: "query"
        description: "Username of the operator."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "repository"
        in: "query"
        description: "The name of repository"
        required: false
        type: "string"
        x-exportParamName: "Repository"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "The name of tag"
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      - name: "operation"
        in: "query"
        description: "The operation"
        required: false
        type: "string"
        x-exportParamName: "Operation"
        x-optionalDataType: "String"
      - name: "begin_timestamp"
        in: "query"
        description: "The begin timestamp"
        required: false
        type: "string"
        x-exportParamName: "BeginTimestamp"
        x-optionalDataType: "String"
      - name: "end_timestamp"
        in: "query"
        description: "The end timestamp"
        required: false
        type: "string"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page, default is 10, maximum is 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Get access log successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of access logs"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccessLog"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "500":
          description: "Unexpected internal errors."
  /projects/{project_id}/metadatas:
    get:
      tags:
      - "Products"
      summary: "Get project metadata."
      description: "This endpoint returns metadata of the project specified by project\
        \ ID.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The ID of project."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "Get metadata successfully."
          schema:
            $ref: "#/definitions/ProjectMetadata"
        "401":
          description: "User need to login first."
        "500":
          description: "Internal server errors."
    post:
      tags:
      - "Products"
      summary: "Add metadata for the project."
      description: "This endpoint is aimed to add metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Selected project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "metadata"
        description: "The metadata of project."
        required: true
        schema:
          $ref: "#/definitions/ProjectMetadata"
        x-exportParamName: "Metadata"
      responses:
        "200":
          description: "Add metadata successfully."
        "400":
          description: "Invalid request."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission to the project."
        "404":
          description: "Project ID does not exist."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Internal server errors."
  /projects/{project_id}/metadatas/{meta_name}:
    get:
      tags:
      - "Products"
      summary: "Get project metadata"
      description: "This endpoint returns specified metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project ID for filtering results."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadat."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        "200":
          description: "Get metadata successfully."
          schema:
            $ref: "#/definitions/ProjectMetadata"
        "401":
          description: "User need to log in first."
        "500":
          description: "Internal server errors."
    put:
      tags:
      - "Products"
      summary: "Update metadata of a project."
      description: "This endpoint is aimed to update the metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The ID of project."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadat."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        "200":
          description: "Updated metadata successfully."
        "400":
          description: "Invalid request."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission to the project."
        "404":
          description: "Project or metadata does not exist."
        "500":
          description: "Internal server errors."
    delete:
      tags:
      - "Products"
      summary: "Delete metadata of a project"
      description: "This endpoint is aimed to delete metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The ID of project."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadat."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        "200":
          description: "Metadata is deleted successfully."
        "400":
          description: "Invalid requst."
        "403":
          description: "User need to log in first."
        "404":
          description: "Project or metadata does not exist."
        "500":
          description: "Internal server errors."
  /projects/{project_id}/members/:
    get:
      tags:
      - "Products"
      summary: "Return a project's relevant role members."
      description: "This endpoint is for user to search a specified project's relevant\
        \ role members.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "Get project's relevant role members successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "Project ID does not exist."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Add project role member accompany with relevant project and user."
      description: "This endpoint is for user to add project role member accompany\
        \ with relevant project and user.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "roles"
        description: "Role members for adding to relevant project. Only one role is\
          \ supported in the role list."
        required: false
        schema:
          $ref: "#/definitions/RoleParam"
        x-exportParamName: "Roles"
      responses:
        "200":
          description: "Role members added to relevant project successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "Project ID or username does not exist."
        "409":
          description: "User has already added as a project role member."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /projects/{project_id}/members/{user_id}:
    get:
      tags:
      - "Products"
      summary: "Return role members accompany with relevant project and user."
      description: "This endpoint is for user to get role members accompany with relevant\
        \ project and user. \n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "user_id"
        in: "path"
        description: "Relevant user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Get project role members successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Role"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "Project ID does not exist."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update project role members accompany with relevant project and user."
      description: "This endpoint is for user to update current project role members\
        \ accompany with relevant project and user.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "user_id"
        in: "path"
        description: "Relevant user ID."
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "roles"
        description: "Updates for roles and username."
        required: false
        schema:
          $ref: "#/definitions/RoleParam"
        x-exportParamName: "Roles"
      responses:
        "200":
          description: "Project role members updated successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "Project ID does not exist."
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete project role members accompany with relevant project and user."
      description: "This endpoint is aimed to remove project role members already\
        \ added to the relevant project and user.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "user_id"
        in: "path"
        description: "Relevant user ID."
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Project role members deleted successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "Project ID does not exist."
        "500":
          description: "Unexpected internal errors."
  /statistics:
    get:
      tags:
      - "Products"
      summary: "Get projects number and repositories number relevant to the user"
      description: "This endpoint is aimed to statistic all of the projects number\
        \ and repositories number relevant to the logined user, also the public projects\
        \ number and repositories number. If the user is admin, he can also get total\
        \ projects number and total repositories number.\n"
      parameters: []
      responses:
        "200":
          description: "Get the projects number and repositories number relevant to\
            \ the user successfully."
          schema:
            $ref: "#/definitions/StatisticMap"
        "401":
          description: "User need to log in first."
        "500":
          description: "Unexpected internal errors."
  /users:
    get:
      tags:
      - "Products"
      summary: "Get registered users of Harbor."
      description: "This endpoint is for user to search registered users, support\
        \ for filtering results with username.Notice, by now this operation is only\
        \ for administrator.\n"
      parameters:
      - name: "username"
        in: "query"
        description: "Username for filtering results."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "email"
        in: "query"
        description: "Email for filtering results."
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Searched for users of Harbor successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Invalid user ID."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Creates a new user account."
      description: "This endpoint is to create a user if the user does not already\
        \ exist.\n"
      parameters:
      - in: "body"
        name: "user"
        description: "New created user."
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "User"
      responses:
        "201":
          description: "User created successfully."
        "400":
          description: "Unsatisfied with constraints of the user creation."
        "403":
          description: "User registration can only be used by admin role user when\
            \ self-registration is off."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /users/current:
    get:
      tags:
      - "Products"
      summary: "Get current user info."
      description: "This endpoint is to get the current user infomation.\n"
      parameters: []
      responses:
        "200":
          description: "Get current user information successfully."
          schema:
            $ref: "#/definitions/User"
        "401":
          description: "User need to log in first."
  /users/{user_id}:
    get:
      tags:
      - "Products"
      summary: "Get a user's profile."
      description: "Get user's profile with user id.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Get user's profile successfully."
        "400":
          description: "Invalid user ID."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "404":
          description: "User ID does not exist."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update a registered user to change his profile."
      description: "This endpoint let a registered user change his profile.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "profile"
        description: "Only email, realname and comment can be modified."
        required: true
        schema:
          $ref: "#/definitions/UserProfile"
        x-exportParamName: "Profile"
      responses:
        "200":
          description: "Updated user's profile successfully."
        "400":
          description: "Invalid user ID."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "404":
          description: "User ID does not exist."
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Mark a registered user as be removed."
      description: "This endpoint let administrator of Harbor mark a registered user\
        \ as\nbe removed.It actually won't be deleted from DB.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User ID for marking as to be removed."
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Marked user as be removed successfully."
        "400":
          description: "Invalid user ID."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "404":
          description: "User ID does not exist."
        "500":
          description: "Unexpected internal errors."
  /users/{user_id}/password:
    put:
      tags:
      - "Products"
      summary: "Change the password on a user that already exists."
      description: "This endpoint is for user to update password. Users with the admin\
        \ role can change any user's password. Guest users can change only their own\
        \ password.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID."
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "password"
        description: "Password to be updated."
        required: true
        schema:
          $ref: "#/definitions/Password"
        x-exportParamName: "Password"
      responses:
        "200":
          description: "Updated password successfully."
        "400":
          description: "Invalid user ID; Old password is blank; New password is blank."
        "401":
          description: "Don't have authority to change password. Please check login\
            \ status."
        "403":
          description: "Old password is not correct."
        "500":
          description: "Unexpected internal errors."
  /users/{user_id}/sysadmin:
    put:
      tags:
      - "Products"
      summary: "Update a registered user to change to be an administrator of Harbor."
      description: "This endpoint let a registered user change to be an administrator\n\
        of Harbor.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "has_admin_role"
        description: "Toggle a user to admin or not."
        required: true
        schema:
          $ref: "#/definitions/HasAdminRole"
        x-exportParamName: "HasAdminRole"
      responses:
        "200":
          description: "Updated user's admin role successfully."
        "400":
          description: "Invalid user ID."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "404":
          description: "User ID does not exist."
        "500":
          description: "Unexpected internal errors."
  /repositories:
    get:
      tags:
      - "Products"
      summary: "Get repositories accompany with relevant project and repo name."
      description: "This endpoint let user search repositories accompanying with relevant\
        \ project ID and repo name.\n"
      parameters:
      - name: "project_id"
        in: "query"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ProjectId"
      - name: "q"
        in: "query"
        description: "Repo name for filtering results."
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page, default is 10, maximum is 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Get repositories successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of repositories"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
        "400":
          description: "Invalid project ID."
        "403":
          description: "Project is not public or current user is irrelevant to the\
            \ repository."
        "404":
          description: "Project ID does not exist."
        "500":
          description: "Unexpected internal errors."
  /repositories/{repo_name}:
    put:
      tags:
      - "Products"
      summary: "Update description of the repository."
      description: "This endpoint is used to update description of the repository.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository which will be deleted."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - in: "body"
        name: "description"
        description: "The description of the repository."
        required: true
        schema:
          $ref: "#/definitions/RepositoryDescription"
        x-exportParamName: "Description"
      responses:
        "200":
          description: "Update successfully."
        "401":
          description: "Unauthorized."
        "403":
          description: "Forbidden."
        "404":
          description: "Repository not found."
    delete:
      tags:
      - "Products"
      summary: "Delete a repository."
      description: "This endpoint let user delete a repository with name.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository which will be deleted."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      responses:
        "200":
          description: "Delete successfully."
        "400":
          description: "Invalid repo_name."
        "401":
          description: "Unauthorized."
        "403":
          description: "Forbidden."
        "404":
          description: "Repository not found."
  /repositories/{repo_name}/tags/{tag}:
    get:
      tags:
      - "Products"
      summary: "Get the tag of the repository."
      description: "This endpoint aims to retrieve the tag of the repository. If deployed\
        \ with Notary, the signature property of response represents whether the image\
        \ is singed or not. If the property is null, the image is unsigned.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Relevant repository name."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "Tag of the repository."
        required: true
        type: "string"
        x-exportParamName: "Tag"
      responses:
        "200":
          description: "Get tag successfully."
          schema:
            $ref: "#/definitions/DetailedTag"
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete a tag in a repository."
      description: "This endpoint let user delete tags with repo name and tag.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository which will be deleted."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "Tag of a repository."
        required: true
        type: "string"
        x-exportParamName: "Tag"
      responses:
        "200":
          description: "Delete tag successfully."
        "400":
          description: "Invalid repo_name."
        "401":
          description: "Unauthorized."
        "403":
          description: "Forbidden."
        "404":
          description: "Repository or tag not found."
  /repositories/{repo_name}/tags:
    get:
      tags:
      - "Products"
      summary: "Get tags of a relevant repository."
      description: "This endpoint aims to retrieve tags from a relevant repository.\
        \ If deployed with Notary, the signature property of response represents whether\
        \ the image is singed or not. If the property is null, the image is unsigned.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Relevant repository name."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      responses:
        "200":
          description: "Get tags successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DetailedTag"
        "500":
          description: "Unexpected internal errors."
  /repositories/{repo_name}/tags/{tag}/manifest:
    get:
      tags:
      - "Products"
      summary: "Get manifests of a relevant repository."
      description: "This endpoint aims to retreive manifests from a relevant repository.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Repository name"
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "Tag name"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      - name: "version"
        in: "query"
        description: "The version of manifest, valid value are \"v1\" and \"v2\",\
          \ default is \"v2\""
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Retrieved manifests from a relevant repository successfully."
          schema:
            $ref: "#/definitions/Manifest"
        "404":
          description: "Retrieved manifests from a relevant repository not found."
        "500":
          description: "Unexpected internal errors."
  /repositories/{repo_name}/tags/{tag}/scan:
    post:
      tags:
      - "Products"
      summary: "Scan the image."
      description: "Trigger jobservice to call Clair API to scan the image identified\
        \ by the repo_name and tag.  Only project admins have permission to scan images\
        \ under the project.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Repository name"
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "Tag name"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      responses:
        "200":
          description: "Successfully created the job to scan image."
        "401":
          description: "User needs to login or call the API with correct credentials."
        "403":
          description: "User doesn't have permission to perform the action."
        "404":
          description: "The image does not exist in Harbor."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "503":
          description: "Harbor is not deployed with Clair."
  /repositories/scanAll:
    post:
      summary: "Scan all images of the registry."
      description: "The server will launch different jobs to scan each image on the\
        \ regsitry, so this is equivalent to calling  the API to scan the image one\
        \ by one in background, so there's no way to track the overall status of the\
        \ \"scan all\" action.  Only system adim has permission to call this API.\
        \  \n"
      parameters:
      - name: "project_id"
        in: "query"
        description: "When this parm is set only the images under the project identified\
          \ by the project_id will be scanned."
        required: false
        type: "integer"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "Int32"
      responses:
        "202":
          description: "The action is successully taken in the background.  If some\
            \ images are failed to scan it will only be reflected in the job status."
        "401":
          description: "User needs to login or call the API with correct credentials."
        "403":
          description: "User doesn't have permission to perform the action."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Failed to initiate the action."
        "503":
          description: "Harbor is not deployed with Clair."
  /repositories/{repo_name}/tags/{tag}/vulnerability/details:
    get:
      tags:
      - "Products"
      summary: "Get vulnerability details of the image."
      description: "Call Clair API to get the vulnerability based on the previous\
        \ successful scan.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Repository name"
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "Tag name"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      responses:
        "200":
          description: "Successfully retrieved the vulnerabilities."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VulnerabilityItem"
        "401":
          description: "User needs to login or call the API with correct credentials."
        "403":
          description: "User doesn't have permission to perform the action."
        "404":
          description: "The image does not exist in Harbor."
        "503":
          description: "Harbor is not deployed with Clair."
  /repositories/{repo_name}/signatures:
    get:
      tags:
      - "Products"
      summary: "Get signature information of a repository"
      description: "This endpoint aims to retrieve signature information of a repository,\
        \ the data is from the nested notary instance of Harbor. If the repository\
        \ does not have any signature information in notary, this API will return\
        \ an empty list with response code 200, instead of 404\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "repository name."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      responses:
        "200":
          description: "Retrieved signatures."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RepoSignature"
        "500":
          description: "Server side error."
  /repositories/top:
    get:
      tags:
      - "Products"
      summary: "Get public repositories which are accessed most."
      description: "This endpoint aims to let users see the most popular public repositories\n"
      parameters:
      - name: "count"
        in: "query"
        description: "The number of the requested public repositories, default is\
          \ 10 if not provided."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Get popular repositories successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
        "400":
          description: "Bad request because of invalid count."
        "500":
          description: "Unexpected internal errors."
  /logs:
    get:
      tags:
      - "Products"
      summary: "Get recent logs of the projects which the user is a member of"
      description: "This endpoint let user see the recent operation logs of the projects\
        \ which he is member of \n"
      parameters:
      - name: "username"
        in: "query"
        description: "Username of the operator."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "repository"
        in: "query"
        description: "The name of repository"
        required: false
        type: "string"
        x-exportParamName: "Repository"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "The name of tag"
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      - name: "operation"
        in: "query"
        description: "The operation"
        required: false
        type: "string"
        x-exportParamName: "Operation"
        x-optionalDataType: "String"
      - name: "begin_timestamp"
        in: "query"
        description: "The begin timestamp"
        required: false
        type: "string"
        x-exportParamName: "BeginTimestamp"
        x-optionalDataType: "String"
      - name: "end_timestamp"
        in: "query"
        description: "The end timestamp"
        required: false
        type: "string"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page, default is 10, maximum is 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Get the required logs successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccessLog"
        "400":
          description: "Bad request because of invalid parameters."
        "401":
          description: "User need to login first."
        "500":
          description: "Unexpected internal errors."
  /jobs/replication:
    get:
      tags:
      - "Products"
      summary: "List filters jobs according to the policy and repository"
      description: "This endpoint let user list filters jobs according to the policy\
        \ and repository. (if start_time and end_time are both null, list jobs of\
        \ last 10 days)\n"
      parameters:
      - name: "policy_id"
        in: "query"
        description: "The ID of the policy that triggered this job."
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "PolicyId"
      - name: "num"
        in: "query"
        description: "The return list length number."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Num"
        x-optionalDataType: "Int32"
      - name: "end_time"
        in: "query"
        description: "The end time of jobs done. (Timestamp)"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Int64"
      - name: "start_time"
        in: "query"
        description: "The start time of jobs. (Timestamp)"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Int64"
      - name: "repository"
        in: "query"
        description: "The respond jobs list filter by repository name."
        required: false
        type: "string"
        x-exportParamName: "Repository"
        x-optionalDataType: "String"
      - name: "status"
        in: "query"
        description: "The respond jobs list filter by status."
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page, default is 10, maximum is 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Get the required logs successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of jobs"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/JobStatus"
        "400":
          description: "Bad request because of invalid parameters."
        "401":
          description: "User need to login first."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update status of jobs. Only stop is supported for now."
      description: "The endpoint is used to stop the replication jobs of a policy.\n"
      parameters:
      - in: "body"
        name: "policyinfo"
        description: "The policy ID and status."
        required: true
        schema:
          $ref: "#/definitions/UpdateJobs"
        x-exportParamName: "Policyinfo"
      responses:
        "200":
          description: "Update the status successfully."
        "400":
          description: "Bad request because of invalid parameters."
        "401":
          description: "User need to login first."
        "403":
          description: "User has no privilege for the operation."
        "404":
          description: "Resource requested does not exist."
        "500":
          description: "Unexpected internal errors."
  /jobs/replication/{id}:
    delete:
      tags:
      - "Products"
      summary: "Delete specific ID job."
      description: "This endpoint is aimed to remove specific ID job from jobservice.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Delete job ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Job deleted successfully."
        "400":
          description: "Job ID is invalid or can't remove this job."
        "401":
          description: "Only admin has this authority."
        "404":
          description: "Project ID does not exist."
        "500":
          description: "Unexpected internal errors."
  /jobs/replication/{id}/log:
    get:
      tags:
      - "Products"
      summary: "Get job logs."
      description: "This endpoint let user search job logs filtered by specific ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Relevant job ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get job log successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "404":
          description: "The specific repository ID's log does not exist."
        "500":
          description: "Unexpected internal errors."
  /jobs/scan/{id}/log:
    get:
      tags:
      - "Products"
      summary: "Get job logs."
      description: "This endpoint let user get scan job logs filtered by specific\
        \ ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Relevant job ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get job log successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "404":
          description: "The specific repository ID's log does not exist."
        "500":
          description: "Unexpected internal errors."
  /policies/replication:
    get:
      tags:
      - "Products"
      summary: "List filters policies by name and project_id"
      description: "This endpoint let user list filters policies by name and project_id,\
        \ if name and project_id are nil, list returns all policies\n"
      parameters:
      - name: "name"
        in: "query"
        description: "The replication's policy name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "project_id"
        in: "query"
        description: "Relevant project ID."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "The page nubmer."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Get policy successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RepPolicy"
        "400":
          description: "Invalid project ID."
        "401":
          description: "User need to log in first."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Post creates a policy"
      description: "This endpoint let user creates a policy, and if it is enabled,\
        \ the replication will be triggered right now.\n"
      parameters:
      - in: "body"
        name: "policyinfo"
        description: "Create new policy."
        required: true
        schema:
          $ref: "#/definitions/RepPolicy"
        x-exportParamName: "Policyinfo"
      responses:
        "201":
          description: "Create policy successfully."
        "400":
          description: "Invalid project ID or target ID."
        "401":
          description: "User need to log in first."
        "409":
          description: "Policy name already used or policy already exists with the\
            \ same project and target."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /policies/replication/{id}:
    get:
      tags:
      - "Products"
      summary: "Get replication policy."
      description: "This endpoint let user search replication policy by specific ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get job policy successfully."
          schema:
            $ref: "#/definitions/RepPolicy"
        "401":
          description: "User need to log in first."
        "404":
          description: "The specific repository ID's policy does not exist."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Put modifies name, description, target and enablement of policy."
      description: "This endpoint let user update policy name, description, target\
        \ and enablement.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "policyupdate"
        description: "Updated properties of the replication policy."
        required: true
        schema:
          $ref: "#/definitions/RepPolicy"
        x-exportParamName: "Policyupdate"
      responses:
        "200":
          description: "Update job policy content successfully."
        "400":
          description: "policy is enabled or target does not exist"
        "401":
          description: "User need to log in first."
        "404":
          description: "The specific repository ID's policy does not exist."
        "409":
          description: "Policy name already used or policy already exists with the\
            \ same project and target."
        "500":
          description: "Unexpected internal errors."
  /replications:
    post:
      tags:
      - "Products"
      summary: "Trigger the replication according to the specified policy."
      description: "This endpoint is used to trigger a replication.\n"
      parameters:
      - in: "body"
        name: "policy ID"
        description: "The ID of replication policy."
        required: true
        schema:
          $ref: "#/definitions/Replication"
        x-exportParamName: "PolicyID"
      responses:
        "200":
          description: "Trigger the replication successfully."
        "401":
          description: "User need to log in first."
        "404":
          description: "The policy does not exist."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /targets:
    get:
      tags:
      - "Products"
      summary: "List filters targets by name."
      description: "This endpoint let user list filters targets by name, if name is\
        \ nil, list returns all targets.\n"
      parameters:
      - name: "name"
        in: "query"
        description: "The replication's target name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get policy successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RepTarget"
        "401":
          description: "User need to log in first."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create a new replication target."
      description: "This endpoint is for user to create a new replication target.\n"
      parameters:
      - in: "body"
        name: "reptarget"
        description: "New created replication target."
        required: true
        schema:
          $ref: "#/definitions/RepTargetPost"
        x-exportParamName: "Reptarget"
      responses:
        "201":
          description: "Replication target created successfully."
        "400":
          description: "Unsatisfied with constraints of the target creation."
        "401":
          description: "User need to log in first."
        "409":
          description: "Replication target name already exists."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /targets/ping:
    post:
      tags:
      - "Products"
      summary: "Ping validates target."
      description: "This endpoint is for ping validates whether the target is reachable\
        \ and whether the credential is valid.\n"
      parameters:
      - in: "body"
        name: "target"
        description: "The target object."
        required: true
        schema:
          $ref: "#/definitions/PingTarget"
        x-exportParamName: "Target"
      responses:
        "200":
          description: "Ping target successfully."
        "400":
          description: "Target id is invalid/ endpoint is needed/ invaild URL/ network\
            \ issue."
        "401":
          description: "User need to log in first or wrong username/password for remote\
            \ target."
        "404":
          description: "Target not found."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /targets/{id}:
    get:
      tags:
      - "Products"
      summary: "Get replication's target."
      description: "This endpoint is for get specific replication's target."
      parameters:
      - name: "id"
        in: "path"
        description: "The replication's target ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get replication's target successfully."
          schema:
            $ref: "#/definitions/RepTarget"
        "401":
          description: "User need to log in first."
        "404":
          description: "Replication's target not found"
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update replication's target."
      description: "This endpoint is for update specific replication's target.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The replication's target ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "repo_target"
        description: "Updates of replication's target."
        required: true
        schema:
          $ref: "#/definitions/PutTarget"
        x-exportParamName: "RepoTarget"
      responses:
        "200":
          description: "Updated replication's target successfully."
        "400":
          description: "The target is associated with policy which is enabled."
        "401":
          description: "User need to log in first."
        "404":
          description: "Target ID does not exist."
        "409":
          description: "Target name or endpoint is already used."
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete specific replication's target."
      description: "This endpoint is for to delete specific replication's target.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The replication's target ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Replication's target deleted successfully."
        "400":
          description: "Replication's target ID is invalid or the target is used by\
            \ policies."
        "401":
          description: "Only admin has this authority."
        "404":
          description: "Replication's target does not exist."
        "500":
          description: "Unexpected internal errors."
  /targets/{id}/policies/:
    get:
      tags:
      - "Products"
      summary: "List the target relevant policies."
      description: "This endpoint list policies filter with specific replication's\
        \ target ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The replication's target ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get relevant policies successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RepPolicy"
        "401":
          description: "User need to log in first."
        "404":
          description: "Replication's target not found"
        "500":
          description: "Unexpected internal errors."
  /internal/syncregistry:
    post:
      tags:
      - "Products"
      summary: "Sync repositories from registry to DB."
      description: "This endpoint is for syncing all repositories of registry with\
        \ database. \n"
      parameters: []
      responses:
        "200":
          description: "Sync repositories successfully."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /systeminfo:
    get:
      tags:
      - "Products"
      summary: "Get general system info"
      description: "This API is for retrieving general system info, this can be called\
        \ by anonymous request.\n"
      parameters: []
      responses:
        "200":
          description: "Get general info successfully."
          schema:
            type: "object"
        "500":
          description: "Unexpected internal error."
  /systeminfo/volumes:
    get:
      tags:
      - "Products"
      summary: "Get system volume info (total/free size)."
      description: "This endpoint is for retrieving system volume info that only provides\
        \ for admin user.\n"
      parameters: []
      responses:
        "200":
          description: "Get system volumes successfully."
          schema:
            type: "object"
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
  /systeminfo/getcert:
    get:
      tags:
      - "Products"
      summary: "Get default root certificate under OVA deployment."
      description: "This endpoint is for downloading a default root certificate that\
        \ only provides for admin user under OVA deployment.\n"
      parameters: []
      responses:
        "200":
          description: "Get default root certificate successfully."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "404":
          description: "Not found the default root certificate."
        "500":
          description: "Unexpected internal errors."
  /ldap/ping:
    post:
      tags:
      - "Products"
      summary: "Ping available ldap service."
      description: "This endpoint ping the available ldap service for test related\
        \ configuration parameters. \n"
      parameters:
      - in: "body"
        name: "ldapconf"
        description: "ldap configuration. support input ldap service configuration.\
          \ If it's a empty request, will load current configuration from the system."
        required: false
        schema:
          $ref: "#/definitions/LdapConf"
        x-exportParamName: "Ldapconf"
      responses:
        "200":
          description: "Ping ldap service successfully."
        "400":
          description: "Inviald ldap configuration parameters."
        "401":
          description: "User need to login first."
        "403":
          description: "Only admin has this authority."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /ldap/users/search:
    post:
      tags:
      - "Products"
      summary: "Search available ldap users."
      description: "This endpoint searches the available ldap users based on related\
        \ configuration parameters. Support searched by input ladp configuration,\
        \ load configuration from the system and specific filter.\n"
      parameters:
      - name: "username"
        in: "query"
        description: "Registered user ID"
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - in: "body"
        name: "ldap_conf"
        description: "ldap search configuration. ldapconf field can input ldap service\
          \ configuration. If this item are blank, will load default configuration\
          \ will load current configuration from the system."
        required: false
        schema:
          $ref: "#/definitions/LdapConf"
        x-exportParamName: "LdapConf"
      responses:
        "200":
          description: "Search ldap users successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LdapUsers"
        "400":
          description: "Inviald ldap configuration parameters."
        "401":
          description: "User need to login first."
        "403":
          description: "Only admin has this authority."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /ldap/users/import:
    post:
      tags:
      - "Products"
      summary: "Import selected available ldap users."
      description: "This endpoint adds the selected available ldap users to harbor\
        \ based on related configuration parameters from the system. System will try\
        \ to guess the user email address and realname, add to harbor user information.\
        \  If have errors when import user, will return the list of importing failed\
        \ uid and the failed reason.\n"
      parameters:
      - in: "body"
        name: "uid_list"
        description: "The uid listed for importing. This list will check users validity\
          \ of ldap service based on configuration from the system."
        required: true
        schema:
          $ref: "#/definitions/LdapImportUsers"
        x-exportParamName: "UidList"
      responses:
        "200":
          description: "Add ldap users successfully."
        "401":
          description: "User need to login first."
        "403":
          description: "Only admin has this authority."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Failed import some users."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LdapFailedImportUsers"
  /configurations:
    get:
      tags:
      - "Products"
      summary: "Get system configurations."
      description: "This endpoint is for retrieving system configurations that only\
        \ provides for admin user.\n"
      parameters: []
      responses:
        "200":
          description: "Get system configurations successfully. The response body\
            \ is a map."
          schema:
            $ref: "#/definitions/Configurations"
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Modify system configurations."
      description: "This endpoint is for modifying system configurations that only\
        \ provides for admin user.\n"
      parameters:
      - in: "body"
        name: "configurations"
        description: "The configuration map can contain a subset of the attributes\
          \ of the schema, which are to be updated."
        required: true
        schema:
          $ref: "#/definitions/Configurations"
        x-exportParamName: "Configurations"
      responses:
        "200":
          description: "Modify system configurations successfully."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
  /configurations/reset:
    post:
      tags:
      - "Products"
      summary: "Reset system configurations."
      description: "Reset system configurations from environment variables. Can only\
        \ be accessed by admin user.\n"
      parameters: []
      responses:
        "200":
          description: "Reset system configurations successfully."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /email/ping:
    post:
      tags:
      - "Products"
      summary: "Test connection and authentication with email server."
      description: "Test connection and authentication with email server. \n"
      parameters:
      - in: "body"
        name: "settings"
        description: "Email server settings, if some of the settings are not assigned,\
          \ they will be read from system configuration."
        required: false
        schema:
          $ref: "#/definitions/EmailServerSetting"
        x-exportParamName: "Settings"
      responses:
        "200":
          description: "Ping email server successfully."
        "400":
          description: "Inviald email server settings."
        "401":
          description: "User need to login first."
        "403":
          description: "Only admin has this authority."
        "500":
          description: "Unexpected internal errors."
definitions:
  Search:
    type: "object"
    properties:
      projects:
        type: "array"
        description: "Search results of the projects that matched the filter keywords."
        items:
          $ref: "#/definitions/Project"
      repositories:
        type: "array"
        description: "Search results of the repositories that matched the filter keywords."
        items:
          $ref: "#/definitions/SearchRepository"
    example:
      projects:
      - creation_time: "creation_time"
        Togglable: true
        update_time: "update_time"
        current_user_role_id: 5
        metadata: "{}"
        deleted: 1
        owner_name: "owner_name"
        project_id: 0
        owner_id: 6
        name: "name"
        repo_count: 5
      - creation_time: "creation_time"
        Togglable: true
        update_time: "update_time"
        current_user_role_id: 5
        metadata: "{}"
        deleted: 1
        owner_name: "owner_name"
        project_id: 0
        owner_id: 6
        name: "name"
        repo_count: 5
      repositories:
      - project_id: 2
        tags_count: 3
        project_name: "project_name"
        repository_name: "repository_name"
        pull_count: 9
        project_public: 7
      - project_id: 2
        tags_count: 3
        project_name: "project_name"
        repository_name: "repository_name"
        pull_count: 9
        project_public: 7
  SearchRepository:
    type: "object"
    properties:
      project_id:
        type: "integer"
        description: "The ID of the project that the repository belongs to"
      project_name:
        type: "string"
        description: "The name of the project that the repository belongs to"
      project_public:
        type: "integer"
        description: "The flag to indicate the publicity of the project that the repository\
          \ belongs to (1 is public, 0 is not)"
      repository_name:
        type: "string"
        description: "The name of the repository"
      pull_count:
        type: "integer"
        description: "The count how many times the repository is pulled"
      tags_count:
        type: "integer"
        description: "The count of tags in the repository"
    example:
      project_id: 2
      tags_count: 3
      project_name: "project_name"
      repository_name: "repository_name"
      pull_count: 9
      project_public: 7
  ProjectReq:
    type: "object"
    properties:
      project_name:
        type: "string"
        description: "The name of the project."
      public:
        type: "integer"
        format: "int"
        description: "The public status of the project."
      enable_content_trust:
        type: "boolean"
        description: "Whether content trust is enabled or not. If it is enabled, user\
          \ cann't pull unsigned images from this project."
      prevent_vulnerable_images_from_running:
        type: "boolean"
        description: "Whether prevent the vulnerable images from running."
      prevent_vulnerable_images_from_running_severity:
        type: "string"
        description: "If the vulnerability is high than severity defined here, the\
          \ images cann't be pulled."
      automatically_scan_images_on_push:
        type: "boolean"
        description: "Whether scan images automatically when pushing."
    example:
      prevent_vulnerable_images_from_running: true
      public: 0
      automatically_scan_images_on_push: true
      prevent_vulnerable_images_from_running_severity: "prevent_vulnerable_images_from_running_severity"
      enable_content_trust: true
      project_name: "project_name"
  Project:
    type: "object"
    properties:
      project_id:
        type: "integer"
        format: "int32"
        description: "Project ID"
      owner_id:
        type: "integer"
        format: "int32"
        description: "The owner ID of the project always means the creator of the\
          \ project."
      name:
        type: "string"
        description: "The name of the project."
      creation_time:
        type: "string"
        description: "The creation time of the project."
      update_time:
        type: "string"
        description: "The update time of the project."
      deleted:
        type: "integer"
        format: "int32"
        description: "A deletion mark of the project (1 means it's deleted, 0 is not)"
      owner_name:
        type: "string"
        description: "The owner name of the project."
      Togglable:
        type: "boolean"
        description: "Correspond to the UI about whether the project's publicity is\
          \  updatable (for UI)"
      current_user_role_id:
        type: "integer"
        description: "The role ID of the current user who triggered the API (for UI)"
      repo_count:
        type: "integer"
        description: "The number of the repositories under this project."
      metadata:
        type: "object"
        description: "The metadata of the project."
        properties: {}
    example:
      creation_time: "creation_time"
      Togglable: true
      update_time: "update_time"
      current_user_role_id: 5
      metadata: "{}"
      deleted: 1
      owner_name: "owner_name"
      project_id: 0
      owner_id: 6
      name: "name"
      repo_count: 5
  ProjectMetadata:
    type: "object"
    properties:
      public:
        type: "integer"
        format: "int"
        description: "The public status of the project."
      enable_content_trust:
        type: "boolean"
        description: "Whether content trust is enabled or not. If it is enabled, user\
          \ cann't pull unsigned images from this project."
      prevent_vulnerable_images_from_running:
        type: "boolean"
        description: "Whether prevent the vulnerable images from running."
      prevent_vulnerable_images_from_running_severity:
        type: "string"
        description: "If the vulnerability is high than severity defined here, the\
          \ images cann't be pulled."
      automatically_scan_images_on_push:
        type: "boolean"
        description: "Whether scan images automatically when pushing."
    example:
      prevent_vulnerable_images_from_running: true
      public: 0
      automatically_scan_images_on_push: true
      prevent_vulnerable_images_from_running_severity: "prevent_vulnerable_images_from_running_severity"
      enable_content_trust: true
  Manifest:
    type: "object"
    properties:
      manifest:
        type: "object"
        description: "The detail of manifest."
        properties: {}
      config:
        type: "string"
        description: "The config of the repository."
    example:
      manifest: "{}"
      config: "config"
  User:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int"
        description: "The ID of the user."
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      realname:
        type: "string"
      comment:
        type: "string"
      deleted:
        type: "integer"
        format: "int32"
      role_name:
        type: "string"
      role_id:
        type: "integer"
        format: "int"
      has_admin_role:
        type: "integer"
        format: "int"
      reset_uuid:
        type: "string"
      Salt:
        type: "string"
      creation_time:
        type: "string"
      update_time:
        type: "string"
    example:
      creation_time: "creation_time"
      has_admin_role: 5
      realname: "realname"
      role_name: "role_name"
      Salt: "Salt"
      password: "password"
      update_time: "update_time"
      deleted: 6
      user_id: 0
      role_id: 1
      comment: "comment"
      email: "email"
      username: "username"
      reset_uuid: "reset_uuid"
  Password:
    type: "object"
    properties:
      old_password:
        type: "string"
        description: "The user's existing password."
      new_password:
        type: "string"
        description: "New password for marking as to be updated."
    example:
      old_password: "old_password"
      new_password: "new_password"
  AccessLog:
    type: "object"
    properties:
      log_id:
        type: "integer"
        description: "The ID of the log entry."
      username:
        type: "string"
        description: "Username of the user in this log entry."
      repo_name:
        type: "string"
        description: "Name of the repository in this log entry."
      repo_tag:
        type: "string"
        description: "Tag of the repository in this log entry."
      operation:
        type: "string"
        description: "The operation against the repository in this log entry."
      op_time:
        type: "string"
        description: "The time when this operation is triggered."
    example:
      log_id: 0
      op_time: "op_time"
      repo_name: "repo_name"
      operation: "operation"
      repo_tag: "repo_tag"
      username: "username"
  Role:
    type: "object"
    properties:
      role_id:
        type: "integer"
        format: "int32"
        description: "ID in table."
      role_code:
        type: "string"
        description: "Description of permissions for the role."
      role_name:
        type: "string"
        description: "Name the the role."
      role_mask:
        type: "string"
    example:
      role_name: "role_name"
      role_mask: "role_mask"
      role_id: 0
      role_code: "role_code"
  RoleParam:
    type: "object"
    properties:
      roles:
        type: "array"
        description: "Role ID for updating project role member."
        items:
          type: "integer"
          format: "int32"
      username:
        type: "string"
        description: "Username relevant to a project role member."
    example:
      roles:
      - 0
      - 0
      username: "username"
  StatisticMap:
    type: "object"
    properties:
      private_project_count:
        type: "integer"
        format: "int32"
        description: "The count of the private projects which the user is a member\
          \ of."
      private_repo_count:
        type: "integer"
        format: "int32"
        description: "The count of the private repositories belonging to the projects\
          \ which the user is a member of."
      public_project_count:
        type: "integer"
        format: "int32"
        description: "The count of the public projects."
      public_repo_count:
        type: "integer"
        format: "int32"
        description: "The count of the public repositories belonging to the public\
          \ projects which the user is a member of."
      total_project_count:
        type: "integer"
        format: "int32"
        description: "The count of the total projects, only be seen when the is admin."
      total_repo_count:
        type: "integer"
        format: "int32"
        description: "The count of the total repositories, only be seen when the user\
          \ is admin."
    example:
      private_project_count: 0
      public_repo_count: 5
      total_repo_count: 2
      total_project_count: 5
      private_repo_count: 6
      public_project_count: 1
  JobStatus:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The job ID."
      status:
        type: "string"
        description: "The status of the job."
      repository:
        type: "string"
        description: "The repository handled by the job."
      policy_id:
        type: "integer"
        format: "int64"
        description: "The ID of the policy that triggered this job."
      operation:
        type: "string"
        description: "The operation of the job."
      tags:
        type: "array"
        description: "The repository's used tag list."
        items:
          $ref: "#/definitions/Tags"
      creation_time:
        type: "string"
        description: "The creation time of the job."
      update_time:
        type: "string"
        description: "The update time of the job."
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      policy_id: 6
      id: 0
      repository: "repository"
      operation: "operation"
      status: "status"
      tags:
      - tag: "tag"
      - tag: "tag"
  Tags:
    type: "object"
    properties:
      tag:
        type: "string"
        description: "The repository's used tag."
    example:
      tag: "tag"
  RepPolicy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The policy ID."
      name:
        type: "string"
        description: "The policy name."
      description:
        type: "string"
        description: "The description of the policy."
      projects:
        type: "array"
        description: "The project list that the policy applys to."
        items:
          $ref: "#/definitions/Project"
      targets:
        type: "array"
        description: "The target list."
        items:
          $ref: "#/definitions/RepTarget"
      trigger:
        $ref: "#/definitions/RepTrigger"
      filters:
        type: "array"
        description: "The replication policy filter array."
        items:
          $ref: "#/definitions/RepFilter"
      replicate_existing_image_now:
        type: "boolean"
        description: "Whether to replicate the existing images now."
      replicate_deletion:
        type: "boolean"
        description: "Whether to replicate the deletion operation."
      creation_time:
        type: "string"
        description: "The create time of the policy."
      update_time:
        type: "string"
        description: "The update time of the policy."
      error_job_count:
        type: "integer"
        description: "The error job count number for the policy."
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      projects:
      - creation_time: "creation_time"
        Togglable: true
        update_time: "update_time"
        current_user_role_id: 5
        metadata: "{}"
        deleted: 1
        owner_name: "owner_name"
        project_id: 0
        owner_id: 6
        name: "name"
        repo_count: 5
      - creation_time: "creation_time"
        Togglable: true
        update_time: "update_time"
        current_user_role_id: 5
        metadata: "{}"
        deleted: 1
        owner_name: "owner_name"
        project_id: 0
        owner_id: 6
        name: "name"
        repo_count: 5
      name: "name"
      description: "description"
      replicate_existing_image_now: true
      id: 0
      trigger:
        kind: "kind"
        schedule_param:
          weekday: 5
          offtime: 5
          type: "type"
      filters:
      - metadata: "{}"
        kind: "kind"
        pattern: "pattern"
      - metadata: "{}"
        kind: "kind"
        pattern: "pattern"
      targets:
      - creation_time: "creation_time"
        endpoint: "endpoint"
        password: "password"
        update_time: "update_time"
        name: "name"
        insecure: true
        id: 6
        type: 1
        username: "username"
      - creation_time: "creation_time"
        endpoint: "endpoint"
        password: "password"
        update_time: "update_time"
        name: "name"
        insecure: true
        id: 6
        type: 1
        username: "username"
      error_job_count: 2
      replicate_deletion: true
  RepTrigger:
    type: "object"
    properties:
      kind:
        type: "string"
        description: "The replication policy trigger kind. The valid values are manual,\
          \ immediate and schedule."
      schedule_param:
        $ref: "#/definitions/ScheduleParam"
    example:
      kind: "kind"
      schedule_param:
        weekday: 5
        offtime: 5
        type: "type"
  ScheduleParam:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The schedule type. The valid values are daily and weekly."
      weekday:
        type: "integer"
        format: "int8"
        description: "Optional, only used when the type is weedly. The valid values\
          \ are 1-7."
      offtime:
        type: "integer"
        format: "int64"
        description: "The time offset with the UTC 00:00 in seconds."
    example:
      weekday: 5
      offtime: 5
      type: "type"
  RepFilter:
    type: "object"
    properties:
      kind:
        type: "string"
        description: "The replication policy filter kind. The valid values are project,\
          \ repository and tag."
      pattern:
        type: "string"
        description: "The replication policy filter pattern."
      metadata:
        type: "object"
        description: "This map object is the replication policy filter metadata."
        properties: {}
    example:
      metadata: "{}"
      kind: "kind"
      pattern: "pattern"
  RepTarget:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The target ID."
      endpoint:
        type: "string"
        description: "The target address URL string."
      name:
        type: "string"
        description: "The target name."
      username:
        type: "string"
        description: "The target server username."
      password:
        type: "string"
        description: "The target server password."
      type:
        type: "integer"
        format: "int"
        description: "Reserved field."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
      creation_time:
        type: "string"
        description: "The create time of the policy."
      update_time:
        type: "string"
        description: "The update time of the policy."
    example:
      creation_time: "creation_time"
      endpoint: "endpoint"
      password: "password"
      update_time: "update_time"
      name: "name"
      insecure: true
      id: 6
      type: 1
      username: "username"
  RepTargetPost:
    type: "object"
    properties:
      endpoint:
        type: "string"
        description: "The target address URL string."
      name:
        type: "string"
        description: "The target name."
      username:
        type: "string"
        description: "The target server username."
      password:
        type: "string"
        description: "The target server password."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
    example:
      endpoint: "endpoint"
      password: "password"
      name: "name"
      insecure: true
      username: "username"
  PingTarget:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int"
        description: "Target ID."
      endpoint:
        type: "string"
        description: "The target address URL string."
      username:
        type: "string"
        description: "The target server username."
      password:
        type: "string"
        description: "The target server password."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
    example:
      endpoint: "endpoint"
      password: "password"
      insecure: true
      id: 0
      username: "username"
  PutTarget:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The target name."
      endpoint:
        type: "string"
        description: "The target address URL string."
      username:
        type: "string"
        description: "The target server username."
      password:
        type: "string"
        description: "The target server password."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
    example:
      endpoint: "endpoint"
      password: "password"
      name: "name"
      insecure: true
      username: "username"
  HasAdminRole:
    type: "object"
    properties:
      has_admin_role:
        type: "integer"
        description: "1-has admin, 0-not."
    example:
      has_admin_role: 0
  UserProfile:
    type: "object"
    properties:
      email:
        type: "string"
        description: "The new email."
      realname:
        type: "string"
        description: "The new realname."
      comment:
        type: "string"
        description: "The new comment."
    example:
      comment: "comment"
      email: "email"
      realname: "realname"
  Storage:
    type: "object"
    properties:
      total:
        type: "integer"
        format: "int64"
        description: "Total volume size."
      free:
        type: "integer"
        format: "int64"
        description: "Free volume size."
  GeneralInfo:
    type: "object"
    properties:
      with_notary:
        type: "boolean"
        description: "If the Harbor instance is deployed with nested notary."
      with_clair:
        type: "boolean"
        description: "If the Harbor instance is deployed with nested clair."
      with_admiral:
        type: "boolean"
        description: "If the Harbor instance is deployed with Admiral."
      admiral_endpoint:
        type: "string"
        description: "The url of the endpoint of admiral instance."
      auth_mode:
        type: "string"
        description: "The auth mode of current Harbor instance."
      project_creation_restriction:
        type: "string"
        description: "Indicate who can create projects, it could be 'adminonly' or\
          \ 'everyone'."
      self_registration:
        type: "boolean"
        description: "Indicate whether the Harbor instance enable user to register\
          \ himself."
      has_ca_root:
        type: "boolean"
        description: "Indicate whether there is a ca root cert file ready for download\
          \ in the file system."
      harbor_version:
        type: "string"
        description: "The build version of Harbor."
      next_scan_all:
        type: "integer"
        description: "The UTC time in milliseconds, after which user can call scanAll\
          \ API to scan all images."
      clair_vulnerability_status:
        type: "object"
        description: "The status of vulnerability data of Clair."
        properties:
          overall_last_update:
            type: "integer"
            description: "The UTC timestamp in milliseconds of last successful update\
              \ for Clair vulnerability data, when all the updaters are successfully\
              \ executed."
          details:
            type: "array"
            description: "Detail timestamp of different namespace.  This is introduced\
              \ to handle the case when some updaters are executed successfully and\
              \ some not."
            items:
              $ref: "#/definitions/VulnNamespaceTimestamp"
  VulnNamespaceTimestamp:
    type: "object"
    properties:
      namespace:
        type: "string"
        description: "The namespace of the Vulnerability"
      last_update:
        type: "integer"
        description: "The UTC timestamp in miliseconds of last successful update for\
          \ vulnerability data."
  SystemInfo:
    type: "object"
    properties:
      storage:
        type: "array"
        description: "The storage of system."
        items:
          $ref: "#/definitions/Storage"
  LdapConf:
    type: "object"
    properties:
      ldap_url:
        type: "string"
        description: "The url of ldap service."
      ldap_search_dn:
        type: "string"
        description: "The search dn of ldap service."
      ldap_search_password:
        type: "string"
        description: "The search password of ldap service."
      ldap_base_dn:
        type: "string"
        description: "The base dn of ldap service."
      ldap_filter:
        type: "string"
        description: "The serach filter of ldap service."
      ldap_uid:
        type: "string"
        description: "The serach uid from ldap service attributes."
      ldap_scope:
        type: "integer"
        format: "int64"
        description: "The serach scope of ldap service."
      ldap_connection_timeout:
        type: "integer"
        format: "int64"
        description: "The connect timeout of ldap service(second)."
    example:
      ldap_search_dn: "ldap_search_dn"
      ldap_uid: "ldap_uid"
      ldap_filter: "ldap_filter"
      ldap_base_dn: "ldap_base_dn"
      ldap_url: "ldap_url"
      ldap_search_password: "ldap_search_password"
      ldap_connection_timeout: 6
      ldap_scope: 0
  LdapUsers:
    type: "object"
    properties:
      ldap_username:
        type: "string"
        description: "search ldap user name based on ldapconf."
      ldap_realname:
        type: "string"
        description: "system will try to guess the user realname form \"uid\" or \"\
          cn\" attribute."
      ldap_email:
        type: "string"
        description: "system will try to guess the user email address form \"mail\"\
          \ or \"email\" attribute."
    example:
      ldap_realname: "ldap_realname"
      ldap_email: "ldap_email"
      ldap_username: "ldap_username"
  LdapImportUsers:
    type: "object"
    properties:
      ldap_uid_list:
        type: "array"
        description: "selected uid list"
        items:
          type: "string"
    example:
      ldap_uid_list:
      - "ldap_uid_list"
      - "ldap_uid_list"
  LdapFailedImportUsers:
    type: "object"
    properties:
      ldap_uid:
        type: "string"
        description: "the uid can't add to system."
      error:
        type: "string"
        description: "fail reason."
  EmailServerSetting:
    type: "object"
    properties:
      email_host:
        type: "string"
        description: "The host of email server."
      email_port:
        type: "integer"
        description: "The port of email server."
      email_username:
        type: "string"
        description: "The username of email server."
      email_password:
        type: "string"
        description: "The password of email server."
      email_ssl:
        type: "boolean"
        description: "Use ssl/tls or not."
      email_identity:
        type: "string"
        description: "The dentity of email server."
    example:
      email_ssl: true
      email_identity: "email_identity"
      email_port: 0
      email_username: "email_username"
      email_host: "email_host"
      email_password: "email_password"
  RepoSignature:
    type: "object"
    properties:
      tag:
        type: "string"
        description: "The tag of image."
      hashes:
        type: "object"
        description: "The JSON object of the hash of the image."
        properties: {}
    example:
      hashes: "{}"
      tag: "tag"
  DetailedTag:
    type: "object"
    properties:
      digest:
        type: "string"
        description: "The digest of the tag."
      name:
        type: "string"
        description: "The name of the tag."
      size:
        type: "integer"
        description: "The size of the image."
      architecture:
        type: "string"
        description: "The architecture of the image."
      os:
        type: "string"
        description: "The os of the image."
      docker_version:
        type: "string"
        description: "The version of docker which builds the image."
      author:
        type: "string"
        description: "The author of the image."
      created:
        type: "string"
        description: "The build time of the image."
      signature:
        type: "object"
        description: "The signature of image, defined by RepoSignature. If it is null,\
          \ the image is unsigned."
        properties: {}
      scan_overview:
        type: "object"
        description: "The overview of the scan result.  This is an optional property."
        properties:
          digest:
            type: "string"
            description: "The digest of the image."
          scan_status:
            type: "string"
            description: "The status of the scan job, it can be \"pendnig\", \"running\"\
              , \"finished\", \"error\"."
          job_id:
            type: "integer"
            description: "The ID of the job on jobservice to scan the image."
          severity:
            type: "integer"
            description: "0-Not scanned, 1-Negligible, 2-Unknown, 3-Low, 4-Medium,\
              \ 5-High"
          details_key:
            type: "string"
            description: "The top layer name of this image in Clair, this is for calling\
              \ Clair API to get the vulnerability list of this image."
          components:
            type: "object"
            description: "The components overview of the image."
            properties:
              total:
                type: "integer"
                description: "Total number of the components in this image."
              summary:
                type: "array"
                description: "List of number of components of different severities."
                items:
                  $ref: "#/definitions/ComponentOverviewEntry"
    example:
      size: 0
      os: "os"
      signature: "{}"
      author: "author"
      created: "created"
      digest: "digest"
      name: "name"
      scan_overview: "{}"
      docker_version: "docker_version"
      architecture: "architecture"
  ComponentOverviewEntry:
    type: "object"
    properties:
      severity:
        type: "integer"
        description: "1-None/Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High"
      count:
        type: "integer"
        description: "number of the components with certain severity."
  Repository:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of repository."
      name:
        type: "string"
        description: "The name of repository."
      project_id:
        type: "integer"
        description: "The project ID of repository."
      description:
        type: "string"
        description: "The description of repository."
      pull_count:
        type: "integer"
        description: "The pull count of repository."
      star_count:
        type: "integer"
        description: "The star count of repository."
      tags_count:
        type: "integer"
        description: "The tags count of repository."
      creation_time:
        type: "string"
        description: "The creation time of repository."
      update_time:
        type: "string"
        description: "The update time of repository."
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      project_id: 6
      tags_count: 5
      name: "name"
      description: "description"
      id: 0
      pull_count: 1
      star_count: 5
  VulnerabilityItem:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ID of the vulnerability, normally it is the CVE ID"
      severity:
        type: "integer"
        description: "1-Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High"
      package:
        type: "string"
        description: "The packge that introduces the vulnerability."
      version:
        type: "string"
        description: "The version of the package."
      description:
        type: "string"
        description: "The description of the vulnerability."
      fixedVersion:
        type: "string"
        description: "The version which the vulnerability is fixed, this is an optional\
          \ property."
    example:
      severity: 0
      fixedVersion: "fixedVersion"
      package: "package"
      description: "description"
      id: "id"
      version: "version"
  Configurations:
    type: "object"
    properties:
      auth_mode:
        type: "string"
        description: "The auth mode of current system, such as \"db_auth\", \"ldap_auth\""
      email_from:
        type: "string"
        description: "The sender name for Email notification."
      email_host:
        type: "string"
        description: "The hostname of SMTP server that sends Email notification."
      email_port:
        type: "integer"
        description: "The port of SMTP server."
      email_identity:
        type: "string"
        description: "By default it's empty so the email_username is picked."
      email_username:
        type: "string"
        description: "The username for authenticate against SMTP server."
      email_ssl:
        type: "boolean"
        description: "When it's set to true the system will access Email server via\
          \ TLS by default.  If it's set to false, it still will handle \"STARTTLS\"\
          \ from server side."
      email_insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the email server."
      ldap_url:
        type: "string"
        description: "The URL of LDAP server."
      ldap_base_dn:
        type: "string"
        description: "The Base DN for LDAP binding."
      ldap_filter:
        type: "string"
        description: "The filter for LDAP binding."
      ldap_scope:
        type: "integer"
        description: "0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE"
      ldap_uid:
        type: "string"
        description: "The attribute which is used as identity for the LDAP binding,\
          \ such as \"CN\" or \"SAMAccountname\""
      ldap_search_dn:
        type: "string"
        description: "The DN of the user to do the search."
      ldap_timeout:
        type: "integer"
        description: "timeout in seconds for connection to LDAP server."
      project_creation_restriction:
        type: "string"
        description: "This attribute restricts what users have the permission to create\
          \ project.  It can be \"everyone\" or \"adminonly\"."
      self_registration:
        type: "boolean"
        description: "Whether the Harbor instance supports self-registration.  If\
          \ it's set to false, admin need to add user to the instance."
      token_expiration:
        type: "integer"
        description: "The expiration time of the token for internal Registry, in minutes."
      verify_remote_cert:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access a remote Harbor instance for replication."
      scan_all_policy:
        type: "object"
        properties:
          type:
            type: "string"
            description: "The type of scan all policy, currently the valid values\
              \ are \"none\" and \"daily\""
          parameter:
            type: "object"
            description: "The parameters of the policy, the values are dependant on\
              \ the type of the policy."
            properties:
              daily_time:
                type: "integer"
                description: "The offest in seconds of UTC 0 o'clock, only valid when\
                  \ the policy type is \"daily\""
    example:
      email_ssl: true
      self_registration: true
      ldap_timeout: 1
      ldap_filter: "ldap_filter"
      email_username: "email_username"
      ldap_base_dn: "ldap_base_dn"
      auth_mode: "auth_mode"
      project_creation_restriction: "project_creation_restriction"
      verify_remote_cert: true
      scan_all_policy: "{}"
      email_identity: "email_identity"
      ldap_search_dn: "ldap_search_dn"
      email_port: 0
      email_insecure: true
      ldap_uid: "ldap_uid"
      ldap_url: "ldap_url"
      token_expiration: 5
      email_from: "email_from"
      ldap_scope: 6
      email_host: "email_host"
  Replication:
    type: "object"
    properties:
      policy_id:
        type: "integer"
        description: "The ID of replication policy"
    example:
      policy_id: 0
  RepositoryDescription:
    type: "object"
    properties:
      description:
        type: "string"
        description: "The description of the repository."
    example:
      description: "description"
  UpdateJobs:
    type: "object"
    properties:
      policy_id:
        type: "integer"
        description: "The ID of replication policy"
      status:
        type: "string"
        description: "The status of jobs. The only valid value is stop for now."
    example:
      policy_id: 0
      status: "status"
responses:
  UnsupportedMediaType:
    description: "The Media Type of the request is not supported, it has to be \"\
      application/json\""
