package main

import (
	"fmt"
	"os"
	"strconv"
	chipApi2 "uminer/miner-server/api/chipApi"
)

func startCPU(devId int, fipBin string, rambootRootfs string) {
	chipApi2.StartChips(devId, fipBin, rambootRootfs)
}

func chipList() {
	cardList := chipApi2.BMChipsInfos("../../api/chipApi/bm_smi_1.txt")
	fmt.Println(cardList)
}

func chipBurning(devId int) {
	chipApi2.BurnChips("HQDZKC5BAAABJ0297", "000:d8:00.0", devId)
}

func chipGenKeyPairs(devId int) {
	chipApi2.GenChipsKeyPairs("HQDZKC5BAAABJ0309", "000:d9:00.1", devId)
}

func readKeyPairs(devId int) {
	chipApi2.ReadChipKeyPairs("HQDZKC5BAAABJ0309", "000:d9:00.1", devId)
}

func signDemo(devId int) {
	chipApi2.SignMinerChips(devId, "92b7769ab57799d6481cfc14467a55c6e4f7f42138bdc7c2b536744c134e5b8262e3e10eac34904ac32d04de9a56449ef14253f8dd63085edb369f0e96a214776170ef2c9445a179fe4aa14de03d8833e0d8be9c0cb119fb30fb3bf74bc0a94df7edd26abbde024286eb9f981669cc5b2d5a782fdb6bb02648e263dd199f72d6d0f7027d01781fbafde5c7a8f66959d56dba44a3955246946f84c5c5b4bf6bbc50cd4dab5df08b3f7a677de410f9d9b156dbe13c0fb576f18c44329180c287657d1e386be013851fda47809bd0ec67dd302a300e76a97673d347e8f9fc22020adb016817421f6637518582e5821e26439b330c4ca7bbf3b2ad2d4b17eb0c569cc1b045d7ae7b413b454763e1da273810940afec4f367d001ef15326ca0a0a1acede66356971901bd7a3342dff87e6a0f80d8d2183943cca64d91dd19fc3645a3edcbb284f476ec852f000cb61f41d58809461053e6c5a1c337245a0d8ec18c04d0b2bd8db3112d0dea28ae5c3cce4122628ac6ed7f487af5f6fd92c0d24abbdd650b8fa1dbb891b0ae9a714e677fbfd2d826530820d0b4dc3455bc58b7860603cee3089d771e46fce9dc5bb7a326570628f61ec6ec7d2c93d49a1108ca14a0319d0e191119d18eca5343de1117253841f81d56a53c87834bd29f0fc26800b03dad62cd7a3949ac7e7c9094600d6a8e1c1bf20a159a479fb57a098f87ba7d50a88a7d4a03f61516c2a42dfb8d2b48759a9d9cb7a8f2e803f7f9f9422054a6364060dff43147b95f33f66e249ae6e3366ecafdd0d1815951d1fa364204de151b67dc7f5add0844b566c9b3a340b869f71471f1900bca17a6ea234906a2771d7e02ec83ebaa264d28a1c180a549a18a38a987a963c6a99f7f51c0dbef9d38ac373855d0356c695a7fa94054ba3158b32c19f157b35057b40bf5771542d6321dd6fe0d46b4bf125e8ba5d3c66d69f3ecc67565c82e2be9c4eb313a50ce1636cdf1ad6ba765b6c652703a26fa5f4ba36bd9a2a4ee10c400a8e33119fcfe5ca1f1d21812839d05313f218c6c3bb3f684947f7e4f52a309d1f0c6d3b86714c2cc8c3b9380e635ffab4d6ab842f39a3d473e8c1c29ff94a681e5407a76862dae06d474a83c08f277467cadb4fbb8b91d58fe4077dc182e52f7329b165f596b6bf44638d4879626e9d13a22373a6a8cd7c4928dead5be5c293e1f16fc728b3b498ac820b7e8560bfd4cd805e3f08002a9d6b697a5e151370b934ed862647a61b5b09a68880fa9ac6cee54dc9114626c6063c40f4b2fd56ad3e3ecdfad94b031390b9c72a41a2481785dc68563b069809e7f60cf985ef401f52263ab3db2464ec7fdf1b226554d0cf02011cbb644900d1abf5c67ae1985cfe4e0754dcb4d2a596e564c0eb918c7b00ca5d049f4d7bc0588cdf197afdc7942ea29f799487926297f5e8a38618b202332192520533757c0dcba25d44fd48242c9b33e60300ef40ad16af3bfe7220d5445f561d6aade7f264c436bfc17f28fea5f044baeda622bdcd63ec7f42eb70991516f9a12455596523a2e6bfb855a0a933b2a5f1f87966e1beecd45331c8ac11b50044e124da8fb1a530e858f00333535b437388d440d265b4b486908544dbb3e61a3066eb0d8271fb7b9f1a3a7095a8dc219449af270cf47736e3dbb16768d02cc08c963d8651c600ac171f3ddb4f8a75a1e923e9f7945f5d24f18f024a6db86f1e70d05240f2f0f86b5c4e61e49b6c93e49ef84a9f67885b1e8a70aa7138f7fcd84e70c942a7304e6c1f87c74b911ee5158698519437b5ac1ae3f8128dc2176b114e8bd9f29f9ce0b642a7a95c2d72adb5364975ef51885617f00940258e0b1cdd1e2a31c1a31a82d39b6316953343332ac0a28de6b2354e76a49d2bff6c137d31313b3da89a6c89857de77bdbcda1d45b0e42ce2bcf3bffeb1f0b38f9908f0e80dba4b4558a5e1ec789a175a0e969852eaae11413bff09b006035b243b03a7b8f9b8733016064876228d1a0e5d7fd1870aea67af228f37dd5dac6b50513e0ea8a1893d8b06467a0f8ea3d58830148a3c0d3e7afef2d4557ba44adf7335b0b2c0bdfaed92fefce815e1cae0216b9107bffc311ef3f464d16fe1782f9522f836ee39705eebddbb1636c5c127fd53984b002e82fad5c154f203ed9818605ef2ffbc3087b67f597d7ffd1678dbb881f85b0d868ff84a2e5f621a942958e2a4b8fc7499db48981e1cc150a11ee64b720551b847b409389798e8c5c3313f6a4626ee3e0a2252223773eec1163a890e078a202eab6587912057730a55e716b8a0ae2b2dd5b89d454aab22e747aeab27037f9ecbeb9d9c4835743974362d20da3a963c0f09d32b47c05d3bf92f28f17e",
		"-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAmX49OU7W8Nu0bMGw/6yHbAoqj+cVo2A2PpZMvhwQOUpGOrJVENZ2\nQN9MmSJsZ/eUxS9JL3TBPmZNYvzVwnvApVEDBLUY23HXDA8CpoXaOeftZu8zYpDV\nnX4Zy0V0bF2WqR4ajNGDnsHkbPO5x2XToTqnZNFitgCFlTZtL0qL3X5713kaAz56\nTMsLa/E0tZcgkHVL1fp4j1BzrSYzhWWqw1gRLYsBgkboQqUUcr+/GYcdGDzbn6Oa\ntU7t6GfQo1iSS4C1C1BZHGLmy/uBs4nJq/RIdmCFo4G3Hx2rDuw/L1Ws1uApUxTI\n2XTaxoPF9RWxsh1qamX30yHPffwm/GrwtwIDAQAB\n-----END RSA PUBLIC KEY-----",
		1680, 426, "utility")
}
func verifyDemo() {
	//chipApi2.VerifyMinerChips("63e6667d4050b4ef8dc49e024260234d5479b74da342fb55a88d4c12eccfe1892100f71527e85729259dd4631c63cebcf05699cfaef94fdcbe6135fc3bd541a72fa56a8b350a1de97a05fbead62e7a4669697d4635c4da77486fb91000e88e37f73a255850525eaf5f08e2f66cb122d266ad1f68b1c20f87680217850afa5e7263cf8bd698528c9d9aeb9373476423a487a40e72c5b83c0fe5247f2ff52c732d00200040d7ca9069fca187b7b65673614319f533200e33a88876f7c07452c58ae6f5b48228a486896319394ffbae0bae7af97b4aeab4b0101445cb1f8652f1facdd00298fef271712e22227a12e4134e2e82e39a0b0d19901068533fc5135414",
	//	"-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAmX49OU7W8Nu0bMGw/6yHbAoqj+cVo2A2PpZMvhwQOUpGOrJVENZ2\nQN9MmSJsZ/eUxS9JL3TBPmZNYvzVwnvApVEDBLUY23HXDA8CpoXaOeftZu8zYpDV\nnX4Zy0V0bF2WqR4ajNGDnsHkbPO5x2XToTqnZNFitgCFlTZtL0qL3X5713kaAz56\nTMsLa/E0tZcgkHVL1fp4j1BzrSYzhWWqw1gRLYsBgkboQqUUcr+/GYcdGDzbn6Oa\ntU7t6GfQo1iSS4C1C1BZHGLmy/uBs4nJq/RIdmCFo4G3Hx2rDuw/L1Ws1uApUxTI\n2XTaxoPF9RWxsh1qamX30yHPffwm/GrwtwIDAQAB\n-----END RSA PUBLIC KEY-----",
	//	256, 426, "utility")
	chipApi2.VerifyChipsSignature("63e6667d4050b4ef8dc49e024260234d5479b74da342fb55a88d4c12eccfe1892100f71527e85729259dd4631c63cebcf05699cfaef94fdcbe6135fc3bd541a72fa56a8b350a1de97a05fbead62e7a4669697d4635c4da77486fb91000e88e37f73a255850525eaf5f08e2f66cb122d266ad1f68b1c20f87680217850afa5e7263cf8bd698528c9d9aeb9373476423a487a40e72c5b83c0fe5247f2ff52c732d00200040d7ca9069fca187b7b65673614319f533200e33a88876f7c07452c58ae6f5b48228a486896319394ffbae0bae7af97b4aeab4b0101445cb1f8652f1facdd00298fef271712e22227a12e4134e2e82e39a0b0d19901068533fc5135414",
		"-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAmX49OU7W8Nu0bMGw/6yHbAoqj+cVo2A2PpZMvhwQOUpGOrJVENZ2\nQN9MmSJsZ/eUxS9JL3TBPmZNYvzVwnvApVEDBLUY23HXDA8CpoXaOeftZu8zYpDV\nnX4Zy0V0bF2WqR4ajNGDnsHkbPO5x2XToTqnZNFitgCFlTZtL0qL3X5713kaAz56\nTMsLa/E0tZcgkHVL1fp4j1BzrSYzhWWqw1gRLYsBgkboQqUUcr+/GYcdGDzbn6Oa\ntU7t6GfQo1iSS4C1C1BZHGLmy/uBs4nJq/RIdmCFo4G3Hx2rDuw/L1Ws1uApUxTI\n2XTaxoPF9RWxsh1qamX30yHPffwm/GrwtwIDAQAB\n-----END RSA PUBLIC KEY-----",
		"utility")
}

func main() {
	//cardList := BMChipsInfos()
	//fmt.Println(cardList)

	args := os.Args
	if len(args) < 3 {
		fmt.Println("insufficient argument for the main")
		return
	}
	// 6号芯片
	command, _ := strconv.Atoi(args[2])

	switch args[1] {
	case "list":
		chipList()
	case "start":
		fipBin := "../../../bm_chip/src/fip.bin"
		rambootRootfs := "../../../bm_chip/src/ramboot_rootfs.itb"
		startCPU(command, fipBin, rambootRootfs)
	case "burn":
		chipBurning(command)
	case "keygen":
		chipGenKeyPairs(command)
	case "keyread":
		readKeyPairs(command)
	case "sign":
		signDemo(command)
	case "verify":
		verifyDemo()
	default:
		fmt.Println("Invalid command")
	}

}
