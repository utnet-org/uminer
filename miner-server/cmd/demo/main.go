package main

import (
	"fmt"
	"os"
	"strconv"
	chipApi2 "uminer/miner-server/api/chipApi"
)

func startCPU(devId int, fipBin string, rambootRootfs string) {
	chipApi2.StartChips(devId, fipBin, rambootRootfs)
}

func chipList() {
	cardList := chipApi2.BMChipsInfos("../../api/chipApi/bm_smi_1.txt")
	fmt.Println(cardList)
}

func chipBurning(devId int) {
	chipApi2.BurnChips("HQDZKC5BAAABJ0297", "000:d8:00.0", devId)
}

func chipGenKeyPairs(devId int) {
	chipApi2.GenChipsKeyPairs("HQDZKC5BAAABJ0309", "000:d9:00.1", devId)
}

func readKeyPairs(devId int) {
	chipApi2.ReadChipKeyPairs("HQDZKC5BAAABJ0309", "000:d9:00.1", devId)
	//origin1 :="rsa2048:2TuPVgMCHJy5atawrsADEzjP7MCVbyyCA89UW6Wvjp9HrAsucWfaXtPxccqhBQiZnfwj14ba78VAuQ7FPhLEyTCXLYjNgaU1s8fNtbe2oeX3hkNewSCQcKaHdGC5TC68Tx4fj59ffcaLxMgEgDVnuNrdxGq8HeaK5vCbkvUoWBjuKL2ES1ngAQnvHC2rcur7F3NsfHbgjKgegXwfFsLuK7omooDEEkNYEeYgGQ8EHsnjRFEYdmU1rD5u5nQFbX55jKnbNm3miAVbaFeEsCj6AKjrPkooh74Hxx6efxwutsv6Jk2EAqmohtSqgEzV7pq2g7tQ7XqPWbniFFbXf52bP1TYPrSkweXJoUSKHsif31KsxVgasnH3djNXHWm6LcLPygojeKHqjgNmJbwsKv"
	//origin := "-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEA6fn2R5LBtnJ+P7mINn6rv+xUzsZ4ojfft7ISMyYFTNqgfgk7E8H+\nlWrm5xDqY0axE9zWyBSeCunWmX/KLMlvleDWyTvRk4ZJn8tY5bTxBLmRXI6DC8pr\nmjVegpojico4PYz8fCKwpzM8kUpl3qPkreRk+qwu8mV/l4FdfK+DKGXrqkhAsAma\nIz3lSpcybJrNzIeRvGX7Y7Z20hY8Bm8QIIlr+vLwlhKwCghbYcjhrPU77de5bvAU\nQYxLoE+MN2Ux65d46+VAVKpmKLCEvdJ5ezCksTkPFaOYtVdOpaAjwLv6eEdGV9IQ\nUedEqPGLRBclMElR3r9WI6GNIsPAa/w/uQIDAQAB\n-----END RSA PUBLIC KEY-----"
	//block, _ := pem.Decode([]byte(origin))
	//pubKeyBase58 := base58.Encode(block.Bytes)
	//paddingLength := 402 - len(pubKeyBase58)
	//
	//paddedPubKeyBase58 := pubKeyBase58 + strings.Repeat("u", paddingLength)
	//fmt.Printf("PubKey based on 58encoding: %s, %d\n", paddedPubKeyBase58, len(paddedPubKeyBase58))

}

func signDemo(devId int) {
	chipApi2.SignMinerChips(devId, "8c8a3b0323e54872ece79aeae682ffcfdfd01066b8edeaf5fe526c3356f1a52c78b5c3da763a4d8eb4bc800b208742f365e018a39a9baad83d26837592d48dbe385ec41669e8d73ded5dd3866f45cd45153a0d8dca3d8e07c8a53fbac2109bd861396c95832ce953b8406698b679c9f9cc9cf3a2bd787a6c72ca4405a9a7d00d3a5eeacffc7bcd78c0f610d5e088c012c75190d598b7b775ec71b063591425410c91d131b5b5b0134ad715592d0fae1b5149d4009d9d7a4a74ea1fc97fd31d077febc0da5d07390bcf2adb96811e5a68c156a283b590e291cb28086988fcc3ea8a9126389b88d12907324f55862c8f5aabad162d8d3ace2107216e70847a7cce4127ba2308bc391e4692762bf76093c322f6db4d3895e5782eee0d56130d85cc2e0d419098b6631722f03093964ea09a607c5ebe9f2d80b9ebbe36346002ae0e758af74147c8e20988d4c058ae38eb58576fe44986aa51b612bc2d484f046742a4db966696aa90410a0244ef38c2efe31cc7632cbe822cd9e59dffd9d92d8df0a5377a7e790289bb42f354f2b625ff46908eb593fa457730e084caa8366472610eed397b03f047c3e56994350bc6f5c6f6b2e3e2e2d2287b8617c1fb4104035fd4f0960288e6bffefdd782ba1338e38ad5d5beb69e0d5b22ba89319db03eddf75ecd6c5504cc6fedfbcadb504f93783b7423e3429494581b7b21bf59fa328ad0b21565ff166c45acac8e642a9544311252b1144e37acd3f1be35e461a568815a4a6a1659d89e939d64a5179943fb80d32a23fc0407434e8b4416b5af2919a97b36c8cf5eb1127edca85e0ebda4394d8dcf2f6dcba0283b72d4bdb9e19010795060656fbecf81b6ca921d26190c22da9c42dc8c438aab9b64aea03aeefd2dfd41dd9024bf563eaccb144ce86506cda15eb8d50a09899c52f7e26fa14440dce248cdf03faf3f9b7326fba85fe9fbee0997ba828c1a18f0321e302b10e9fd21789c47eb0e9388ba3a95676219a758e5ca5afe8dc69c701d53305a135354b5337101365d0ce1d2950fe52e032b14501dcc6e762f725a65ace59270081bda0d77580d30e29d30c290381887b685dc51a9eab03bd6211516a7030a63f466bb3feeb87ef5895b1e26eb31413ed8ef98b35227ee707e38694ff2d2322627658e604ec55d6a5f8f0040c41d59d588c2614f83b02dcbd015c73d6a0fedb976afc6cdb8293bd7d9069c86a90305c783fc7a10928600046bdd01a41dfc600e72c9ba6ac4f525c26047dbf58d9c17ec09b8122683cc69ed3a4e64838d8244795344e6dcae4440a3be704e15c0bca770ab4c7bd35ecb9cc2856f76e85abd342cf2c4bb5b397dcb4bb2d1249e0204d65cb8b6b7e2907ccbf28690ba1154ba043decef823a86025bbc0fdd629ec90c48b7befcbad285e74f1b07464b8d903768f2b9ac18b572417016440f81952d38ac5356b683c67701ad5ece5d74d663c249e856c904993ea8daf279ed5e4f9789712bf2bc4786f910a2a7c8c03834d65f7e09e8fec74ea30e25c3cb3720c676518d739b278a593278b321c64eb503fdcdcf2a104fb829f045a79c90478be46e581663fb92a8f7373fc23d3f6e6832e94d441700ee2720bcefaeaa871e2d5409fc40b77866e68625c3635e263623dc4457aa67b6c0b2d05520bb30bb412a29d1d4c268113a4fcc736a6f742c1e3744c82eaaa9498ad7033db6ff97bb95200c379fa52b4ccd3eab4545f5c7d5008015794726ceab7a9392f89aef52279b88a952013af34f6d3d54827a6ca07d614f50b8008a1886c4f2f916f6e3cf7c1237f793e0a36d378657982912d580f91e2f9f9bba0596ec859dc725d5ffa2bb81aee50f069071d2768f72739630f4572cd1a4865a1d28b10863aac35350e0dcd29d248295da74fa35afcb815d2aaa872ff6001866ddeb81a9e23983176448a0f277f903262b2911ee6844a022a91da252e565782a95883836fdb2f68b6e0fadb891cea2352513010fbe0a935956edf2c3980f5e0f985facd60ab7e08d71eb0f03482b00b46e03cd8339e72dac69dc537a57ddd9f6130d1af7d2012fc8cfd0211f0fac1624b5e676457a2b6e94931efa0539818ba5ac5d4e7ff02b28fe185cb6e93a35467c11e2965a8d3b75b04b4645a0388f42ae2e48e9c77a28f4e3ba35195d1caec56da97ba97647c736d40febaa2656a8b8f7c192a46d71eda406d6d92fb189fcfff204f37141ed602f066c3fe055f7c1c87a88624190c913ab0e52727ccca23a00b59f5645341874fc0169525426dc8d676ea98744fd292437590dd4a77cdc0d8cd8761e3e66e614b062c801e154f83af3da525273f2cbf6fb540a2738b88c59d55a95f039df8149a83e81",
		"-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAzCNlCWg8AXs9jKUWCOGg4CQucE+jqaI0xSZgzjogAPJDG/1TVPfw\nw22SuNZKZGVnNOe1SMjhhRtK0Ohmu2lmdDmX1+fb4tYDxrSRuuUYiNevx8dpgKBj\nDDxIEXcW5szYpckLKECljL9bM83JD2MwO1+91fbIhNA7VsIxLsV54lKLlK2lXShQ\ncBpn13/kro05U4GzFtzNaiqTVk4eJNkGOk/t7k5s2/4TkznmMN8YJrfadnHJPdvI\nDvr2K/9geoVM5U2+E3m5EPOOqGOFW3DWVAzo6i1P6RbNoyjhgKwW3A/Bjlql3xHo\n8Lf0NW8svnFrC5Sgjx6G8EBLOg6aPZnRgwIDAQAB\n-----END RSA PUBLIC KEY-----",
		1680, 426, "utility")
}
func verifyDemo() {
	//chipApi2.VerifyMinerChips("63e6667d4050b4ef8dc49e024260234d5479b74da342fb55a88d4c12eccfe1892100f71527e85729259dd4631c63cebcf05699cfaef94fdcbe6135fc3bd541a72fa56a8b350a1de97a05fbead62e7a4669697d4635c4da77486fb91000e88e37f73a255850525eaf5f08e2f66cb122d266ad1f68b1c20f87680217850afa5e7263cf8bd698528c9d9aeb9373476423a487a40e72c5b83c0fe5247f2ff52c732d00200040d7ca9069fca187b7b65673614319f533200e33a88876f7c07452c58ae6f5b48228a486896319394ffbae0bae7af97b4aeab4b0101445cb1f8652f1facdd00298fef271712e22227a12e4134e2e82e39a0b0d19901068533fc5135414",
	//	"-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAmX49OU7W8Nu0bMGw/6yHbAoqj+cVo2A2PpZMvhwQOUpGOrJVENZ2\nQN9MmSJsZ/eUxS9JL3TBPmZNYvzVwnvApVEDBLUY23HXDA8CpoXaOeftZu8zYpDV\nnX4Zy0V0bF2WqR4ajNGDnsHkbPO5x2XToTqnZNFitgCFlTZtL0qL3X5713kaAz56\nTMsLa/E0tZcgkHVL1fp4j1BzrSYzhWWqw1gRLYsBgkboQqUUcr+/GYcdGDzbn6Oa\ntU7t6GfQo1iSS4C1C1BZHGLmy/uBs4nJq/RIdmCFo4G3Hx2rDuw/L1Ws1uApUxTI\n2XTaxoPF9RWxsh1qamX30yHPffwm/GrwtwIDAQAB\n-----END RSA PUBLIC KEY-----",
	//	256, 426, "utility")
	chipApi2.VerifyChipsSignature("63e6667d4050b4ef8dc49e024260234d5479b74da342fb55a88d4c12eccfe1892100f71527e85729259dd4631c63cebcf05699cfaef94fdcbe6135fc3bd541a72fa56a8b350a1de97a05fbead62e7a4669697d4635c4da77486fb91000e88e37f73a255850525eaf5f08e2f66cb122d266ad1f68b1c20f87680217850afa5e7263cf8bd698528c9d9aeb9373476423a487a40e72c5b83c0fe5247f2ff52c732d00200040d7ca9069fca187b7b65673614319f533200e33a88876f7c07452c58ae6f5b48228a486896319394ffbae0bae7af97b4aeab4b0101445cb1f8652f1facdd00298fef271712e22227a12e4134e2e82e39a0b0d19901068533fc5135414",
		"-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAmX49OU7W8Nu0bMGw/6yHbAoqj+cVo2A2PpZMvhwQOUpGOrJVENZ2\nQN9MmSJsZ/eUxS9JL3TBPmZNYvzVwnvApVEDBLUY23HXDA8CpoXaOeftZu8zYpDV\nnX4Zy0V0bF2WqR4ajNGDnsHkbPO5x2XToTqnZNFitgCFlTZtL0qL3X5713kaAz56\nTMsLa/E0tZcgkHVL1fp4j1BzrSYzhWWqw1gRLYsBgkboQqUUcr+/GYcdGDzbn6Oa\ntU7t6GfQo1iSS4C1C1BZHGLmy/uBs4nJq/RIdmCFo4G3Hx2rDuw/L1Ws1uApUxTI\n2XTaxoPF9RWxsh1qamX30yHPffwm/GrwtwIDAQAB\n-----END RSA PUBLIC KEY-----",
		"utility")
}

func main() {
	//cardList := BMChipsInfos()
	//fmt.Println(cardList)

	args := os.Args
	if len(args) < 3 {
		fmt.Println("insufficient argument for the main")
		return
	}
	// 6号芯片
	command, _ := strconv.Atoi(args[2])

	switch args[1] {
	case "list":
		chipList()
	case "start":
		fipBin := "../../../bm_chip/src/fip.bin"
		rambootRootfs := "../../../bm_chip/src/ramboot_rootfs.itb"
		startCPU(command, fipBin, rambootRootfs)
	case "burn":
		chipBurning(command)
	case "keygen":
		chipGenKeyPairs(command)
	case "keyread":
		readKeyPairs(command)
	case "sign":
		signDemo(command)
	case "verify":
		verifyDemo()
	default:
		fmt.Println("Invalid command")
	}

}
