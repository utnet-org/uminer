syntax = "proto3";

package chainApi;

option go_package = "../../chainApi/rpc";


service ChainService {
  rpc UpdateChainsStatus (ReportChainsStatusRequest) returns (ReportChainsStatusReply);
  rpc UpdateMinerStatus (ReportMinerStatusRequest) returns (ReportMinerStatusReply);
  rpc GetMinerKeys (GetMinerKeysRequest) returns (GetMinerKeysReply);
  rpc ClaimComputation (ClaimComputationRequest) returns (ClaimComputationReply);
  rpc ChallengeComputation (ChallengeComputationRequest) returns (ChallengeComputationReply);

}

// generate the miner key pairs (challenge keys)
message GetMinerKeysRequest {
  string accessKeys = 1;
}
message GetMinerKeysReply {
  string privateKey = 1;
  string pubKey = 2;
}

// chain information
message ReportChainsStatusRequest{
}
message ReportChainsStatusReply{
  string computation = 1;
  string NumberOfMiners = 2;
  string rewards = 3;
  string latestBlockHeight = 4;
  string latestBlockHash = 5;
  string latestBlockTime = 6;
}

// miner information
message ReportMinerStatusRequest{
  string address = 1;
}
message ReportMinerStatusReply{
  string minerID = 1;
  string computation = 2;
  string rewards = 3;
  string NumberOfBlock = 4;
  string NumberOfWorkers = 5;
}

message chipSets {
  string serialNumber = 1;
  string busID = 2;
}
message ClaimComputationRequest {
//  string address = 1;
//  string serverIP = 2;
//  repeated chipSets chipSets = 3;
//  int64 power = 4;
  string minerKey = 1;
  string chipPubK = 2;
  string chipP2K = 3;
  string signature = 4;
}
message ClaimComputationReply {
  string txHash = 1;
//  string containerId = 2;
//  repeated int64 rangeSet = 3;

}

message ChallengeComputationRequest {
  string url = 1;
  int64 segment = 2;
  string message = 3;
}
message signatureSets {
  string serialNumber = 1;
  string busID = 2;
  string signature = 3;
}
message ChallengeComputationReply {
  string   containerID = 1;
  repeated signatureSets signatureSets = 2;
  bool     status = 3;
}