syntax = "proto3";

package chainApi;

option go_package = "../../chainApi/rpc";


service ChainService {
  rpc UpdateChainsStatus (ReportChainsStatusRequest) returns (ReportChainsStatusReply);
//  rpc UpdateMinerStatus (ReportMinerStatusRequest) returns (ReportMinerStatusReply);
  rpc ReportChip (ReportChipRequest) returns (ReportChipReply);
  rpc GetMinerAccountKeys (GetMinerAccountKeysRequest) returns (GetMinerAccountKeysReply);
  rpc FaucetNewAccount (FaucetNewAccountRequest) returns (FaucetNewAccountReply);
  rpc ClaimStake (ClaimStakeRequest) returns (ClaimStakeReply);
  rpc AddChipOwnership (AddChipOwnershipRequest) returns (AddChipOwnershipReply);
  rpc ClaimChipComputation (ClaimChipComputationRequest) returns (ClaimChipComputationReply);
  rpc GetMinerChipsList (GetMinerChipsListRequest) returns (GetMinerChipsListReply);
  rpc ChallengeComputation (ChallengeComputationRequest) returns (ChallengeComputationReply);

}

// generate the miner key pairs (challenge keys)
message GetMinerAccountKeysRequest {
  string nodePath = 1;
  string mnemonic = 2;
}
message GetMinerAccountKeysReply {
  string pubKey = 1;
  string address = 2;
}

//
message FaucetNewAccountRequest {
  string accountId = 1;
  string nodePath = 2;
  string sender = 3;
  string amount = 4;
  string net = 5;
}
message FaucetNewAccountReply{
  string txHash = 1;
}


// chain information
message ReportChainsStatusRequest{
}
message ReportChainsStatusReply{
  string computation = 1;
  string NumberOfMiners = 2;
  string rewards = 3;
  string latestBlockHeight = 4;
  string latestBlockHash = 5;
  string latestBlockTime = 6;
}

// miner information
message ReportMinerStatusRequest{
  string address = 1;
}
message ReportMinerStatusReply{
  string minerID = 1;
  string computation = 2;
  string rewards = 3;
  string NumberOfBlock = 4;
  string NumberOfWorkers = 5;
}

// foundation report chip on chain
message ReportChipRequest{
//  string serialNumber  = 1;
//  string busId = 2;
//  string power = 3;
//  string p2 = 4;
//  string publicKey = 5;
//  string p2Size = 6;
//  string publicKeySize = 7;
  string nodePath = 1;
  string chipFilePath = 2;
  string founder = 3;
  string founderKeyPath = 4;
}
message ReportChipReply{
  string txHash = 1;
}

// miner claim stake
message ClaimStakeRequest {
  string accountId = 1;
  string amount = 2;
  string nodePath = 3;
  string keyPath = 4;
  string net = 5;
}
message ClaimStakeReply {
  string transId = 1;
  string status = 2;
}

// miner claim computation
message chipSets {
  string serialNumber = 1;
  string busID = 2;
}
message AddChipOwnershipRequest {
  string accountId = 1;
  string chipPubK = 2;
  string nodePath = 3;
  string net = 4;
}
message AddChipOwnershipReply {
  string txHash = 1;
}
message ClaimChipComputationRequest {
  string accountId = 1;
  string nodePath = 3;
  string challengeKeyPath = 4;
  string signerKeyPath = 5;
  string net = 6;
}
message ClaimChipComputationReply {
  string txHash = 1;
}

// miner query their own chips
message chipDetails {
  string serialNumber  = 1;
  string busId = 2;
  int64  power = 3;
  string p2 = 4;
  string publicKey = 5;
  int64  p2Size = 6;
  int64  publicKeySize = 7;
}
message GetMinerChipsListRequest {
  string accountId = 1;
}
message GetMinerChipsListReply {
  repeated chipDetails chips = 1;
  string totalPower = 2;

}

// challenge miner when mining
message ChallengeComputationRequest {
  string challengeKey = 1;
  repeated string url = 2;
  string message = 3;
  repeated chipDetails chips = 4;
}
message signatureSets {
  string serialNumber = 1;
  string busID = 2;
  string signature = 3;
}
message ChallengeComputationReply {
  repeated signatureSets signatureSets = 1;
  string   txHash = 2;
}