syntax = "proto3";

package chipApi;

option go_package = "../../chipApi/rpc";


service ChipService {
  rpc StartChipCPU (ChipsRequest) returns (ChipStatusReply);
  rpc ListAllChips (ChipsRequest) returns (ListChipsReply);
  rpc BurnChipEfuse (ChipsRequest) returns (ChipStatusReply);
  rpc GenerateChipKeyPairs (ChipsRequest) returns (ChipStatusReply);
  rpc ObtainChipKeyPairs (ChipsRequest) returns (ReadChipReply);
  rpc SignChip (SignChipsRequest) returns (SignChipsReply);
}


message ChipItem {
  string devId = 1;
  string busId = 2;
  string memory = 3;
  string tpuuti = 4;
  string boardT = 5;
  string chipT = 6;
  string tpuP = 7;
  string tpuV = 8;
  string tpuC = 9;
  string currclk = 10;
  string status = 11;
}

message CardItem {
  string CardID = 1;
  string name = 2;
  string mode = 3;
  string serialNum = 4;
  string atx = 5;
  string maxP = 6;
  string boardP = 7;
  string boardT = 8;
  string minclk = 9;
  string maxclk = 10;
  string claimStatus = 11;
  repeated ChipItem chips = 12;
}


message ChipsRequest {
  string url = 1;
  string serialNum = 2;
  string busId = 3;
  string devId = 4;
}

// start/burn/gen chip
message ChipStatusReply{
  string status = 1;
  string msg = 2;
}

// details information
message ListChipsReply {
  int64 totalSize = 1;
  repeated CardItem cards = 2;
}

// read keys
message ReadChipReply {
  string serialNumber  = 1;
  string busId = 2;
  string devId = 3;
  string p2 = 4;
  string publicKey = 5;
  int64 p2Size = 6;
  int64 publicKeySize = 7;
}

//sign
message SignChipsRequest {
  string url = 1;
  string serialNum = 2;
  string busId = 3;
  string p2 = 4;
  string publicKey = 5;
  int64 p2Size = 6;
  int64 publicKeySize = 7;
  string msg = 8;
}
message SignChipsReply {
  string signature = 1;
  bool status = 2;
}